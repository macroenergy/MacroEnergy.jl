var documenterSearchIndex = {"docs":
[{"location":"User Guide/constraints.html#Macro-Constraint-Library","page":"Constraints","title":"Macro Constraint Library","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Currently, Macro includes the following constraints:","category":"page"},{"location":"User Guide/constraints.html#Balance-constraint","page":"Constraints","title":"Balance constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::BalanceConstraint, v::MacroEnergy.AbstractVertex, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{BalanceConstraint, MacroEnergy.AbstractVertex, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::BalanceConstraint, v::AbstractVertex, model::Model)\n\nAdd a balance constraint to the vertex v. \n\nIf v is a Node, a demand balance constraint is added. \nIf v is a Transformation, this constraint ensures that the stoichiometric equations linking the input and output flows are correctly balanced.\n\nbeginaligned\n    sum_substacki  in  textbalance_eqs_ids(v)  t  in  texttime_interval(v)  textbalance_eq(v i t) = 00\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Capacity-constraint","page":"Constraints","title":"Capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::CapacityConstraint, e::MacroEnergy.Edge, model::Model)\nMacroEnergy.add_model_constraint!(ct::CapacityConstraint, e::MacroEnergy.EdgeWithUC, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{CapacityConstraint, Edge, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::Edge, model::Model)\n\nAdd a capacity constraint to the edge e. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in {0, 1}. The function availability returns the time series of the capacity factor of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{CapacityConstraint, EdgeWithUC, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::EdgeWithUC, model::Model)\n\nAdd a capacity constraint to the edge e with unit commitment. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    sum_t in texttime_interval(e) textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in [-1, 1]. The function availability returns the time series of the availability of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#CO2-capacity-constraint","page":"Constraints","title":"CO2 capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"The CO2 capacity constraint is used to limit the amount of CO2 that can be emitted by a single CO2 node.","category":"page"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::CO2CapConstraint, n::Node{CO2}, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{CO2CapConstraint, Node{CO2}, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::CO2CapConstraint, n::Node{CO2}, model::Model)\n\nConstraint the CO2 emissions of CO2 on a CO2 node n to be less than or equal to the value of the rhs_policy for the CO2CapConstraint constraint type. If the price_unmet_policy is also specified, then a slack variable is added to the constraint to allow for the CO2 emissions to exceed the value of the rhs_policy by the amount specified in the price_unmet_policy for the CO2CapConstraint constraint type. Please check the example case in the ExampleSystems folder of Macro, or the Macro Input Data section of the documentation for more information on how to specify the rhs_policy and price_unmet_policy for the CO2CapConstraint constraint type.\n\nTherefore, the functional form of the constraint is:\n\nbeginaligned\n    sum_t in texttime_interval(n) textemissions(n t) - textprice_unmet_policy(n) times textslack(n) leq textrhs_policy(n)\nendaligned\n\n\"Emissions\" in the above equation is the net balance of CO2 flows into and out of the CO2 node n.\n\nnote: Enabling CO2 emissions for an asset\nFor modelers: To allow for an asset to contribute to the CO2 emissions of a CO2 node, the asset must have an \"emissions\" key in its balance_data dictionary. The value of this key should be the emission_rate of the asset.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Long-duration-storage-constraints","page":"Constraints","title":"Long-duration storage constraints","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"These additional constraints (and variables) can be used to ensure that storage levels of long-duration storage systems do not exceed installed capacity over non-representative subperiods. ","category":"page"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"For a complete description of the constraints, see the paper: \"Improved formulation for long-duration storage in capacity expansion models using representative periods\", Federico Parolin, Paolo Colbertaldo, Ruaridh Macdonald, 2024, https://doi.org/10.48550/arXiv.2409.19079.","category":"page"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::LongDurationStorageImplicitMinMaxConstraint, g::LongDurationStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{LongDurationStorageImplicitMinMaxConstraint, LongDurationStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::LongDurationStorageImplicitMinMaxConstraint, g::LongDurationStorage, model::Model)\n\nAdds constraints to ensure that the storage levels of long-duration storage systems do not exceed installed capacity over non-representative subperiods.\n\nThe functional form of the two constraints are:\n\nbeginaligned\n    textstorage_balance(p) + textmax_storage_level(r) - textstorage_level(tstart(p)) leq textcapacity(g) \n    textstorage_balance(p) +  textmin_storage_level(r) - textstorage_level(tstart(p)) geq 0\nendaligned\n\nwhere:\n\np is a non-representative subperiod.\nr is the representative subperiod used to model p.\ntstart(p) is the first timestep of the representative subperiod r used to model the non-representative subperiod p.\nstorage_balance(p) is the balance of the storage resource at the non-representative subperiod p and is defined as \n\nbeginaligned\n    textstorage_balance(p) = (1 - textloss_fraction) times textstorage_initial(p) + fractextflow(discharge_edge tstart(p))textefficiency(discharge_edge) - textefficiency(charge_edge) times textflow(charge_edge tstart(p))\nendaligned\n\nmax_storage_level(r) and min_storage_level(r) are the maximum and minimum storage levels for the representative subperiod r, respectively. These are used to constrain the storage levels as follows:\n\nbeginaligned\n    textmin_storage_level(t) leq textstorage_level(t) leq textmax_storage_level(t)\nendaligned\n\nfor each time t in the time interval of the storage resource g. t' is the corresponding time in the representative subperiod r used to model the time interval of the storage resource g.\n\nwarning: Only applies to long duration energy storage\nThis constraint only applies to long duration energy storage resources. To model a storage technology as long duration energy storage, the user must set long_duration = true in the Storage component of the asset in the .json file. Check the the file hydropower.json in the ExampleSystems/eastern_us_three_zones folder for an example of how to model a long duration energy storage resource.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Maximum-capacity-constraint","page":"Constraints","title":"Maximum capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MaxCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MaxCapacityConstraint, Union{AbstractEdge, AbstractStorage}, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)\n\nAdd a max capacity constraint to the edge or storage y. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(y) leq textmax_capacity(y)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Maximum-non-served-demand-constraint","page":"Constraints","title":"Maximum non-served demand constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MaxNonServedDemandConstraint, n::Node, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MaxNonServedDemandConstraint, Node, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxNonServedDemandConstraint, n::Node, model::Model)\n\nAdd a max non-served demand constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    sum_s in textsegments_nsd(n) textnon_served_demand(n s t) leq textdemand(n t)\nendaligned\n\nfor each time t in time_interval(n) for the node n.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Maximum-non-served-demand-per-segment-constraint","page":"Constraints","title":"Maximum non-served demand per segment constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MaxNonServedDemandPerSegmentConstraint, n::Node, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MaxNonServedDemandPerSegmentConstraint, Node, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::MaxNonServedDemandPerSegmentConstraint,\n    n::Node,\n    model::Model,\n)\n\nAdd a max non-served demand per segment constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    textnon_served_demand(n s t) leq textmax_non_served_demand(n s) times textdemand(n t)\nendaligned\n\nfor each segment s in segments_non_served_demand(n) and each time t in time_interval(n) for the node n. The function segments_non_served_demand returns the segments of the non-served demand of the node n as defined in the input data nodes.json.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Maximum-storage-level-constraint","page":"Constraints","title":"Maximum storage level constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MaxStorageLevelConstraint, g::AbstractStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MaxStorageLevelConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MaxStorageLevelConstraint, g::AbstractStorage, model::Model)\n\nAdd a max storage level constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) leq textmax_storage_level(g) times textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-capacity-constraint","page":"Constraints","title":"Minimum capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MinCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MinCapacityConstraint, Union{AbstractEdge, AbstractStorage}, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinCapacityConstraint, y::Union{AbstractEdge,AbstractStorage}, model::Model)\n\nAdd a min capacity constraint to the edge or storage y. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(y) geq textmin_capacity(y)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-flow-constraint","page":"Constraints","title":"Minimum flow constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MinFlowConstraint, e::Edge, model::Model)\nMacroEnergy.add_model_constraint!(ct::MinFlowConstraint, e::EdgeWithUC, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MinFlowConstraint, Edge, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::Edge, model::Model)\n\nAdd a min flow constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. \n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MinFlowConstraint, EdgeWithUC, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min flow constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity_size(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-storage-level-constraint","page":"Constraints","title":"Minimum storage level constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MinStorageLevelConstraint, g::AbstractStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MinStorageLevelConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageLevelConstraint, g::AbstractStorage, model::Model)\n\nAdd a min storage level constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) geq textmin_storage_level(g) times textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-storage-outflow-constraint","page":"Constraints","title":"Minimum storage outflow constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MinStorageOutflowConstraint, g::AbstractStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MinStorageOutflowConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageOutflowConstraint, g::AbstractStorage, model::Model)\n\nAdd a min storage outflow constraint to the storage g part of a HydroRes asset. The functional form of the constraint is:\n\nbeginaligned\n    textflow(spillage_edge t) + textflow(discharge_edge t) geq textmin_outflow_fraction(g) times textcapacity(discharge_edge)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\nwarning: Only applies to HydroRes assets\nThis constraint only applies to HydroRes assets. It returns a warning if the storage g does not have a spillage edge.  If the discharge edge is the only outflow, you should apply MinFlowConstraint to the discharge edge.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-up-and-down-time-constraint","page":"Constraints","title":"Minimum up and down time constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MinUpTimeConstraint, e::EdgeWithUC, model::Model)\nMacroEnergy.add_model_constraint!(ct::MinDownTimeConstraint, e::EdgeWithUC, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MinUpTimeConstraint, EdgeWithUC, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinUpTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min up time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textucommit(e t) geq sum_h=0^textmin_up_time(e)-1 textustart(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min up time duration\nThis constraint will throw an error if the minimum up time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MinDownTimeConstraint, EdgeWithUC, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MinDownTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min down time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    fractextcapacity(e)textcapacity_size(e) - textucommit(e t) geq sum_h=0^textmin_down_time(e)-1 textushut(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min down time duration\nThis constraint will throw an error if the minimum down time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Must-run-constraint","page":"Constraints","title":"Must-run constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::MustRunConstraint, e::Edge, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{MustRunConstraint, Edge, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::MustRunConstraint, e::Edge, model::Model)\n\nAdd a must run constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) = textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Must run constraint\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Ramping-limits-constraint","page":"Constraints","title":"Ramping limits constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::RampingLimitConstraint, e::Edge, model::Model)\nMacroEnergy.add_model_constraint!(ct::RampingLimitConstraint, e::EdgeWithUC, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{RampingLimitConstraint, Edge, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::Edge, model::Model)\n\nAdd a ramping limit constraint to the edge e. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{RampingLimitConstraint, EdgeWithUC, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::EdgeWithUC, model::Model)\n\nAdd a ramping limit constraint to the edge e with unit commitment. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) + textmin(availability(e t) max(min_flow_fraction(e) ramp_up_fraction(e))) times textcapacity_size(e) times textustart(e t) - textmin_flow_fraction(e) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) - textmin_flow_fraction(e) times textcapacity_size(e) times textustart(e t) + textmin(availability(e t) max(min_flow_fraction(e) ramp_down_fraction(e))) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-capacity-constraint","page":"Constraints","title":"Storage capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::StorageCapacityConstraint, g::AbstractStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{StorageCapacityConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageCapacityConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage capacity constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(g t) leq textcapacity(g)\nendaligned\n\nfor each time t in time_interval(g) for the storage g.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-discharge-limit-constraint","page":"Constraints","title":"Storage discharge limit constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::StorageDischargeLimitConstraint, e::Edge, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{StorageDischargeLimitConstraint, Edge, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageDischargeLimitConstraint, e::Edge, model::Model)\n\nAdd a storage discharge limit constraint to the edge e if the start vertex of the edge is a storage. The functional form of the constraint is:\n\nbeginaligned\n   fractextflow(e t)textefficiency(e) leq textstorage_level(start_vertex(e) timestepbefore(t 1 subperiods(e)))\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Storage discharge limit constraint\nThis constraint is only applied to edges with a start vertex that is a storage.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-symmetric-capacity-constraint","page":"Constraints","title":"Storage symmetric capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::StorageSymmetricCapacityConstraint, g::AbstractStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{StorageSymmetricCapacityConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageSymmetricCapacityConstraint,\n    g::AbstractStorage,\n    model::Model,\n)\n\nAdd a storage symmetric capacity constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e_discharge t) + textflow(e_charge t) leq textcapacity(e_discharge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-charge-discharge-ratio-constraint","page":"Constraints","title":"Storage charge discharge ratio constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(\n        ct::StorageChargeDischargeRatioConstraint,\n        g::AbstractStorage,\n        model::Model,\n)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{StorageChargeDischargeRatioConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageChargeDischargeRatioConstraint,\n    g::AbstractStorage,\n    model::Model,\n)\n\nAdd a storage charge discharge ratio constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcharge_discharge_ratio(g) times textcapacity(gdischarge_edge) = textcapacity(gcharge_edge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-max-duration-constraint","page":"Constraints","title":"Storage max duration constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::StorageMaxDurationConstraint, g::AbstractStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{StorageMaxDurationConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageMaxDurationConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage max duration constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(g) leq textmax_duration(g) times textcapacity(discharge_edge(g))\nendaligned\n\nnote: Storage max duration constraint\nThis constraint is only applied if the maximum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-min-duration-constraint","page":"Constraints","title":"Storage min duration constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"MacroEnergy.add_model_constraint!(ct::StorageMinDurationConstraint, g::AbstractStorage, model::Model)","category":"page"},{"location":"User Guide/constraints.html#MacroEnergy.add_model_constraint!-Tuple{StorageMinDurationConstraint, AbstractStorage, Model}","page":"Constraints","title":"MacroEnergy.add_model_constraint!","text":"add_model_constraint!(ct::StorageMinDurationConstraint, g::AbstractStorage, model::Model)\n\nAdd a storage min duration constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(g) geq textmin_duration(g) times textcapacity(discharge_edge(g))\nendaligned\n\nnote: Storage min duration constraint\nThis constraint is only applied if the minimum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/assets/beccselectricity.html#BECCS-Electricity","page":"BECCS Electricity","title":"BECCS Electricity","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html#Graph-structure","page":"BECCS Electricity","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"Bioenergy with carbon capture and storage (BECCS) that produces electricity is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"<img width=\"400\" src=\"../../images/beccselec.png\" />","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"A BECCS electricity asset is made of:","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"1 Transformation component, representing the BECCS process.\n5 Edge components:\n1 incoming Biomass Edge, representing the biomass supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the biomass.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Attributes","page":"BECCS Electricity","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"The structure of the input file for a BECCS electricity asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Transformation","page":"BECCS Electricity","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"Attribute Type Values Default Description/Units\ntimedata String Any Macro commodity type Required Time resolution for the time series data linked to the transformation. E.g. \"Biomass\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2t_Biomass\nco2_content epsilon_co2 Float64 Float64 0.0 t_CO2t_Biomass\nelectricity_production epsilon_elec_prod Float64 Float64 1.0 MWh_elect_Biomass\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2t_Biomass","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Default constraints\nThe default constraint for the transformation part of the BECCS electricity asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Flow-equations","page":"BECCS Electricity","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"note: BECCSElectricity\nbeginaligned\nphi_elec = phi_biomass cdot epsilon_elec_prod \nphi_co2 = -phi_biomass cdot epsilon_co2 \nphi_co2 = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Edges","page":"BECCS Electricity","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"warning: Asset expansion\nAs a modeling decision, only the Biomass edge is allowed to expand. Consequently, the has_capacity and constraints attributes can only be set for the Biomass edge. For all other edges, these attributes are pre-set to false and an empty list, respectively, to ensure proper modeling of the asset.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"warning: Directionality\nThe unidirectional attribute is only available for the Biomass edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_BECCS_Electricity_Herb\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Biomass edge).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional (only available for the Biomass edge).\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Default constraints\nThe only default constraint for the edges of the BECCS electricity asset is the Capacity constraint applied to the Biomass edge. ","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Example","page":"BECCS Electricity","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"The following is an example of the input file for a BECCS electricity asset that creates six BECCS electricity assets, two in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"BECCS_Electricity\": [\n        {\n            \"type\": \"BECCSElectricity\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"biomass_edge\": {\n                        \"type\": \"Biomass\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"start_vertex\": \"co2_sink\"\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Modeler Guide/build_sectors.html#Modeler-Guide","page":"How to build a sector","title":"Modeler Guide","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html#How-to-build-new-sectors-in-Macro","page":"How to build a sector","title":"How to build new sectors in Macro","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"This section provides an overview of the steps to build new sectors in Macro, including:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Adding new commodities to the model.\nCreating new assets and transformation processes.\nAdding modeling details to the assets (e.g., constraints, data, etc.).","category":"page"},{"location":"Modeler Guide/build_sectors.html#1.-Adding-a-new-sector-to-Macro","page":"How to build a sector","title":"1. Adding a new sector to Macro","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"In Macro, each sector is defined by a Commodity type. More specifically, a commodity type is defined as a subtype of the Commodity type, as can be seen at the top of the MacroEnergy.jl file:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"MacroEnergy.jl","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"## Commodity types\nabstract type Commodity end\nabstract type Electricity <: Commodity end ## MWh\nabstract type Hydrogen <: Commodity end ## MWh","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"the operator <: means is-a-subtype-of, that is Electricity and Hydrogen are subtypes of Commodity. ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Therefore, to add a new sector to Macro, the modeler needs to add a new line in the MacroEnergy.jl file, as follows:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"MacroEnergy.jl","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"# ... existing code ...\nabstract type MyNewSector <: Commodity end\n# ... existing code ...","category":"page"},{"location":"Modeler Guide/build_sectors.html#2.-Create-new-assets","page":"How to build a sector","title":"2. Create new assets","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Once the new commodity type is added to Macro, the modeler can create new assets that use this commodity type. For instance, a modeler may want to create a new asset that converts a commodity MyNewSector into two other commodities, Electricity and CO2. ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"tip: Tip\nBefore creating a new asset, we recommend the modeler to have a look at the existing assets in the src/assets folder. All the asset files follow a same structure to streamline the creation of new assets.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"As for the case of the commodity type, each asset in Macro is defined as a subtype of the AbstractAsset type (the user can find some examples by checking the struct definintion in the .jl files in the src/assets folder):","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"src/assets/electrolyzer.jl","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"struct Electrolyzer <: AbstractAsset\n    id::AssetId\n    electrolyzer_transform::Transformation\n    h2_edge::Edge{Hydrogen}\n    elec_edge::Edge{Electricity}\nend","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The steps to create a new asset MyNewAsset are:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Design the new asset in terms of transformations, edges, and storage units for each commodity type used in the asset.\nCreate a new Julia file in the src/assets folder called mynewasset.jl.\nAt the top of the file, define the asset type as a subtype of AbstractAsset.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"struct MyNewAsset <: AbstractAsset\n    # ... asset structure will go here ...\nend","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Define the fields of the asset type as transformations, edges, and storage units with the appropriate commodity types.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"struct MyNewAsset <: AbstractAsset\n    transform::Transformation\n    edge1::Edge{CommodityType1}\n    edge2::Edge{CommodityType2}\n    # ... rest of the asset structure will go here ...\nend","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Define a make function in the same file with the steps to create an instance of the asset. The function should have the following signature:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"function make(::Type{MyNewAsset}, data::AbstractDict{Symbol,Any}, system::System)\n    # ... make function will go here ...\n    return MyNewAsset(transform, edge1, edge2, # ... rest of the asset structure will go here ...)\nend","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"note: Make function\nThe make function should include the steps to create the asset structure, including:Creation of each component of the asset: transformations, edges, and storage units.\nDefault constraints for each component.\nStoichiometric equations/coefficients for the transformation processes.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"(Optional) Create a new JSON data file to test the new assets.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"warning: Include the new files in the MacroEnergy.jl file\nRemember to include the new files in the MacroEnergy.jl file, so that they are available when the package is loaded.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The following section provides an example of how to create a new sector and assets in Macro.","category":"page"},{"location":"Modeler Guide/build_sectors.html#Example","page":"How to build a sector","title":"Example","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"For example, let's create a new sector called MyNewSector with two assets: MyAsset1, and MyAsset2. ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The first asset will be a technology that converts a commodity MyNewSector, into two other commodities, Electricity and CO2, while the second asset will be a technology with a storage unit that stores the commodity MyNewSector.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"As seen in the previous section, the steps to create a new sector and assets are as follows:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Add the following line to the MacroEnergy.jl file:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"abstract type MyNewSector <: Commodity end","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"(try to add this line right after the definition of the Commodity type). ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Create a new file called MyAsset1.jl in the src/assets folder with the following content:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"# Structure of the asset\nstruct MyAsset1 <: AbstractAsset\n    id::AssetId\n    myasset1_transform::Transformation\n    mynewsector_edge::Edge{MyNewSector}\n    e_edge::Edge{Electricity}\n    co2_edge::Edge{CO2}\nend\n\n# Make function to create an instance of the asset\n# The function takes as input the data and the system, and returns an instance of the asset\n# The data is a dictionary with the asset data, and the system is the system object containing the locations, time data, and other relevant information\nfunction make(::Type{MyAsset1}, data::AbstractDict{Symbol,Any}, system::System)\n\n    # asset id\n    id = AssetId(data[:id])\n\n    # transformation\n    transform_data = process_data(data[:transforms])\n    myasset1_transform_default_constraints = [BalanceConstraint()]\n    myasset1_transform = Transformation(;\n        id = Symbol(transform_data[:id]),\n        timedata = system.time_data[Symbol(transform_data[:timedata])],\n        constraints = get(transform_data, :constraints, myasset1_transform_default_constraints),\n    )\n\n    # edges\n    mynewsector_edge_data = process_data(data[:edges][:mynewsector_edge])\n    mynewsector_edge_default_constraints = Vector{AbstractTypeConstraint}()\n    mynewsector_start_node = find_node(system.locations, Symbol(mynewsector_edge_data[:start_vertex]))\n    mynewsector_end_node = myasset1_transform\n    mynewsector_edge = Edge(\n        Symbol(String(id) * \"_\" * mynewsector_edge_data[:id]),\n        mynewsector_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        mynewsector_start_node,\n        mynewsector_end_node,\n    )\n    mynewsector_edge.constraints = get(mynewsector_edge_data, :constraints, mynewsector_edge_default_constraints)\n    mynewsector_edge.unidirectional = get(mynewsector_edge_data, :unidirectional, true)\n\n    elec_edge_data = process_data(data[:edges][:e_edge])\n    elec_start_node = myasset1_transform\n    elec_end_node = find_node(system.locations, Symbol(elec_edge_data[:end_vertex]))\n    elec_edge = EdgeWithUC(\n        Symbol(String(id) * \"_\" * elec_edge_data[:id]),\n        elec_edge_data,\n        system.time_data[:Electricity],\n        Electricity,\n        elec_start_node,\n        elec_end_node,\n    )\n    elec_edge.constraints = get(\n        elec_edge_data,\n        :constraints,\n        [\n            CapacityConstraint(),\n            RampingLimitConstraint(),\n            MinUpTimeConstraint(),\n            MinDownTimeConstraint(),\n        ],\n    )\n    elec_edge.unidirectional = get(elec_edge_data, :unidirectional, true)\n    elec_edge.startup_fuel_balance_id = :energy\n\n    co2_edge_data = process_data(data[:edges][:co2_edge])\n    co2_start_node = myasset1_transform\n    co2_end_node = find_node(system.locations, Symbol(co2_edge_data[:end_vertex]))\n    co2_edge = Edge(\n        Symbol(String(id) * \"_\" * co2_edge_data[:id]),\n        co2_edge_data,\n        system.time_data[:CO2],\n        CO2,\n        co2_start_node,\n        co2_end_node,\n    )\n    co2_edge.constraints =\n        get(co2_edge_data, :constraints, Vector{AbstractTypeConstraint}())\n    co2_edge.unidirectional = get(co2_edge_data, :unidirectional, true)\n\n    myasset1_transform.balance_data = Dict(\n        # Edit this part to include the stoichiometric equations for the transformation process \n        ),\n    )\n\n    return MyAsset1(id, myasset1_transform, mynewsector_edge, elec_edge, co2_edge)\nend","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"From the code above, you can see that the modeler needs to provide the asset structure as a Julia struct, along with the default constraints for transformations and edges (myasset1_transform_default_constraints, mynewsector_edge_default_constraints), and the stoichiometric coefficients for the transformation process being modeled (myasset1_transform.balance_data).","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"tip: Tip\nChecking out other asset files in the src/assets folder is a good place to start adding new assets. ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The creation of the second asset, MyAsset2, follows very similar steps to the creation of MyAsset1. The main difference is that MyAsset2 has a storage unit:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"struct MyAsset2 <: AbstractAsset\n    id::AssetId\n    myasset2_storage::AbstractStorage{MyNewSector}  # <--- Storage unit\n    discharge_edge::Edge{MyNewSector}\n    charge_edge::Edge{MyNewSector}\nend\n\nfunction make(::Type{MyAsset2}, data::AbstractDict{Symbol,Any}, system::System)\n\n    # asset id\n    id = AssetId(data[:id])\n\n    # storage\n    storage_data = process_data(data[:storage])\n    myasset2_storage_default_constraints = [\n            BalanceConstraint(),\n            StorageCapacityConstraint(),\n            StorageMaxDurationConstraint(),\n            StorageMinDurationConstraint(),\n            StorageSymmetricCapacityConstraint(),\n        ]\n    myasset2_storage = Storage(id, \n        storage_data, \n        system.time_data[Symbol(storage_data[:commodity])], \n        MyNewSector, \n        myasset2_storage_default_constraints\n    )\n\n    # edges\n    discharge_edge_data = process_data(data[:edges][:discharge_edge])\n    discharge_edge_default_constraints = [CapacityConstraint()]\n    discharge_start_node = myasset2_storage\n    discharge_end_node = find_node(system.locations, Symbol(discharge_edge_data[:end_vertex]))\n    discharge_edge = Edge(\n        Symbol(String(id) * \"_\" * discharge_edge_data[:id]),\n        discharge_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        discharge_start_node,\n        discharge_end_node,\n    )\n    discharge_edge.constraints = get(discharge_edge_data, :constraints, discharge_edge_default_constraints)\n    discharge_edge.unidirectional = get(discharge_edge_data, :unidirectional, true)\n\n    charge_edge_data = process_data(data[:edges][:charge_edge])\n    charge_start_node = find_node(system.locations, Symbol(charge_edge_data[:start_vertex]))\n    charge_end_node = myasset2_storage\n    charge_edge = Edge(\n        Symbol(String(id) * \"_\" * charge_edge_data[:id]),\n        charge_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        charge_start_node,\n        charge_end_node,\n    )\n    charge_edge.constraints = get(charge_edge_data, :constraints, Vector{AbstractTypeConstraint}())\n    charge_edge.unidirectional = get(charge_edge_data, :unidirectional, true)\n\n    myasset2_storage.discharge_edge = discharge_edge\n    myasset2_storage.charge_edge = charge_edge\n\n    myasset2_storage.balance_data = Dict(\n        # Edit this part to include the energy efficiency of the storage unit or any other stoiometric equations\n        ),\n    )\n\n    return MyAsset2(id, myasset2_storage, discharge_edge, charge_edge)\nend","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#BECCS-Hydrogen","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html#Graph-structure","page":"BECCS Hydrogen","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Bioenergy with carbon capture and storage (BECCS) that produces hydrogen is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"<img width=\"400\" src=\"../../images/beccsh2.png\" />","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"A BECCS hydrogen asset is made of:","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"1 Transformation component, representing the BECCS process.\n6 Edge components:\n1 incoming Biomass Edge, representing the biomass supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the biomass.\n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Attributes","page":"BECCS Hydrogen","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The structure of the input file for a BECCS hydrogen asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Transformation","page":"BECCS Hydrogen","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Attribute Type Values Default Description/Units\ntimedata String Any Macro commodity type Required Time resolution for the time series data linked to the transformation. E.g. \"Biomass\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2t_Biomass\nco2_content epsilon_co2 Float64 Float64 0.0 t_CO2t_Biomass\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elect_Biomass\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2t_Biomass\nhydrogen_production epsilon_h2_prod Float64 Float64 0.0 t_H2t_Biomass","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Default constraints\nThe default constraint for the transformation part of the BECCS hydrogen asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Flow-equations","page":"BECCS Hydrogen","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"note: BECCSHydrogen\nbeginaligned\nphi_h2 = phi_biomass cdot epsilon_h2_prod \nphi_elec = -phi_biomass cdot epsilon_elec_consumption \nphi_co2 = -phi_biomass cdot epsilon_co2 \nphi_co2 = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Edges","page":"BECCS Hydrogen","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"warning: Asset expansion\nAs a modeling decision, only the Biomass edge is allowed to expand. Consequently, the has_capacity and constraints attributes can only be set for the Biomass edge. For all other edges, these attributes are pre-set to false and an empty list, respectively, to ensure proper modeling of the asset.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"warning: Directionality\nThe unidirectional attribute is only available for the Biomass edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_BECCS_H2_Herb\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge. (only available for the Biomass edge)\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional. (only available for the Biomass edge)\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Default constraints\nThe only default constraint for the edges of the BECCS hydrogen asset is the Capacity constraint applied to the Biomass edge. ","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Example","page":"BECCS Hydrogen","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The following is an example of the input file for a BECCS hydrogen asset that creates six BECCS hydrogen assets, two in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"BECCS_Hydrogen\": [\n        {\n            \"type\": \"BECCSHydrogen\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"biomass_edge\": {\n                        \"type\": \"Biomass\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"start_vertex\": \"co2_sink\"\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html#Macro-Input-Data","page":"Input Data","title":"Macro Input Data","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Macro version 0.1.0","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Macro input files are organized into three main directories:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Settings folder: Contains all the settings for the run and the solver.\nSystem folder: Contains all files related to the system, such as sectors, time resolution, nodes, demand, etc.\nAssets folder: Contains all the files that define the assets, such as transmission lines, power plants, storage units, etc.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"In addition to these folders, the user should provide a system_data.json file that contains the paths to the input folders and files. ","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"As a result, the folder structure for a Macro case should be as follows:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"MacroCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml      \n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── demand.csv\n│   └── fuel_prices.csv\n│ \n├── 📁 assets\n│   ├──battery.json\n│   ├──electrolyzers.json\n│   ├──fuel_prices.csv\n│   ├──fuelcell.json\n│   ├──h2storage.json\n│   ├──power_lines.json\n│   ├──thermal_h2.json\n│   ├──thermal_power.json\n│   ├──vre.json\n| [...other asset types...]\n│   └──availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"note: Units in Macro\nMacro is agnostic to the units of the input data. Special attention should be paid to the units of the transformation parameters (e.g., conversion efficiency, fuel-to-energy production, etc.). It is the user's responsibility to ensure that the units are consistent across the system input data.The following table shows the default units of the input data that are used, for instance, in the example system provided with the package:Sector/Quantity Units\nElectricity MWh\nHydrogen MWh\nNaturalGas MWh\nUranium MWh\nCoal MWh\nCO2 ton\nCO2Captured ton\nBiomass ton\nTime hours\nPrice USDCommodities that require only an energy representation (e.g., Hydrogen) have units of MWh. Commodities that require a physical representation (e.g., Biomass, where regional supply curve is important) have units of metric tonnes. The recommended convention is MWh on a higher heating value basis for transformations where hydrogen is involved, and tonnes on a dry basis for transformations where biomass is involved.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"warning: Comments in JSON files\nThe comments (e.g. //) in the JSON file examples are for illustrative purposes only. They should be removed before using these lines as input, as JSON does not support comments.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"In the following section, we will go through each folder and file in detail.","category":"page"},{"location":"User Guide/input_data.html#Settings-folder","page":"Input Data","title":"Settings folder","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The settings folder currently contains only one file, macro_settings.yml, which contains the settings for the run.","category":"page"},{"location":"User Guide/input_data.html#macro_settings.json","page":"Input Data","title":"macro_settings.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Attribute Values Default Description\nConstraintScaling True, False False If true, the model will scale the optimization model constraints to make it more numerically stable.\nWriteSubcommodities True, False False If true, the model will write the subcommodities created by the user in the results.\nOverwriteResults True, False False If true, the model will overwrite the results file if it already exists.\nOutputDir String \"results\" The directory where the results will be saved.","category":"page"},{"location":"User Guide/input_data.html#System-folder","page":"Input Data","title":"System folder","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The system folder currently contains five main files:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"commodities.json: Defines the sectors/commodities used in the system.\ntime_data.json: Defines the time resolution data for each sector.\nnodes.json: Defines the nodes in the system.\ndemand.csv: Contains the demand data.\nfuel_prices.csv: Contains the prices of fuels.","category":"page"},{"location":"User Guide/input_data.html#commodities.json","page":"Input Data","title":"commodities.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains a list of sectors/commodities used in the system. The file is a list of string for each sector/commodity:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"commodities\": [\n        \"Sector_1\",\n        \"Sector_2\",\n        ...\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Example: Energy system with electricity, hydrogen, natural gas, CO2, uranium, and coal sectors:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"Hydrogen\",\n        \"NaturalGas\",\n        \"CO2\", \n        \"Uranium\",\n        \"Coal\"\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html#time_data.json","page":"Input Data","title":"time_data.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains the data related to the time resolution for each sector. The file is structured as follows:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"PeriodLength\": <Integer>,  // units: hours\n    \"HoursPerTimeStep\": {\n        \"Sector_1\": <Integer>,  // units: hours\n        \"Sector_2\": <Integer>,  // units: hours\n        ...\n    },\n    \"HoursPerSubperiod\": {\n        \"Sector_1\": <Integer>,\n        \"Sector_2\": <Integer>,\n        ...\n    },\n    \"PeriodMap\": {\n        \"path\": <String>, // relative path to the period map file\n    },\n    \"TotalHoursModeled\": <Integer> // units: hours\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Attribute Values Description\nPeriodLength Integer Total number of hours in the simulation.\nHoursPerTimeStep Integer Number of hours in each time step for each sector.\nHoursPerSubperiod Integer Number of hours in each subperiod for each sector.\nPeriodMap String Relative path to the period map file. For an example of the period map file, see Period_map.csv.\nTotalHoursModeled Integer Total number of hours modeled. Note: When using representative periods, this parameter is used to compute the weight of each subperiod.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"note: Subperiods\nSubperiods represent the time slices of the simulation used to perform time wrapping for time-coupling constraints (see, for example, MacroEnergy.timestepbefore).","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Example: Energy system modeled for three weeks, with one hour per time step, and one week per subperiod:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"PeriodLength\": 504,  // 3 weeks\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,\n        \"Hydrogen\": 1,\n        \"NaturalGas\": 1,\n        \"CO2\": 1,\n        \"Uranium\": 1,\n        \"Coal\": 1\n    },\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 168,  // 1 week\n        \"Hydrogen\": 168,\n        \"NaturalGas\": 168,\n        \"CO2\": 168,\n        \"Uranium\": 168,\n        \"Coal\": 168\n    },\n    \"PeriodMap\": {\n        \"path\": \"three_weeks/Period_map.csv\"\n    },\n    \"TotalHoursModeled\": 8760\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Period_map.csv:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"| Period_Index | Rep_Period | Rep_Period_Index |\n|--------------|------------|------------------|\n| 1            | 6          | 1                |\n| 2            | 6          | 1                |\n| 3            | 6          | 1                |\n| 4            | 6          | 1                |\n| 5            | 6          | 1                |\n| 6            | 6          | 1                |\n| 7            | 6          | 1                |\n| 8            | 6          | 1                |\n| 9            | 6          | 1                |\n| 10           | 17         | 2                |\n| ...          | ...        | ...              |","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"In this example, Macro uses the above input files to create the following parameters:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Total time interval: [1:PeriodLength] = [1:504]\nHoursPerTimeStep: 1 for all sectors\nSubperiods:\n[1:168]: first week\n[169:336]: second week\n[337:504]: third week\nPeriod map:    This file assigns each week of the TotalHoursModeled to one of the representative periods.    For instance: \nweek 1 -> 6th representative period\nweek 2 -> 6th representative period\nweek 3 -> 6th representative period\nweek 10 -> 17th representative period\netc.\nWeight of each subperiod: \n[1:168] -> 18.0495\n[169:336] -> 21.0577\n[337:504] -> 13.0357\nThis value is used to 'weight' each hour of the subperiods in the operational model.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The formula used to compute the weight of each subperiod is:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"w_i = alpha * n_i","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"where alpha is a scaling factor defined as:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"alpha = fracTotalHoursModeledsum_i=1^N HoursPerSubperiod * n_i","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"and n_i is the number of times the i-th representative period is used in the period map to model periods, and N is the total number of representative periods.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"note: Weights without period map\nIf the period map is not provided, the weights are set to 1 for each representative period.","category":"page"},{"location":"User Guide/input_data.html#nodes.json","page":"Input Data","title":"nodes.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file defines the regions/nodes for each sector. It is structured as a list of dictionaries, where each dictionary defines a network for a given sector. ","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Each dictionary has three main attributes:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"type: The type of the network (e.g. \"NaturalGas\", \"Electricity\", etc.).\nglobal_data: attributes that are the same for all the nodes in the network.\ninstance_data: attributes that are different for each node in the network.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This structure for the network has the advantage of grouping the common attributes for all the nodes in a single place, avoiding to repeat the same attribute for all the nodes.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This is the structure of the nodes.json file:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"NaturalGas\", // NaturalGas network\n            \"global_data\": {},    // attributes that are the same for all the nodes in the network\n            \"instance_data\": [\n                // NaturalGas node 1 ...\n                // NaturalGas node 2 ...\n                // ...\n            ]\n        },\n        {\n            \"type\": \"Electricity\", // Electricity network\n            \"global_data\": {},     // attributes that are the same for all the nodes in the network\n            \"instance_data\": [\n                // Electricity node 1 ...\n                // Electricity node 2 ...\n                // ...\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The attributes that can be set for each node (either in global_data or instance_data) are the following:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Attribute Type Values Default Description\nid String String Required Unique identifier for the node. E.g. \"elec_node_1\".\ntype String Any Macro commodity type Required Commodity type. E.g. \"Electricity\".\ntime_interval String Any Macro commodity type Required Time resolution for the time series data linked to the node. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any Macro constraint type Empty List of constraints applied to the node. E.g. {\"BalanceConstraint\": true, \"MaxNonServedDemandConstraint\": true}.\ndemand Dict Demand file path and header Empty Path to the demand file and column name for the demand time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/demand.csv\", \"header\": \"Demand_MW_z1\"}}.\nmax_nsd Vector{Float64} Vector of numbers in [0,1] [0.0] Maximum allowed non-served demand for each demand segment as a fraction of the total demand. E.g. [1.0] for a single segment.\nmax_supply Vector{Float64} Vector of numbers [0.0] Maximum allowed supply for each supply segment. E.g. [1000.0] for a single segment.\nprice Dict Price file path and header Empty Path to the price file and column name for the price time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/fuel_prices.csv\", \"header\": \"natgas_SE\"}}.\nprice_nsd Vector{Float64} Vector of numbers [0.0] Price/penalty for non-served demand by segment. E.g. [5000.0] for a single segment.\nprice_supply Vector{Float64} Vector of numbers [0.0] Piecewise linear price for supply curves. E.g. [0.0, 100.0, 200.0].\nprice_unmet_policy Dict{DataType,Float64} Dict of Macro policy types and numbers Empty Price/penalty for unmet policy constraints.\nrhs_policy Dict{DataType,Float64} Dict of Macro constraint types and numbers Empty Right hand side of the policy constraints. E.g. {\"CO2CapConstraint\": 200}, carbon price of 200 USD/ton.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Example: the following is an example of a nodes.json file with both electricity, natural gas, CO2 and biomass sectors covering most of the attributes present above. The (multiplex)-network in the system is made of the following sub-networks:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"NaturalGas (three nodes)\nnatgas_SE\nnatgas_MIDAT\nnatgas_NE\nElectricity (three nodes)\nelec_SE\nelec_MIDAT\nelec_NE\nCO2 (one node)\nco2_sink\nBiomass (one node)\nbioherb_SE","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Therefore, the system has 4 networks and 8 nodes in total.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"NaturalGas\",\n            \"global_data\": {\n                \"time_interval\": \"NaturalGas\" // time resolution as defined in the time_data.json file\n            },\n            \"instance_data\": [\n                {   // NaturalGas node 1\n                    \"id\": \"natgas_SE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\", // path to the price file\n                            \"header\": \"natgas_SE\" // column name in the price file for the price time series\n                        }\n                    }\n                },  // End of NaturalGas node 1\n                {   // NaturalGas node 2\n                    \"id\": \"natgas_MIDAT\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_MIDAT\"\n                        }\n                    }\n                },  // End of NaturalGas node 2\n                {   // NaturalGas node 3\n                    \"id\": \"natgas_NE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_NE\"\n                        }\n                    }\n                },  // End of NaturalGas node 3\n            ]\n        },\n        {\n            \"type\": \"Electricity\",\n            \"global_data\": {\n                \"time_interval\": \"Electricity\",\n                \"max_nsd\": [  // maximum allowed non-served demand for each demand segment as a fraction of the total demand\n                    1\n                ],\n                \"price_nsd\": [  // price/penalty for non-served demand by segment\n                    5000.0\n                ],\n                \"constraints\": {    // constraints applied to the nodes\n                    \"BalanceConstraint\": true,\n                    \"MaxNonServedDemandConstraint\": true,\n                    \"MaxNonServedDemandPerSegmentConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"elec_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\", // path to the demand file\n                            \"header\": \"Demand_MW_z1\" // column name in the demand file for the demand time series\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_MIDAT\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z2\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_NE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z3\"\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"CO2\",\n            \"global_data\": {\n                \"time_interval\": \"CO2\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"co2_sink\",\n                    \"constraints\": {\n                        \"CO2CapConstraint\": true\n                    },\n                    \"rhs_policy\": {  // right hand side of the policy constraints\n                        \"CO2CapConstraint\": 0\n                    },\n                    \"price_unmet_policy\": {  // price/penalty for unmet policy constraints\n                        \"CO2CapConstraint\": 250.0\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"Biomass\",\n            \"global_data\": {\n                \"time_interval\": \"Biomass\",\n                \"constraints\": {\n                    \"BalanceConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"bioherb_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Zero\"\n                        }\n                    },\n                    \"max_supply\": [  // maximum allowed supply for each supply segment\n                        10000,\n                        20000,\n                        30000\n                    ],\n                    \"price_supply\": [  // piecewise linear price for supply curves\n                        40,\n                        60,\n                        80\n                    ]\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html#demand.csv","page":"Input Data","title":"demand.csv","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: CSV","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains the demand data for each region/node. ","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"First column: Time step.\nRemaining columns: Demand for each region/node (units: MWh).","category":"page"},{"location":"User Guide/input_data.html#Example:","page":"Input Data","title":"Example:","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"TimeStep DemandMWz1 DemandMWz2 DemandMWz3\n1 100 200 300\n2 110 210 310\n... ... ... ...","category":"page"},{"location":"User Guide/input_data.html#fuel_prices.csv","page":"Input Data","title":"fuel_prices.csv","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: CSV","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains the prices for each fuel for each region/node.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"First column: Time step.\nRemaining columns: Prices for each region/node (units: USD/MWh).","category":"page"},{"location":"User Guide/input_data.html#Example:-2","page":"Input Data","title":"Example:","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"TimeStep natgas_SE natgas_MIDAT natgas_NE\n1 100 110 120\n2 110 120 130\n... ... ... ...","category":"page"},{"location":"User Guide/input_data.html#Assets-folder","page":"Input Data","title":"Assets folder","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The assets folder contains all the files that define the resources and technologies that are included in the system. As a general rule, each asset type has its own file, where each file is structured in a similar way to the nodes.json file. ","category":"page"},{"location":"User Guide/input_data.html#Asset-files","page":"Input Data","title":"Asset files","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Similar to the nodes.json file, each asset file has the following three main parameters:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"type: The type of the asset (e.g. \"Battery\", \"FuelCell\", \"PowerLine\", etc.).\nglobal_data: attributes that are the same for all the assets of the same type (e.g., unit commitment constraints applied to all the power plants).\ninstance_data: attributes that are different for each asset of the same type (e.g., investment costs, lifetime, etc.).","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Depending on the graph structure of the asset, both global_data and instance_data can have different attributes, one for each transformation, edge, and storage present in the asset. ","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"tip: Example: natural gas power plant\nFor example, a natural gas combined cycle power plant is represented by an asset made of: 1 transformation (combustion and electricity generation)\n3 edges \nnatural gas flow\nelectricity flow\nCO2 flowThen, both global_data and instance_data will have the following structure:{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"In the following sections, we will go through each asset type and show the attributes that can be set for each of them. Each section will contain the following three parts:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Graph structure: a graphical representation of the asset, showing the transformations, edges, and storages present in the asset.\nAttributes: a table with the attributes that can be set for each asset type.\nExample: an example of the asset type file (.json).","category":"page"},{"location":"User Guide/input_data.html#system_data.json","page":"Input Data","title":"system_data.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains the paths to the input folders and files, and is structured as follows:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"commodities\": {\n        \"path\": \"system/commodities.json\"\n    },\n    \"locations\": {\n        \"path\": \"locations\"\n    },\n    \"settings\": {\n        \"path\": \"settings/macro_settings.json\"\n    },\n    \"assets\": {\n        \"path\": \"assets\"\n    },\n    \"time_data\": {\n        \"path\": \"system/time_data.json\"\n    },\n    \"nodes\": {\n        \"path\": \"system/nodes.json\"\n    }\n}","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Hydrogen-Line","page":"Hydrogen Line","title":"Hydrogen Line","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html#Graph-structure","page":"Hydrogen Line","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"A hydrogen line is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"<img width=\"400\" src=\"../../images/h2line.png\" />","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"A hydrogen line asset is very simple and is made of:","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"1 Edge component:\n1 Hydrogen Edge, representing the flow of hydrogen between two nodes.","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Attributes","page":"Hydrogen Line","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"The structure of the input file for a hydrogen line asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"{\n    \"edges\":{\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Edge","page":"Hydrogen Line","title":"Edge","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"Attribute Type Values Default Description\ntype String Hydrogen Required Commodity flowing through the edge.\nstart_vertex String Any hydrogen node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"h2_node_1\".\nend_vertex String Any hydrogen node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"h2_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges CapacityConstraint List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\ndistance Float64 Float64 0.0 Distance between the start and end vertex of the edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"tip: Default constraints\nThe default constraints for the hydrogen line asset are the following:Capacity constraint","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Example","page":"Hydrogen Line","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"The following is an example of the input file for a hydrogen line asset that creates two hydrogen lines, one connecting the SE and MIDAT regions, and one connecting the NE and SE regions.","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"{\n    \"h2transport\": [\n        {\n            \"type\": \"HydrogenLine\",\n            \"global_data\": {\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": false,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"h2_SE_to_MIDAT\",\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_SE\",\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"loss_fraction\": 0.067724471,\n                            \"distance\": 491.4512001,\n                            \"capacity_size\": 787.6,\n                            \"investment_cost\": 82682.23402\n                        }\n                    }\n                },\n                {\n                    \"id\": \"h2_NE_to_SE\",\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_NE\",\n                            \"end_vertex\": \"h2_SE\",\n                            \"loss_fraction\": 0.06553874,\n                            \"distance\": 473.6625536,\n                            \"capacity_size\": 787.6,\n                            \"investment_cost\": 79896.9841\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/introduction.html#Macro-Asset-Library","page":"Macro Asset Library","title":"Macro Asset Library","text":"","category":"section"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Macro is designed to be a flexible and modular model that can adapt to various energy system representations. The model provides a rich library of pre-defined assets, enabling a \"plug-and-play\" approach for users building their own energy system.","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Each asset is defined by a combination of transformations, edges, and storage units that represent the physical and operational characteristics of a technology. These assets can be combined to create a detailed representation of the energy system, capturing the interactions between technologies and sectors.","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"In the following sections, we will introduce each asset type and show the attributes that can be set for each of them as well as the equations that define the conversion processes. We will also provide a graphical representation of the asset in terms of transformations, edges, and storages to help the user understand the structure of the asset.","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Each section will have the following three parts:","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Graph structure: a graphical representation of the asset, showing the transformations, edges, and storages present in the asset.\nAttributes: a table with the attributes that can be set for each asset type.\nExample: an example of the asset type input file (.json) that can be used to create the asset.","category":"page"},{"location":"User Guide/assets/introduction.html#Available-assets","page":"Macro Asset Library","title":"Available assets","text":"","category":"section"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"The current library includes the following assets:","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Battery","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"battery.html\"><img width=\"270\" src=\"../../images/battery.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"BECCS Electricity","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"beccselectricity.html\"><img width=\"400\" src=\"../../images/beccselec.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"BECCS Hydrogen","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"beccshydrogen.html\"><img width=\"400\" src=\"../../images/beccsh2.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Electric DAC","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"electricdac.html\"><img width=\"360\" src=\"../../images/elecdac.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Electrolyzer","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"electrolyzer.html\"><img width=\"360\" src=\"../../images/electrolyzer.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Fuel Cell","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"fuelcell.html\"><img width=\"320\" src=\"../../images/fuelcell.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Gas Storage","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"gasstorage.html\"><img width=\"400\" src=\"../../images/gas_storage.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Hydrogen Line","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"hydrogenline.html\"><img width=\"220\" src=\"../../images/h2line.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Hydro Reservoir","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"hydropower.html\"><img width=\"360\" src=\"../../images/hydrores.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Must Run","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"mustrun.html\"><img width=\"250\" src=\"../../images/vre.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Natural Gas DAC","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"natgasdaq.html\"><img width=\"450\" src=\"../../images/natgasdac.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Power Line","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"powerline.html\"><img width=\"220\" src=\"../../images/powerline.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Thermal Hydrogen Plant (with and without CCS)","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"thermalhydrogen.html\"><img width=\"360\" src=\"../../images/smr.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Thermal Power Plant (with and without CCS)","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"thermalpower.html\"><img width=\"380\" src=\"../../images/thermalpower.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"Variable Renewable Energy resources (VRE)","category":"page"},{"location":"User Guide/assets/introduction.html","page":"Macro Asset Library","title":"Macro Asset Library","text":"<a href=\"vre.html\"><img width=\"300\" src=\"../../images/vre.png\" /></a>","category":"page"},{"location":"User Guide/assets/battery.html#Battery","page":"Battery","title":"Battery","text":"","category":"section"},{"location":"User Guide/assets/battery.html#Graph-structure","page":"Battery","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"A battery is a storage technology that is represented in Macro by the following graph structure:","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"<img width=\"270\" src=\"../../images/battery.png\" />","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Therefore, a battery asset is made of:","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"1 Storage component, representing the battery storage.\n2 Electricity Edge components:\none incoming representing the charge edge from the electricity network to the storage.\none outgoing representing the discharge edge from the storage to the electricity network.","category":"page"},{"location":"User Guide/assets/battery.html#Attributes","page":"Battery","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"As for all the other assets, the structure of the input file for a battery asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"{\n    \"storage\":{\n        // ... storage-specific attributes ...\n    },\n    \"edges\":{\n        \"charge_edge\": {\n            // ... charge_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"User Guide/assets/battery.html#Storage-component","page":"Battery","title":"Storage component","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"The definition of the Storage object can be found here MacroEnergy.Storage.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Attribute Type Values Default Description\ncommodity String Electricity Required Commodity being stored.\nconstraints Dict{String,Bool} Any Macro constraint type for storage BalanceConstraint, StorageCapacityConstraint, StorageSymmetricCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nlong_duration Bool Bool false Whether the storage is a long-duration storage. (Note: if true, the model will add the long-duration storage constraints to the storage).\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.\nmax_capacity Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nmin_capacity Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"tip: Default constraints\nAs noted in the above table, the default constraints for the storage component of the battery are the following:Balance constraint\nStorage capacity constraint\nStorage symmetric capacity constraintIf the storage is a long-duration storage, the following additional constraints are applied:Long-duration storage constraints","category":"page"},{"location":"User Guide/assets/battery.html#Charge-and-discharge-edges","page":"Battery","title":"Charge and discharge edges","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Both the charge and discharge edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Empty for charge edge, check box below for discharge edge List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\nefficiency Float64 Number in [0,1] 1.0 Efficiency of the charging/discharging process.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"tip: Efficiency\nThe efficiency of the charging/discharging process can be set in the charge_edge and discharge_edge parts of the input file. These parameters are used, for example, in the Balance constraint to balance the charge and discharge flows. ","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"tip: Default constraints - discharge edge\nThe default constraints for the discharge edge are the following:Capacity constraint\nStorage discharge limit constraint\nRamping limits constraint","category":"page"},{"location":"User Guide/assets/battery.html#Example","page":"Battery","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"The following is an example of the input file for a battery asset that creates three batteries, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"{\n    \"elec_stor\": [\n        {\n            \"type\": \"Battery\",\n            \"global_data\": {\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"BalanceConstraint\": true,\n                        \"StorageCapacityConstraint\": true,\n                        \"StorageSymmetricCapacityConstraint\": true,\n                        \"StorageMinDurationConstraint\": true,\n                        \"StorageMaxDurationConstraint\": true,\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"StorageDischargeLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"battery_SE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_MIDAT\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_NE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/mustrun.html#Must-Run","page":"Must Run","title":"Must Run","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html#Graph-structure","page":"Must Run","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"A MustRun asset is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"<img width=\"400\" src=\"../../images/vre.png\" />","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"A MustRun asset is very similar to a VRE asset, and is made of:","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"1 Transformation component, representing the MustRun transformation.\n1 Edge component:\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"User Guide/assets/mustrun.html#Attributes","page":"Must Run","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The structure of the input file for a MustRun asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/mustrun.html#Transformation","page":"Must Run","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"Attribute Asset Type Values Default Description\ntimedata All String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints All Dict{String,Bool} Any Macro constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.","category":"page"},{"location":"User Guide/assets/mustrun.html#Edges","page":"Must Run","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"Attribute Type Values Default Description\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges MustRunConstraint List of constraints applied to the edge. E.g. {\"MustRunConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_small_hydroelectric_1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool true Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"tip: Default constraint\nDefault constraint for the electricity edge of the MustRun asset is the Must run constraint.","category":"page"},{"location":"User Guide/assets/mustrun.html#Example","page":"Must Run","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The following input file example shows how to create a MustRun asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"{\n    \"mustrun\": [\n        {\n            \"type\": \"MustRun\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"unidirectional\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"existing_capacity\": 249.895,\n                            \"capacity_size\": 1.219,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"existing_capacity\": 263.268,\n                            \"capacity_size\": 1.236,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"existing_capacity\": 834.494,\n                            \"capacity_size\": 1.051,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"table_of_contents.html#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"table_of_contents.html#[Getting-Started](@ref)","page":"Table of contents","title":"Getting Started","text":"","category":"section"},{"location":"table_of_contents.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Getting Started/overview.md\",\n    \"Getting Started/installation.md\",\n    \"Getting Started/first_run.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents.html#[User-Guide](@ref)","page":"Table of contents","title":"User Guide","text":"","category":"section"},{"location":"table_of_contents.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"User Guide/sectors.md\",\n    \"User Guide/input_data.md\",\n    \"User Guide/assets/introduction.md\",\n    \"User Guide/constraints.md\",\n    \"User Guide/output.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents.html#[Modeler-Guide](@ref)","page":"Table of contents","title":"Modeler Guide","text":"","category":"section"},{"location":"table_of_contents.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Modeler Guide/build_sectors.md\",\n    \"Modeler Guide/create_example_case.md\"\n]\nDepth = 2","category":"page"},{"location":"table_of_contents.html#[Developer-Guide](@ref)","page":"Table of contents","title":"Developer Guide","text":"","category":"section"},{"location":"table_of_contents.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n    \"Developer Guide/type_hierarchy.md\",\n    \"References/assets.md\",\n    \"References/macro_objects.md\",\n    \"References/reading_input.md\",\n    \"References/utilities.md\",\n    \"References/writing_output.md\"\n]\nDepth = 2","category":"page"},{"location":"User Guide/assets/electricdac.html#Electric-DAC","page":"Electric DAC","title":"Electric DAC","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html#Graph-structure","page":"Electric DAC","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"An electric direct air capture (DAC) asset is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"<img width=\"400\" src=\"../../images/elecdac.png\" />","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"An electric DAC asset is made of:","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"1 Transformation component, representing the DAC process.\n3 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption.\n1 incoming CO2 Edge, representing the CO2 that is captured.\n1 outgoing CO2 Captured Edge, representing the CO2 that is captured.","category":"page"},{"location":"User Guide/assets/electricdac.html#Attributes","page":"Electric DAC","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"The structure of the input file for an electric DAC asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/electricdac.html#Transformation","page":"Electric DAC","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elect_CO2","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"tip: Default constraints\nThe default constraint for the transformation part of the ElectricDAC asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/electricdac.html#Flow-equations","page":"Electric DAC","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"note: ElectricDAC\nbeginaligned\nphi_elec = phi_co2_captured cdot epsilon_elec_consumption \nphi_co2 = phi_co2_captured \nendaligned","category":"page"},{"location":"User Guide/assets/electricdac.html#Edge","page":"Electric DAC","title":"Edge","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"Both the incoming and outgoing edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"tip: Default constraints\nThe only default constraint for the edges of the ElectricDAC asset is the Capacity constraint applied to the CO2 edge. ","category":"page"},{"location":"User Guide/assets/electricdac.html#Example","page":"Electric DAC","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"The following is an example of the input file for an ElectricDAC asset that creates three electric DAC units, each for a different region.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"ElectricDAC\": [\n        {\n            \"type\": \"ElectricDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        },\n                        \"integer_decisions\": false\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/vre.html#Variable-Renewable-Energy-resources-(VRE)","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"","category":"section"},{"location":"User Guide/assets/vre.html#Graph-structure","page":"Variable Renewable Energy resources (VRE)","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"A Variable Renewable Energy asset is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"<img width=\"400\" src=\"../../images/vre.png\" />","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"A Variable Renewable Energy asset is made of:","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"1 Transformation component, representing the VRE transformation.\n1 Edge component:\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"User Guide/assets/vre.html#Attributes","page":"Variable Renewable Energy resources (VRE)","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The structure of the input file for a VRE asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"edge\": {\n            // ... electricity edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/vre.html#Transformation","page":"Variable Renewable Energy resources (VRE)","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"Attribute Type Values Default Description\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.","category":"page"},{"location":"User Guide/assets/vre.html#Edges","page":"Variable Renewable Energy resources (VRE)","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge.\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges CapacityConstraint List of constraints applied to the edge. E.g. {\"MustRunConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_solar_photovoltaic_1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool true Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"tip: Default constraint\nDefault constraint for the electricity edge of the VRE is the Capacity constraint.","category":"page"},{"location":"User Guide/assets/vre.html#Example","page":"Variable Renewable Energy resources (VRE)","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The following input file example shows how to create four existing VRE assets (two utility-scale solar and two onshore wind facilities) and four new VRE assets (one offshore wind, one onshore wind, and two utility-scale solar facilities).","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"{\n    \"existing_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": true,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    }\n                },\n                \"storage\": {}\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_solar_SE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 22887,\n                            \"capacity_size\": 17.142,\n                            \"existing_capacity\": 8502.2,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_solar_photovoltaic_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"existing_solar_NE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 22887,\n                            \"capacity_size\": 3.63,\n                            \"existing_capacity\": 1629.6,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_solar_photovoltaic_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n\n                    \"id\": \"existing_wind_NE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 43000,\n                            \"capacity_size\": 86.17,\n                            \"existing_capacity\": 3654.5,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_onshore_wind_turbine_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"existing_wind_MIDAT\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 43000,\n                            \"capacity_size\": 161.2,\n                            \"existing_capacity\": 3231.6,\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_onshore_wind_turbine_1\"\n                                }\n                            }\n                        }\n                    },\n                }\n            ]\n        }\n    ],\n    \"new_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MaxCapacityConstraint\": true\n                        }\n                    }\n                },\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"NE_offshorewind_class10_moderate_floating_1_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 56095.98976,\n                            \"investment_cost\": 225783.4407,\n                            \"max_capacity\": 32928.493,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_offshorewind_class10_moderate_floating_1_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"SE_utilitypv_class1_moderate_70_0_2_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 15390.48615,\n                            \"investment_cost\": 49950.17548,\n                            \"max_capacity\": 1041244,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_utilitypv_class1_moderate_70_0_2_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"MIDAT_utilitypv_class1_moderate_70_0_2_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 15390.48615,\n                            \"investment_cost\": 51590.03227,\n                            \"max_capacity\": 26783,\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_utilitypv_class1_moderate_70_0_2_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"NE_landbasedwind_class4_moderate_70_3\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 34568.125,\n                            \"investment_cost\": 86536.01624,\n                            \"max_capacity\": 65324,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_landbasedwind_class4_moderate_70_3\"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling.html#Multisector-modelling-with-Macro","page":"Multisector Modelling","title":"Multisector modelling with Macro","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"In this tutorial, we extend the electricity-only model considered in Tutorial 2 to build a multisector model for joint capacity expansion in electricity and hydrogen sectors. ","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"To do this, we scorporate hydrogen and electricity demand from Tutorial 2, and endogeneously model hydrogen production and storage in Macro.","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Pkg; Pkg.add([\"VegaLite\", \"Plots\"])","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Macro\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing Plots\nusing VegaLite","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Create a new case folder named \"onezonemultisector\"","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"if !isdir(\"one_zone_multisector\")\n    mkdir(\"one_zone_multisector\")\n    cp(\"one_zone_electricity_only/assets\",\"one_zone_multisector/assets\", force=true)\n    cp(\"one_zone_electricity_only/settings\",\"one_zone_multisector/settings\", force=true)\n    cp(\"one_zone_electricity_only/system\",\"one_zone_multisector/system\", force=true)\n    cp(\"one_zone_electricity_only/system_data.json\",\"one_zone_multisector/system_data.json\", force=true)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note: If you have previously run Tutorial 2, make sure that file one_zone_multisector/system/nodes.json is restored to the original version with a textCO_2 price. The definition of the textCO_2 node should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            },\n            \"price_unmet_policy\":{\n                \"CO2CapConstraint\": 200\n            }    \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add Hydrogen to the list of modeled commodities, modifying file one_zone_multisector/system/commodities.json:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_macro_commodities = Dict(\"commodities\"=> [\"Electricity\", \"NaturalGas\", \"CO2\", \"Hydrogen\"])\n\nopen(\"one_zone_multisector/system/commodities.json\", \"w\") do io\n    JSON3.pretty(io, new_macro_commodities)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Update file one_zone_multisector/system/time_data.json accordingly:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_time_data = Dict(\"PeriodLength\"=>8760,\nnew_time_data = Dict(\"PeriodLength\"=>8760,\n                    \"HoursPerTimeStep\"=>Dict(\"Electricity\"=>1, \"NaturalGas\"=> 1, \"CO2\"=> 1, \"Hydrogen\"=>1),\n                    \"HoursPerSubperiod\"=>Dict(\"Electricity\"=>8760, \"NaturalGas\"=> 8760, \"CO2\"=> 8760, \"Hydrogen\"=>8760)\n                )\n\nopen(\"one_zone_multisector/system/time_data.json\", \"w\") do io\n    JSON3.pretty(io, new_time_data)\nend","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Move separate electricity and hydrogen demand timeseries into the system folder","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/electricity_demand.csv\",\"one_zone_multisector/system/demand.csv\";force=true)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/hydrogen_demand.csv\",\"one_zone_multisector/system/hydrogen_demand.csv\";force=true)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html#Exercise-1","page":"Multisector Modelling","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"using the existing electricity nodes in one_zone_multisector/system/nodes.json as template, add an Hydrogen demand node, linking it to the hydogen_demand.csv timeseries.","category":"page"},{"location":"Tutorials/2_multisector_modelling.html#Solution","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"The definition of the new Hydrogen node in one_zone_multisector/system/nodes.json should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"    {\n        \"type\": \"Hydrogen\",\n        \"global_data\": {\n            \"time_interval\": \"Hydrogen\",\n            \"constraints\": {\n                \"BalanceConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"h2_SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/hydrogen_demand.csv\",\n                        \"header\": \"Demand_H2_z1\"\n                    }\n                }\n            }\n        ]\n    },","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Next, add an electrolyzer asset represented in Macro as a transformation connecting electricity and hydrogen nodes:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: electrolyzer)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"To include the electrolyzer, create a file one_zone_multisector/assets/electrolyzer.json based on the asset definition in src/model/assets/electrolyzer.jl:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n   \"electrolyzer\": [\n        {   \n            \"type\": \"Electrolyzer\",\n            \"global_data\":{\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\":[\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\":{\n                        \"efficiency_rate\": 0.875111139 // units: # MWh of H2 / MWh of electricity\n                    },\n                    \"edges\":{\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\":0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Include an hydrogen storage resource cluster, represented in Macro as combination of a compressor transformation (consuming electricity to compress the gas) and a storage node:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: hydrogen_storage)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add a file one_zone_multisector/assets/h2_storage.json based on the asset definition in  src/model/assets/gasstorage.jlthat should look like this:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"compressor_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"compressor_gas_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\":{\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    },\n                    \"storage\":{\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\":28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/2_multisector_modelling.html#Exercise-2","page":"Multisector Modelling","title":"Exercise 2","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Following the same steps taken in Tutorial 2, load the input files, generate Macro model, and solve it using the open-source solver HiGHS.","category":"page"},{"location":"Tutorials/2_multisector_modelling.html#Solution-2","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"First, load the inputs:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"system = MacroEnergy.load_system(\"one_zone_multisector\");","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Then, generate the model:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"model = MacroEnergy.generate_model(system)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Finally, solve it using the HiGHS solver:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html#Exercise-3","page":"Multisector Modelling","title":"Exercise 3","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"As in Tutorial 2, print optimized capacity for each asset, the system total cost, and the total emissions. ","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"What do you observe?","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"To explain the results, plot both the electricity generation and hydrogen supply results as done in Tutorial 2 using VegaLite.jl.","category":"page"},{"location":"Tutorials/2_multisector_modelling.html#Solution-3","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Optimized capacities are retrieved as follows:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"capacity_results = MacroEnergy.get_optimal_asset_capacity(system)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total system cost is:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total textCO_2 emissions are:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note that we have achieved lower costs and emissions when able to co-optimize capacity and operation of electricity and hydrogen sectors. In the following, we further investigate these","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"plot_time_interval = 3600:3624","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Here is the electricity generation profile:","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"natgas_power =  MacroEnergy.value.(MacroEnergy.flow(system.assets[4].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[5].edge)).data[plot_time_interval]/1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[6].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: elec_generation)","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"During the day, when solar photovoltaic is available, almost all of the electricity generation comes from VREs.","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Because hydrogen storage is cheaper than batteries, we expect the system to use the electricity generated during the day to operate the electrolyzers to meet the hydrogen demand, storing the excess hydrogen to be used when solar photolvoltaics can not generate electricity.","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"We verify our assumption by making a stacked area plot of the hydrogen supply (hydrogen generation net of the hydrogen stored):","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"electrolyzer_idx = findfirst(isa.(system.assets,Electrolyzer).==1)\nh2stor_idx = findfirst(isa.(system.assets,GasStorage{Hydrogen}).==1)\n\nelectrolyzer_gen =  MacroEnergy.value.(MacroEnergy.flow(system.assets[electrolyzer_idx].h2_edge)).data[plot_time_interval]/1e3;\nh2stor_charge =  MacroEnergy.value.(MacroEnergy.flow(system.assets[h2stor_idx].charge_edge)).data[plot_time_interval]/1e3;\nh2stor_discharge = MacroEnergy.value.(MacroEnergy.flow(system.assets[h2stor_idx].discharge_edge)).data[plot_time_interval]/1e3;\n\nh2_gen = DataFrame( hours = plot_time_interval, \n                    electrolyzer = electrolyzer_gen - h2stor_charge,\n                    storage =  h2stor_discharge)\n\nstack_h2_gen = stack(h2_gen, [:electrolyzer, :storage], variable_name=:resource, value_name=:supply);\n\nh2plot = stack_h2_gen |> \n    @vlplot(\n        :area,\n        x={:hours, title=\"Hours\"},\n        y={:supply, title=\"Hydrogen supply (GWh)\",stack=:zero},\n        color={\"resource:n\", scale={scheme=:category20}},\n        width=400,\n        height=300\n    )","category":"page"},{"location":"Tutorials/2_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: h2_generation)","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Thermal-Hydrogen-Plant-(with-and-without-CCS)","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html#Graph-structure","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant (with and without CCS) is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"<img width=\"400\" src=\"../../images/smr.png\" />","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant (with and without CCS) is made of:","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"1 Transformation component, representing the thermal hydrogen plant (with and without CCS).\n5 Edge components:\n1 incoming Fuel Edge, representing the fuel supply. \n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production. This edge can have unit commitment operations.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured (only if CCS is present).","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Attributes","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The structure of the input file for a ThermalHydrogen asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Transformation","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elecMWh_h2\nfuel_consumption epsilon_fuel_consumption Float64 Float64 1.0 MWh_fuelMWh_h2\nemission_rate epsilon_emission_rate Float64 Float64 0.0 t_CO2MWh_fuel\ncapture_rate epsilon_co2_capture_rate Float64 Float64 0.0 t_CO2MWh_fuel","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"tip: Default constraints\nThe default constraint for the transformation part of the ThermalHydrogen asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Flow-equations","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: ThermalHydrogen\nNote: Fuel is the type of the fuel being converted.beginaligned\nphi_fuel = phi_h2 cdot epsilon_fuel_consumption \nphi_elec = phi_h2 cdot epsilon_elec_consumption \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Edges","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: Unit commitment and default constraints\nThe Hydrogen edge can have unit commitment operations. To enable it, the user needs to set the uc attribute to true. The default constraints for unit commitment case are the following:Capacity constraint\nRamping limits constraint\nMinimum up and down time constraintIn case of no unit commitment, the uc attribute is set to false and the default constraints are the following:Capacity constraint","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"warning: Asset expansion\nAs a modeling decision, only the Hydrogen and Fuel edges are allowed to expand. Therefore, both the has_capacity and constraints attributes can only be set for those edges. For all the other edges, these attributes are pre-set to false and to an empty list respectively to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"warning: Directionality\nThe unidirectional attribute is set to true for all the edges.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Hydrogen\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges See note above List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_ATR_wCCS\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Hydrogen and Fuel edges).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nmin_down_time Int64 Int64 0 Minimum amount of time the edge has to remain in the shutdown state before starting up again. Note: add the MinDownTimeConstraint to the constraints dictionary to activate this constraint.\nmin_up_time Int64 Int64 0 Minimum amount of time the edge has to remain in the committed state. Note: add the MinUpTimeConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nstartup_cost Float64 Float64 0.0 Cost per MW of capacity to start a generator (USD/MW per start).\nstartup_fuel Float64 Float64 0.0 Startup fuel use per MW of capacity (MWh/MW per start).\nuc Bool Bool false Whether the edge has unit commitment operations.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Example","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The following is an example of the input file for a ThermalHydrogenCCS asset that creates three ThermalHydrogenCCS assets, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"NaturalGasH2ATRCCS\": [\n        {\n            \"type\": \"ThermalHydrogenCCS\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"fuel_consumption\": 1.300184721664035,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"page"},{"location":"References/utilities.html#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"References/utilities.html","page":"Utilities","title":"Utilities","text":"MacroEnergy.get_value_and_keys\nMacroEnergy.set_value\nMacroEnergy.timestepbefore\nMacroEnergy.struct_info\nMacroEnergy.get_value","category":"page"},{"location":"References/utilities.html#MacroEnergy.get_value_and_keys","page":"Utilities","title":"MacroEnergy.get_value_and_keys","text":"get_value_and_keys(dict::AbstractDict, target_key::Symbol, keys=Symbol[])\n\nRecursively searches for a target key in a dictionary and returns a list of  tuples containing the value associated with the target key and the keys leading  to it. This function is used to replace the path to a timeseries file with the actual vector of data.\n\nArguments\n\ndict::AbstractDict: The (nested) dictionary to search in.\ntarget_key::Symbol: The key to search for.\nkeys=Symbol[]: (optional) The keys leading to the current dictionary.\n\nReturns\n\nvalue_keys: A list of tuples, where each tuple contains                - the value associated with the target key               - the keys leading to it in the nested dictionary.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value_and_keys(dict, :b) # returns [(1, [:a, :b]), (2, [:a, :c, :b])]\n\nWhere the first element of the tuple is the value of the key :b and the second  element is the list of keys to reach that value.\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#MacroEnergy.set_value","page":"Utilities","title":"MacroEnergy.set_value","text":"set_value(dict::AbstractDict, keys::Vector{Symbol}, new_value)\n\nSet the value of a nested dictionary given a list of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary to modify.\nkeys::Vector{Symbol}: A list of keys representing the path to the value to \n\nbe modified.\n\nnew_value: The new value to set.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nset_value(dict, [:a, :b], 3)\nget_value(dict, [:a, :b]) # returns 3\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#MacroEnergy.timestepbefore","page":"Utilities","title":"MacroEnergy.timestepbefore","text":"timestepbefore(t::Int, h::Int,subperiods::Vector{StepRange{Int64,Int64})\n\nDetermines the time step that is h steps before index t in subperiod p with circular indexing.\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#MacroEnergy.struct_info","page":"Utilities","title":"MacroEnergy.struct_info","text":"struct_info(t::Type{T}) where T\n\nReturn a vector of tuples with the field names and types of a struct.\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#MacroEnergy.get_value","page":"Utilities","title":"MacroEnergy.get_value","text":"get_value(dict::AbstractDict, keys::Vector{Symbol})\n\nGet the value from a dictionary based on a sequence of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary from which to retrieve the value.\nkeys::Vector{Symbol}: The sequence of keys to traverse the dictionary.\n\nReturns\n\nThe value retrieved from the dictionary based on the given keys.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value(dict, [:a, :b]) # returns 1\nget_value(dict, [:a, :c, :b]) # returns 2\n\n\n\n\n\n","category":"function"},{"location":"Tutorials/1_running_macro.html#Running-Macro","page":"Running Macro","title":"Running Macro","text":"","category":"section"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"In this tutorial, we start from a single zone electricity system with four resource clusters: utility scale solar PV, land-based wind power generation, natural gas combined cycle power plants, and electricity storage. ","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We consider three commodities: electricity, natural gas, and textCO_2. ","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Initially, hydrogen is modeled exogenously, adding a constant electricity demand for hydrogen production to the electricity demand time series. In other words, we assume the existance of an electrolyzer that continuously consumes electricity to meet the hydrogen demand.","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We model a greenfield scenario with a carbon price of 200 USD/ton, i.e., we allow textCO_2 emissions with a penalty cost.","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Note: We use the default units in Macro: MWh for energy vectors, metric tons for other commodities (e.g., textCO_2) and dollars for costs","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"using Pkg; Pkg.add(\"VegaLite\")","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"using Macro\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing VegaLite","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We first load the inputs:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"system = MacroEnergy.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We are now ready to generate the Macro capacity expansion model. Because Macro is designed to be solved by high performance decomposition algorithms, the model formulation has a specific block structure that can be exploited by these schemes. In the case of 3 operational sub-periods, the block structure looks like this:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"(Image: model_structure)","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"model = MacroEnergy.generate_model(system)","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Next, we set the optimizer. Note that we are using the open-source LP solver HiGHS, alternatives include the commerical solvers Gurobi, CPLEX, COPT.","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Finally, we solve the capacity expansion model:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"And extract the results:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"capacity_results = MacroEnergy.get_optimal_asset_capacity(system)","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"The total system cost (in dollars) is:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"and the total emissions (in metric tonnes) are:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We can also plot the electricity generation results using VegaLite.jl:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[2].elec_edge)).data[plot_time_interval] / 1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[3].edge)).data[plot_time_interval] / 1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[4].edge)).data[plot_time_interval] / 1e3;\n\nelec_gen = DataFrame(hours=plot_time_interval,\n    solar_photovoltaic=solar_power,\n    wind_turbine=wind_power,\n    natural_gas_fired_combined_cycle=natgas_power,\n)\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle, :wind_turbine, :solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |>\n           @vlplot(\n    :area,\n    x = {:hours, title = \"Hours\"},\n    y = {:generation, title = \"Electricity generation (GWh)\", stack = :zero},\n    color = {\"resource:n\", scale = {scheme = :category10}},\n    width = 400,\n    height = 300\n)","category":"page"},{"location":"Tutorials/1_running_macro.html#Exercise-1","page":"Running Macro","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Set a strict net-zero textCO_2 cap by removing the slack allowing constraint violation for a penalty. This can be done by deleting the field price_unmet_policy from the textCO_2 node in file one_zone_electricity_only/system/nodes.json","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Then, re-run the model with these new inputs and show the capacity results, total system cost, emissions, and plot the generation profiles.","category":"page"},{"location":"Tutorials/1_running_macro.html#Solution","page":"Running Macro","title":"Solution","text":"","category":"section"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Open file one_zone_electricity_only/system/nodes.json, go to the bottom of the file where the textCO_2 node is defined. Remove the lines related to the field price_unmet_policy, so that the node definition looks like this:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":" {\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            }   \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Then, you need to re-load the inputs:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"system = MacroEnergy.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"generate the Macro model:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"model = MacroEnergy.generate_model(system);","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"and solve it:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.set_optimizer(model, HiGHS.Optimizer);\nMacroEnergy.optimize!(model)","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We can check the results by printing the total system cost:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"MacroEnergy.objective_value(model)","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"and the new emissions (which should be zero):","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"co2_node = MacroEnergy.get_nodes_sametype(system.locations, CO2)[1]\nMacroEnergy.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Finally, we plot the generation results:","category":"page"},{"location":"Tutorials/1_running_macro.html","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power =  MacroEnergy.value.(MacroEnergy.flow(system.assets[2].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[3].edge)).data[plot_time_interval]/1e3;\nwind_power = MacroEnergy.value.(MacroEnergy.flow(system.assets[4].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"References/macro_objects.html#Macro-Objects","page":"Macro Objects","title":"Macro Objects","text":"","category":"section"},{"location":"References/macro_objects.html#Vertex","page":"Macro Objects","title":"Vertex","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"MacroEnergy.@AbstractVertexBaseAttributes","category":"page"},{"location":"References/macro_objects.html#MacroEnergy.@AbstractVertexBaseAttributes","page":"Macro Objects","title":"MacroEnergy.@AbstractVertexBaseAttributes","text":"@AbstractVertexBaseAttributes()\n\nA macro that defines the base attributes for all vertex types in the network model.\n\n# Generated Fields\n- id::Symbol: Unique identifier for the vertex\n- timedata::TimeData: Time-related data for the vertex\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the vertex\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the vertex\n\nThis macro is used to ensure consistent base attributes across all vertex types in the network.\n\n\n\n\n\n","category":"macro"},{"location":"References/macro_objects.html#Node","page":"Macro Objects","title":"Node","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"MacroEnergy.Node","category":"page"},{"location":"References/macro_objects.html#MacroEnergy.Node","page":"Macro Objects","title":"MacroEnergy.Node","text":"Node{T} <: AbstractVertex\n\nA mutable struct representing a node in a network, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the node\n- timedata::TimeData: Time-related data for the node\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Balance equations data\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the node\n- operation_expr::Dict: Operational JuMP expressions for the node\n\n# Fields\n- demand::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of demand values\n- max_nsd::Vector{Float64}: Maximum allowed non-served demand for each segment\n- max_supply::Vector{Float64}: Maximum supply for each segment\n- non_served_demand::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing unmet demand\n- policy_budgeting_vars::Dict: Policy budgeting variables for constraints\n- policy_slack_vars::Dict: Policy slack variables for constraints\n- price::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of prices\n- price_nsd::Vector{Float64}: Penalties for non-served demand by segment\n- price_supply::Vector{Float64}: Supply costs by segment\n- price_unmet_policy::Dict{DataType,Float64}: Mapping of policy types to penalty costs\n- rhs_policy::Dict{DataType,Float64}: Mapping of policy types to right-hand side values\n- supply_flow::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing supply flows\n\nNote: Base attributes are inherited from AbstractVertex via @AbstractVertexBaseAttributes macro.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#Transformation","page":"Macro Objects","title":"Transformation","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"MacroEnergy.Transformation","category":"page"},{"location":"References/macro_objects.html#MacroEnergy.Transformation","page":"Macro Objects","title":"MacroEnergy.Transformation","text":"Transformation <: AbstractVertex\n\nA mutable struct representing a transformation vertex in a network model, which models a conversion process between different commodities or energy forms.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the transformation\n- timedata::TimeData: Time-related data for the transformation\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping stoichiometric equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the transformation\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the transformation\n\nTransformations are used to model conversion processes between different commodities, such as power plants \nconverting fuel to electricity or electrolyzers converting electricity to hydrogen. The `balance_data` field \ntypically contains conversion efficiencies and other relationships between input and output flows.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#Storage","page":"Macro Objects","title":"Storage","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"MacroEnergy.Storage","category":"page"},{"location":"References/macro_objects.html#MacroEnergy.Storage","page":"Macro Objects","title":"MacroEnergy.Storage","text":"Storage{T} <: AbstractVertex\n\nA mutable struct representing a storage vertex in a network model, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the storage\n- timedata::TimeData: Time-related data for the storage\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the storage\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the storage\n\n# Fields\n- can_expand::Bool: Whether storage capacity can be expanded\n- can_retire::Bool: Whether storage capacity can be retired\n- capacity::AffExpr: Total available storage capacity\n- capacity_size::Float64: Size of each storage unit\n- charge_edge::Union{Nothing,AbstractEdge}: `Edge` representing charging flow\n- charge_discharge_ratio::Float64: Ratio between charging and discharging rates\n- discharge_edge::Union{Nothing,AbstractEdge}: `Edge` representing discharging flow\n- existing_capacity::Float64: Initial installed storage capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- investment_cost::Float64: Cost per unit of new storage capacity\n- loss_fraction::Float64: Fraction of stored commodity lost at each timestep\n- max_capacity::Float64: Maximum allowed storage capacity\n- max_duration::Float64: Maximum storage duration in hours\n- max_storage_level::Float64: Maximum storage level as fraction of capacity\n- min_capacity::Float64: Minimum required storage capacity\n- min_duration::Float64: Minimum storage duration in hours\n- min_outflow_fraction::Float64: Minimum discharge rate as fraction of capacity\n- min_storage_level::Float64: Minimum storage level as fraction of capacity\n- new_capacity::AffExpr: New storage capacity to be built\n- new_units::Union{Missing, JuMPVariable}: New storage units to be built\n- retired_capacity::AffExpr: Storage capacity to be retired\n- retired_units::Union{Missing, JuMPVariable}: Storage units to be retired\n- spillage_edge::Union{Nothing,AbstractEdge}: Edge representing spillage/losses (e.g. hydro reservoirs)\n- storage_level::Vector{VariableRef}: Storage level at each timestep\n\nStorage vertices represent facilities that can store commodities over time, such as batteries, \npumped hydro, or gas storage. They can charge (store) and discharge (release) commodities, \nsubject to capacity and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#Edge-(with-and-without-UC)","page":"Macro Objects","title":"Edge (with and without UC)","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"MacroEnergy.Edge\nMacroEnergy.EdgeWithUC","category":"page"},{"location":"References/macro_objects.html#MacroEnergy.Edge","page":"Macro Objects","title":"MacroEnergy.Edge","text":"Edge{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge in a network model, parameterized by commodity type T.\n\n# Fields\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity `T` through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: Cost per unit of new capacity\n- loss_fraction::Float64: Fraction of flow lost during transmission\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\nEdges represent connections between vertices that allow commodities to flow between them. \nThey can model physical infrastructure like pipelines, transmission lines, or logical \nconnections with associated costs, capacities, and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#MacroEnergy.EdgeWithUC","page":"Macro Objects","title":"MacroEnergy.EdgeWithUC","text":"EdgeWithUC{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge with unit commitment constraints in a network model, parameterized by commodity type T.\n\n# Inherited Attributes from Edge\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: Cost per unit of new capacity\n- loss_fraction::Float64: Fraction of flow lost during transmission\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\n# Fields specific to EdgeWithUC\n- min_down_time::Int64: Minimum time units that must elapse between shutting down and starting up\n- min_up_time::Int64: Minimum time units that must elapse between starting up and shutting down\n- startup_cost::Float64: Cost incurred when starting up the unit\n- startup_fuel::Float64: Amount of fuel consumed during startup\n- startup_fuel_balance_id::Symbol: Identifier for the balance constraint tracking startup fuel\n- ucommit::Union{JuMPVariable,Vector{Float64}}: Binary commitment state variables\n- ushut::Union{JuMPVariable,Vector{Float64}}: Binary shutdown decision variables\n- ustart::Union{JuMPVariable,Vector{Float64}}: Binary startup decision variables\n\nEdgeWithUC extends Edge to model units that have operational constraints related to their on/off status. It includes variables and parameters\nfor tracking unit commitment decisions and associated costs/constraints.\n\n\n\n\n\n","category":"type"},{"location":"User Guide/assets/gasstorage.html#Gas-Storage","page":"Gas Storage","title":"Gas Storage","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html#Graph-structure","page":"Gas Storage","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"A storage for a gas commodity is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"<img width=\"400\" src=\"../../images/gas_storage.png\" />","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"A gas storage asset is made of:","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"1 Storage component, representing the gas storage process. The gas type is set using the commodity attribute (see table below).\n1 Transformation component, representing the gas compressor.\n4 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption for powering the compressor.\n1 incoming Gas Edge, representing the gas flow into the storage asset through the compressor.\n1 internal Gas Edge, representing the gas flow between the compressor and the storage. This can be seen as a charge edge for the storage component.\n1 outgoing Gas Edge, representing the discharged edge of the gas storage.","category":"page"},{"location":"User Guide/assets/gasstorage.html#Attributes","page":"Gas Storage","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The structure of the input file for a gas storage asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"compressor_elec_edge\": {\n            // ... compressor_elec_edge-specific attributes ...\n        },\n        \"compressor_gas_edge\": {\n            // ... compressor_gas_edge-specific attributes ...\n        },\n        \"charge_edge\": {\n            // ... storage_gas_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_gas_edge-specific attributes ...\n        }\n    },\n    \"storage\":{\n        // ... storage-specific attributes ...\n    }\n}","category":"page"},{"location":"User Guide/assets/gasstorage.html#Transformation","page":"Gas Storage","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elecMWh_gas","category":"page"},{"location":"User Guide/assets/gasstorage.html#Flow-equations","page":"Gas Storage","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"note: GasStorage\nNote: c is the type of the commodity being stored. The following equation is related to the compressor.beginaligned\nphi_elec = phi_c cdot epsilon_elec_consumption \nendalignedLook also at the \"Efficiency\" tip below for more information on the efficiency of charging/discharging process.","category":"page"},{"location":"User Guide/assets/gasstorage.html#Edges","page":"Gas Storage","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_Above_ground_storage\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nefficiency Float64 Number in [0,1] 1.0 Efficiency of the charging/discharging process.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"tip: Efficiency\nThe efficiency of the charging/discharging process can be set in the charge_edge and discharge_edge parts of the input file. These parameters are used, for example, in the Balance constraint to balance the charge and discharge flows. ","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"tip: Default constraints\nThe only default constraint for the edges of the gas storage asset is the Capacity constraint applied to both the charge and discharge edges.","category":"page"},{"location":"User Guide/assets/gasstorage.html#Storage-component","page":"Gas Storage","title":"Storage component","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The definition of the Storage object can be found here MacroEnergy.Storage.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ncommodity String Any Macro commodity type Required Commodity being stored. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for storage BalanceConstraint, StorageCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity_storage Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost_storage Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost_storage Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nlong_duration Bool Bool false Whether the storage is a long-duration storage. Note: if true, the long-duration storage constraint will be applied.\nmax_capacity_storage Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_capacity_storage Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nstorage_loss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"tip: Default constraints\nAs noted in the above table, the default constraints for the storage component of the gas storage are the following:Balance constraint\nStorage capacity constraintIf the storage is a long-duration storage, the following additional constraints are applied:Long-duration storage constraints","category":"page"},{"location":"User Guide/assets/gasstorage.html#Example","page":"Gas Storage","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The following input file example shows how to create a hydrogen storage asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"compressor_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"compressor_gas_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_MIDAT\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                },\n                {\n                    \"id\": \"NE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Modeler Guide/overview.html#Modeler-Guide-Overview","page":"Overview","title":"Modeler Guide - Overview","text":"","category":"section"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"This section of the documentation is designed to provide an overview of the internal representation of Locations and Assets to help modelers create new sectors and assets. ","category":"page"},{"location":"Modeler Guide/overview.html#Multi-commodity-flow-network","page":"Overview","title":"Multi-commodity flow network","text":"","category":"section"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"As mentioned in the Getting Started section, Macro is designed to represent energy systems in a detailed manner, capturing interactions among various sectors and technologies.  The internal representation of the energy system is structured as a multi-commodity flow network, with each commodity having independent spatial and temporal scale:","category":"page"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"(Image: multi-commodity flow network)","category":"page"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"As an example, the figure above illustrates a multi-plex network representing an energy system with electricity, natural gas, hydrogen and CO2 sectors, with a natural gas power plant, an electrolyzer, a DAC module and an SMR with carbon capture. Orange nodes represent the demand nodes in the electricity sector, maroon nodes represent natural gas nodes, blue nodes represent hydrogen, grey nodes represent CO2 and purple nodes represent CO2 capture nodes. The edges depict commodity flow, and squares represent transformation points.","category":"page"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"As illustrated in the figure above, the core components of the model are:","category":"page"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"Vertices: Represent balance equations and can correspond to transformations (linking two or more commodity networks), storage systems, or demand nodes (outflows):\nTransformations: \nSpecial vertices that convert one commodity type into another, acting as bridges between sectors. \nThey represent conversion processes defined by a set of stoichiometric equations specifying transformation ratios.\nStorage: \nStores commodities for future use.\nThe flow of commodities into and out of storage systems is regulated by Storage balance equations.\nNodes:\nRepresent geographical locations or zones, each associated with a commodity type.\nThey can be of two types: demand nodes (outflows) or sources (inflows).\nDemand balance equations are used to balance the flow of commodities into and out of the node.\nThey form the network for a specific sector (e.g., electricity network, hydrogen network, etc.).\nEdges: \nDepict the flow of a commodity into or out of a vertex.\nCapacity sizing decisions, capex/opex, planning and operational constraints are associated with the edges.\nAssets: Defined as a collection of edges and vertices. See Macro Asset Library for a list of all the assets available in Macro.","category":"page"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"Macro includes a library of assets (see Macro Asset Library) and constraints (see Macro Constraint Library), enabling fast and flexible assembly of new technologies and sectors.","category":"page"},{"location":"Modeler Guide/overview.html","page":"Overview","title":"Overview","text":"In the following sections, we will describe how to create new sectors, assets as well as how to debug and test the new system.","category":"page"},{"location":"User Guide/assets/powerline.html#Power-Line","page":"Power Line","title":"Power Line","text":"","category":"section"},{"location":"User Guide/assets/powerline.html#Graph-structure","page":"Power Line","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"A power line is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"<img width=\"400\" src=\"../../images/powerline.png\" />","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"A power line asset is very simple and is made of:","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"1 Edge component:\n1 Electricity Edge, representing the flow of electricity between two nodes.","category":"page"},{"location":"User Guide/assets/powerline.html#Attributes","page":"Power Line","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"The structure of the input file for a power line asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"{\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/powerline.html#Edges","page":"Power Line","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity flowing through the edge.\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges CapacityConstraint List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ndistance Float64 Float64 0.0 Distance between the start and end vertex of the edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"tip: Default constraints\nThe default constraint for power lines is the Capacity constraint. ","category":"page"},{"location":"User Guide/assets/powerline.html#Example","page":"Power Line","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"The following is an example of the input file for a power line asset that creates two power lines, one connecting the SE and MIDAT regions, and one connecting the MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"{\n    \"line\": [\n        {\n            \"type\": \"PowerLine\",\n            \"global_data\": {\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"has_capacity\": true,\n                        \"unidirectional\": false,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MaxCapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_to_MIDAT\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"distance\": 491.4512001,\n                            \"existing_capacity\": 5552,\n                            \"max_capacity\": 33312,\n                            \"investment_cost\": 35910,\n                            \"loss_fraction\": 0.04914512\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_to_NE\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\",\n                            \"end_vertex\": \"elec_NE\",\n                            \"distance\": 473.6625536,\n                            \"existing_capacity\": 1915,\n                            \"max_capacity\": 11490,\n                            \"investment_cost\": 55639,\n                            \"loss_fraction\": 0.047366255\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/hydropower.html#Hydro-Reservoir","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html#Graph-structure","page":"Hydro Reservoir","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydroelectric reservoir is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"<img width=\"400\" src=\"../../images/hydrores.png\" />","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydroelectric reservoir asset is made of:","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"1 Electricity Storage component, representing the hydroelectric reservoir.\n3 Edge components:\n1 incoming Electricity Edge, representing the electricity supply.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing Electricity Edge, representing the spillage.","category":"page"},{"location":"User Guide/assets/hydropower.html#Flow-equation","page":"Hydro Reservoir","title":"Flow equation","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"In the following equation, phi is the flow of the commodity.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"note: HydroRes\nbeginaligned\nphi_in = phi_out + phi_spill \nendaligned","category":"page"},{"location":"User Guide/assets/hydropower.html#Attributes","page":"Hydro Reservoir","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The structure of the input file for a hydroelectric reservoir asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"inflow_edge\": {\n            // ... inflow_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        },\n        \"spillage_edge\": {\n            // ... spillage_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/hydropower.html#Storage-component","page":"Hydro Reservoir","title":"Storage component","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The definition of the Storage object can be found here MacroEnergy.Storage.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Attribute Type Values Default Description\ncommodity String Electricity Required Commodity being stored.\nconstraints Dict{String,Bool} Any Macro constraint type for storage BalanceConstraint, StorageCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity_storage Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost_storage Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost_storage Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nlong_duration Bool Bool false Whether the storage is a long-duration storage. Note: if true, the long-duration storage constraint will be applied.\nmax_capacity_storage Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_capacity_storage Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nstorage_loss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Default constraints\nThe default constraints for the storage component of the hydroelectric reservoir are the following:Balance constraintIf the storage is a long-duration storage, the following additional constraints are applied:Long-duration storage constraints","category":"page"},{"location":"User Guide/assets/hydropower.html#Edges-(discharge_edge,-inflow_edge,-spillage_edge)","page":"Hydro Reservoir","title":"Edges (discharge_edge, inflow_edge, spillage_edge)","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Asset expansion\nAs a modeling decision, the following conditions are implemented:Only charge and discharge edges are allowed to expand (i.e., they have the has_capacity attribute set to true). In contrast, this attribute is pre-set to false for the spillage_edge.\nThe can_retire and can_expand attributes of the inflow_edge are set to match those of the discharge_edge.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Directionality\nAll the three edges are unidirectional by construction.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Capacity parameters\nThe user only needs to specify capacity_size and existing_capacity for the discharge_edge, as the model will automatically apply the same values to the inflow_edge.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"All the edges have the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge.\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion. Note: only available for charge and discharge edges.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement. Note: only available for charge and discharge edges.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity. Note: discharge edge only. The model will automatically apply the same values to the inflow edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW. Note: discharge edge only. The model will automatically apply the same values to the inflow edge.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Default constraints\nDefault constraints for the edges of the hydroelectric reservoir are only applied to the inflow edge. These constraints are:Must run constraint\nStorage charge discharge ratio constraint","category":"page"},{"location":"User Guide/assets/hydropower.html#Example","page":"Hydro Reservoir","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The following input file example shows how to create a hydroelectric reservoir asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"hydrores\": [\n        {\n            \"type\": \"HydroRes\",\n            \"global_data\": {\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"inflow_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"start_vertex\": \"hydro_source\",\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    },\n                    \"spill_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"end_vertex\": \"hydro_source\",\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": false,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"MinStorageOutflowConstraint\": true,\n                        \"StorageChargeDischargeRatioConstraint\": true,\n                        \"BalanceConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"MIDAT_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"capacity_size\": 29.853,\n                            \"existing_capacity\": 2806.182,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.83,\n                            \"ramp_up_fraction\": 0.83,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.109311313,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                },\n                {\n                    \"id\": \"NE_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"capacity_size\": 24.13,\n                            \"existing_capacity\": 4729.48,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.083,\n                            \"ramp_up_fraction\": 0.083,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.095,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                },\n                {\n                    \"id\": \"SE_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 31.333,\n                            \"existing_capacity\": 11123.215,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.083,\n                            \"ramp_up_fraction\": 0.083,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.135129141,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/output.html#Macro-Output","page":"Output","title":"Macro Output","text":"","category":"section"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"Macro provides functionality to access and export optimization results. Results can be accessed in memory as DataFrames or written directly to files for further analysis.","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"Currently, Macro supports the following types of outputs:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"Capacity Results: final capacity, new capacity, retired capacity for each technology\nCosts: total, fixed, variable and total costs for the system\nFlow Results: flow for each commodity through each edge\nCombined Results: all results (capacity, costs, flows, non-served demand, storage level) in a single DataFrame","category":"page"},{"location":"User Guide/output.html#Quick-Start","page":"Output","title":"Quick Start","text":"","category":"section"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"To collect and save all results at once, users can use the collect_results and write_results functions:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"# Collect all results in memory and return a DataFrame\nresults = collect_results(system, model)\n\n# Or collect and write directly to file\nwrite_results(\"results.csv.gz\", system, model)","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"note: Output Format\nMacro supports the following output formats:CSV: comma-separated values\nCSV.GZ: compressed CSV\nParquet: column-based data storeThe output format is determined by the file extension attached to the filename. For example, to write the results to a Parquet file instead of a CSV file, use the following line:write_results(\"results.parquet\", system, model)","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"The function write_dataframe can be used to write a generic DataFrame to a file:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"results = collect_results(system, model)\nwrite_dataframe(\"results.csv\", results) # Write the dataframe to a CSV file\nwrite_dataframe(\"results.parquet\", results) # Write the dataframe to a Parquet file","category":"page"},{"location":"User Guide/output.html#Capacity-Results","page":"Output","title":"Capacity Results","text":"","category":"section"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"Results can be obtained either for the entire system or for specific assets using the get_optimal_capacity, get_optimal_new_capacity, and get_optimal_retired_capacity functions:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"# System-level results\ncapacity_results = get_optimal_capacity(system)\nnew_capacity_results = get_optimal_new_capacity(system)\nretired_capacity_results = get_optimal_retired_capacity(system)\n\n# Asset-level results\ncapacity_results = get_optimal_capacity(asset)\nnew_capacity_results = get_optimal_new_capacity(asset)\nretired_capacity_results = get_optimal_retired_capacity(asset)","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"As for the previous example, to write the results to a file, users can use the write_dataframe function:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"write_dataframe(\"capacity.csv\", capacity_results)\nwrite_dataframe(\"new_capacity.csv\", new_capacity_results)\nwrite_dataframe(\"retired_capacity.csv\", retired_capacity_results)","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"To facilitate this process, Macro provides the write_capacity_results function that writes all system-level capacity results directly to a file:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"write_capacity_results(\"capacity.csv\", system)","category":"page"},{"location":"User Guide/output.html#Costs","page":"Output","title":"Costs","text":"","category":"section"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"System-wide cost results can be obtained as DataFrames using the get_optimal_costs function:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"cost_results = get_optimal_costs(model)\nwrite_dataframe(\"costs.csv\", cost_results)","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"To write the costs results directly to a file, users can use the write_costs function:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"write_costs(\"costs.csv\", model)","category":"page"},{"location":"User Guide/output.html#Flow-Results","page":"Output","title":"Flow Results","text":"","category":"section"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"Flow results can be obtained either for the entire system or for specific assets using the get_optimal_flow function:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"# System-level results\nflow_results = get_optimal_flow(system)\n\n# Asset-level results\nflow_results = get_optimal_flow(asset)","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"To write system-level flow results directly to a file, users can use the write_flow_results function:","category":"page"},{"location":"User Guide/output.html","page":"Output","title":"Output","text":"write_flow_results(\"flows.csv\", system)","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Electrolyzer","page":"Electrolyzer","title":"Electrolyzer","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html#Graph-structure","page":"Electrolyzer","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"<img width=\"400\" src=\"../../images/electrolyzer.png\" />","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset is made of:","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"1 Transformation component, representing the electrolysis process.\n2 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production.","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Attributes","page":"Electrolyzer","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"The structure of the input file for an electrolyzer asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... co2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Transformation","page":"Electrolyzer","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_h2MWh_elec","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"tip: Default constraints\nThe default constraint for the transformation part of the electrolyzer asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Flow-equations","page":"Electrolyzer","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"note: Electrolyzer\nbeginaligned\nphi_h2 = phi_elec cdot epsilon_efficiency \nendaligned","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Edges","page":"Electrolyzer","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"Both the electricity and hydrogen edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_Electrolyzer\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"tip: Default constraints\nThe only default constraint for the edges of the electrolyzer asset is the Capacity constraint applied to the hydrogen edge. ","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Example","page":"Electrolyzer","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"The following is an example of the input file for an electrolyzer asset that creates three electrolyzers, each for each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"electrolyzer\": [\n        {\n            \"type\": \"Electrolyzer\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Macro-type-hierarchy","page":"Type hierarchy","title":"Macro type hierarchy","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"CurrentModule = MacroEnergy","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Commodities","page":"Type hierarchy","title":"Commodities","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"using MacroEnergy # hide\nusing AbstractTrees # hide\nusing InteractiveUtils # hide\nAbstractTrees.children(d::DataType) = subtypes(d) # hide\nprint_tree(Commodity)","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Assets","page":"Type hierarchy","title":"Assets","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"print_tree(AbstractAsset)","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Constraints","page":"Type hierarchy","title":"Constraints","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"print_tree(MacroEnergy.AbstractTypeConstraint)","category":"page"},{"location":"References/reading_input.html#Reading-input-functions","page":"Reading input functions","title":"Reading input functions","text":"","category":"section"},{"location":"References/reading_input.html","page":"Reading input functions","title":"Reading input functions","text":"MacroEnergy.prep_system_data\nMacroEnergy.load_default_system_data\nMacroEnergy.load_system_data\nMacroEnergy.load_json_inputs\nMacroEnergy.add_default_system_data!\nMacroEnergy.fetch_data\nMacroEnergy.eager_load_json_inputs\nMacroEnergy.clean_up_keys\nMacroEnergy.load_csv","category":"page"},{"location":"References/reading_input.html#MacroEnergy.prep_system_data","page":"Reading input functions","title":"MacroEnergy.prep_system_data","text":"prep_system_data(file_path::AbstractString, default_file_path::String)::Nothing\n\nThis attempts to load the system data from the file at file_path, adds any missing fields from the default system data, and writes the updated system data back to the file. In the future, we may change this to not write to the file, but for now, it's a quick way to ensure the system data is up-to-date.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.load_default_system_data","page":"Reading input functions","title":"MacroEnergy.load_default_system_data","text":"load_default_system_data(default_file_path::String)::Dict{Symbol,Any}\n\nLoad the default system data from a JSON file.  This describes the default locations for the system data files.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.load_system_data","page":"Reading input functions","title":"MacroEnergy.load_system_data","text":"load_system_data(file_path::AbstractString, rel_path::AbstractString; default_file_path::String = joinpath(@__DIR__, \"default_system_data.json\"), lazy_load::Bool = true)::Dict{Symbol,Any}\n\nLoad the system data (currently only from a JSON file) given a file path and directory to search for the file in. All other file names defined in the system data file are assumed to be relative to rel_path.\n\n\n\n\n\nload_system_data(system::System, file_path::AbstractString)::Dict{Symbol,Any}\n\nLoad the system data (currently only from a JSON file) given a file path and existing System. All other file names defined in the system data file are assumed to be relative to the data_dirpath field of the System.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.load_json_inputs","page":"Reading input functions","title":"MacroEnergy.load_json_inputs","text":"load_json_inputs(file_path::AbstractString; rel_path::AbstractString=dirname(file_path), lazy_load::Bool = true)::Dict{Symbol,Any}\n\nLoad JSON data from a file and return a Dict{Symbol,Any} object. The data can all be included in the \nspecified JSON file or distributed across multiple files and directories, with each source specified\nusing \"path\" or \"timeseries\" keys.\\n \nThe `rel_path` argument is used to specify the path relative to which the file paths of this distributed\ndata should be resolved.\\n\nIf `lazy_load` is set to `true`, then only the top-level data in the specified JSON file will be loaded. \nIf `lazy_load` is set to `false`, then the distrinuted data will be loaded recursively into the \nappropriate data structures.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.add_default_system_data!","page":"Reading input functions","title":"MacroEnergy.add_default_system_data!","text":"add_default_system_data!(system_data::AbstractDict{Symbol,Any}, default_file_path::String)::Nothing\n\nAdd the default system data to the system data dictionary. This adds any required fields that are missing.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.fetch_data","page":"Reading input functions","title":"MacroEnergy.fetch_data","text":"fetch_data(path::AbstractString, dict::AbstractDict{Symbol, Any}, root_path::AbstractString, lazy_load::Bool = true)::Any\n\nFetch data from a JSON file or directory and return it as a Dict{Symbol,Any} object.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.eager_load_json_inputs","page":"Reading input functions","title":"MacroEnergy.eager_load_json_inputs","text":"eager_load_json_inputs(json_data::AbstractDict{Symbol, Any}, rel_path::AbstractString)::AbstractDict{Symbol, Any}\n\nRecursively loads data from sources specified in an input Dict{Symbol,Any} and returns a new \nDict{Symbol,Any} object with the data inserted.\n\n\n\n\n\neager_load_json_inputs(json_data::AbstractVector{<:AbstractDict{Symbol,Any}}, rel_path::AbstractString)::AbstractVector{<:AbstractDict{Symbol,Any}}\n\nRecursively loads data from sources specified in several input Dict{Symbol,Any}, stored as a Vector, \nand returns a new Vector{Dict{Symbol,Any}} object with the data inserted.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.clean_up_keys","page":"Reading input functions","title":"MacroEnergy.clean_up_keys","text":"clean_up_keys(dict::AbstractDict{Symbol,Any})::AbstractDict{Symbol,Any}\n\nClean up a Dict{Symbol,Any} object by copying values from keys that match the key name.\n\n\n\n\n\n","category":"function"},{"location":"References/reading_input.html#MacroEnergy.load_csv","page":"Reading input functions","title":"MacroEnergy.load_csv","text":"load_time_series_data(file_path::AbstractString, header::AbstractVector{Symbol})::Dict{Symbol,Any}\n\nLoad time series data from one or more headers in a CSV file and return as a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"Tutorials/0_getting_started.html#Tutorial-0:-Getting-Started-with-Macro","page":"Getting Started","title":"Tutorial 0: Getting Started with Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"This tutorial will guide you through the steps to install Macro, a solver, and all the necessary dependencies.","category":"page"},{"location":"Tutorials/0_getting_started.html#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Before installing Macro, make sure you have the following requirements installed:","category":"page"},{"location":"Tutorials/0_getting_started.html#Requirements","page":"Getting Started","title":"Requirements","text":"","category":"section"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Julia: you can download it here. \nGit: you can download it here.\n(optional) Jupyter Notebook: you can install it using the following command:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"pip install notebook","category":"page"},{"location":"Tutorials/0_getting_started.html#Download-Macro","page":"Getting Started","title":"Download Macro","text":"","category":"section"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Since Macro is a public repository, you can simply clone it using:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"git clone https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"If you want to clone a specific branch, you can use:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"git clone -b <branch-name> https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Tutorials/0_getting_started.html#Installation-steps","page":"Getting Started","title":"Installation steps","text":"","category":"section"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Navigate to the repository:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"cd MacroEnergy.jl","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Install Macro and all the dependencies:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'","category":"page"},{"location":"Tutorials/0_getting_started.html#Setting-up-Jupyter-Notebook","page":"Getting Started","title":"Setting up Jupyter Notebook","text":"","category":"section"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Once Macro is installed, to enable Jupyter Notebook support, you can run the following command:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using IJulia; IJulia.installkernel(\"Macro\", \"--project=@.\")'","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Once the kernel is installed, you can run Jupyter Notebook with one of the following commands:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"jupyter lab","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"or ","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"jupyter notebook","category":"page"},{"location":"Tutorials/0_getting_started.html#Testing-the-installation","page":"Getting Started","title":"Testing the installation","text":"","category":"section"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"To test the installation, you can run the following command:","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"using MacroEnergy","category":"page"},{"location":"Tutorials/0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"in a Jupyter Notebook cell or in a Julia terminal. If everything is set up correctly, you should see no errors and the package should load without any issues.","category":"page"},{"location":"User Guide/assets/fuelcell.html#Fuel-Cell","page":"Fuel Cell","title":"Fuel Cell","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html#Graph-structure","page":"Fuel Cell","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"<img width=\"400\" src=\"../../images/fuelcell.png\" />","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell asset is made of:","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"1 Transformation component, representing the fuel cell process.\n2 Edge components:\n1 incoming Hydrogen Edge, representing the hydrogen supply.\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"User Guide/assets/fuelcell.html#Attributes","page":"Fuel Cell","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"The structure of the input file for a fuel cell asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/fuelcell.html#Transformation","page":"Fuel Cell","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_elecMWh_h2","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"tip: Default constraints\nThe default constraint for the transformation part of the fuel cell asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/fuelcell.html#Flow-equations","page":"Fuel Cell","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"note: Fuel Cell\nbeginaligned\nphi_elec = phi_h2 cdot epsilon_efficiency \nendaligned","category":"page"},{"location":"User Guide/assets/fuelcell.html#Edges","page":"Fuel Cell","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"Both the electricity and hydrogen edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Check box below List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"SE_FuelCell_H2\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"tip: Default constraints\nThe only default constraint for the edges of the fuel cell asset is the Capacity constraint applied to the electricity edge. ","category":"page"},{"location":"User Guide/assets/fuelcell.html#Example","page":"Fuel Cell","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"The following is an example of the input file for a fuel cell asset that creates three fuel cells, each for each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"fuelcell\": [\n        {\n            \"type\": \"FuelCell\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Getting Started/first_run.html#Running-Macro","page":"First Run","title":"Running Macro","text":"","category":"section"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"Once Macro is installed, the simplest way to get started is to run the example system provided in the ExampleSystems folder. It is a system with 3 zones in the eastern US, with the following sectors:","category":"page"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"Electricity\nNatural Gas\nCO2\nHydrogen\nBiomass\nUranium\nCarbon Capture","category":"page"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"tip: Macro Input Data Description\nThe section Macro Input Data in the User Guide provides a detailed description of all the input files present in the example folder.","category":"page"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"To run the example, navigate to the ExampleSystems/eastern_us_three_zones folder and execute the run.jl file present in the folder:","category":"page"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"cd ExampleSystems/eastern_us_three_zones\njulia --project=. run.jl","category":"page"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"This will use Macro to solve the example system and save the results in the results directory. By default, Macro writes three files: ","category":"page"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"capacity.csv: a csv file containing the capacity results for each asset (final, newly installed, and retired capacity for each technology).\ncosts.csv: a csv file containing fixed, variable and total costs for the energy system.\nflow.csv: a csv file containing the flow results for each commodity through each edge.","category":"page"},{"location":"Getting Started/first_run.html","page":"First Run","title":"First Run","text":"Congratulations, you just ran your first Macro model! 🎉","category":"page"},{"location":"User Guide/sectors.html#User-Guide","page":"Sectors","title":"User Guide","text":"","category":"section"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"Macro version 0.1.0","category":"page"},{"location":"User Guide/sectors.html#Introduction:-Energy-System-in-Macro","page":"Sectors","title":"Introduction: Energy System in Macro","text":"","category":"section"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"The Macro model is designed to represent the energy system in a detailed manner, with various sectors and technologies interacting. Each sector is characterized by a commodity, a type of energy carrier. The current model includes the following sectors:","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"Electricity\nNatural Gas\nCO2 and CO2 Capture\nHydrogen\nCoal\nBiomass\nUranium","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"As seen in the High-level Macro Design, the energy system is modeled as a multi-plex network — a multi-layered network that connects different sectors, and the key components that this network are:","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"Locations: Represent geographical locations, each associated with a commodity type.\nDemand and supply nodes: Represent the demand or supply of a commodity at a specific location.\nAssets: Defined as a collection of edges and vertices. See Macro Asset Library for a list of all the assets available in Macro.","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"In the following sections, we will see how to define the energy system in Macro using the different input files, then we will see what are the different assets and constraints available in Macro, and finally we will see how to run the model and analyze the results.","category":"page"},{"location":"Developer Guide/overview.html#Developer-Guide","page":"Overview","title":"Developer Guide","text":"","category":"section"},{"location":"Developer Guide/overview.html","page":"Overview","title":"Overview","text":"This section provides an overview of the package’s internal structure, development workflow, and best practices for contributing. Whether you’re fixing a bug, adding a new feature, or improving documentation, this guide will help you navigate the codebase efficiently.","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Natural-Gas-DAC","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html#Graph-structure","page":"Natural Gas DAC","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A natural gas DAC is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"<img width=\"400\" src=\"../../images/natgasdac.png\" />","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A natural gas DAC asset is made of:","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"1 Transformation component, representing the natural gas DAC process.\n5 Edge components:\n1 incoming NaturalGas Edge, representing the natural gas supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the natural gas DAC process.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Attributes","page":"Natural Gas DAC","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The structure of the input file for a natural gas DAC asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"ng_edge\": {\n            // ... ng_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Transformation","page":"Natural Gas DAC","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2MWh_ng\nelectricity_production epsilon_elec_prod Float64 Float64 0.0 MWh_elecMWh_ng\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2MWh_ng\nfuel_consumption epsilon_fuel_consumption Float64 Float64 0.0 MWh_ngt_CO2","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Default constraints\nThe default constraint for the transformation part of the natural gas DAC asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Flow-equations","page":"Natural Gas DAC","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"note: NaturalGasDAC\nbeginaligned\nphi_elec = phi_co2 cdot epsilon_elec_prod \nphi_ng = -phi_co2 cdot epsilon_fuel_consumption \nphi_co2 = phi_ng cdot epsilon_emission_rate \nphi_co2_captured + phi_co2 = phi_ng cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Edges","page":"Natural Gas DAC","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"warning: Asset expansion\nAs a modeling decision, only the incoming CO2 edge is allowed to expand. Therefore, the has_capacity attribute can only be set for this edge. For all the other edges, this attribute is pre-set to false to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"warning: Directionality\nThe unidirectional attribute is only available for the incoming CO2 edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"natgas_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Default constraints\nThe only default constraint for the edges of the natural gas DAC asset is the Capacity constraint applied to the incoming CO2 edge. ","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Example","page":"Natural Gas DAC","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The following input file example shows how to create a natural gas DAC asset in each of the three zones NE, SE and MIDAT.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"NaturalGasDAC\": [\n        {\n            \"type\": \"NaturalGasDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"ng_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/thermalpower.html#Thermal-Power-Plant-(with-and-without-CCS)","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html#Graph-structure","page":"Thermal Power Plant (with and without CCS)","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant (with and without CCS) is represented in Macro using the following graph structure:","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"<img width=\"400\" src=\"../../images/thermalpower.png\" />","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant (with and without CCS) is made of:","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"1 Transformation component, representing the thermal power plant (with and without CCS).\n4 Edge components:\n1 incoming Fuel Edge, representing the fuel supply. \n1 outgoing Electricity Edge, representing the electricity production. This edge can have unit commitment operations.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured (only if CCS is present).","category":"page"},{"location":"User Guide/assets/thermalpower.html#Attributes","page":"Thermal Power Plant (with and without CCS)","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The structure of the input file for a ThermalPower asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/thermalpower.html#Transformation","page":"Thermal Power Plant (with and without CCS)","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The definition of the transformation object can be found here MacroEnergy.Transformation.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any Macro constraint type for vertices BalanceConstraint List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nfuel_consumption epsilon_fuel_consumption Float64 Float64 1.0 MWh_fuelMWh_elec\nemission_rate epsilon_emission_rate Float64 Float64 0.0 t_CO2MWh_fuel\ncapture_rate epsilon_co2_capture_rate Float64 Float64 0.0 t_CO2MWh_fuel","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"tip: Default constraints\nThe default constraint for the transformation part of the thermal power asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/thermalpower.html#Flow-equations","page":"Thermal Power Plant (with and without CCS)","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: ThermalPower\nNote: Fuel is the type of the fuel being converted.beginaligned\nphi_fuel = phi_elec cdot epsilon_fuel_consumption \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"User Guide/assets/thermalpower.html#Edges","page":"Thermal Power Plant (with and without CCS)","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"warning: Asset expansion\nAs a modeling decision, only the Electricity and Fuel edges are allowed to expand. Therefore, both the has_capacity and constraints attributes can only be set for those edges. For all the other edges, these attributes are pre-set to false and to an empty list respectively to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"warning: Directionality\nThe unidirectional attribute is set to true for all the edges.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: Unit commitment and default constraints\nThe Electricity edge can have unit commitment operations. To enable it, the user needs to set the uc attribute to true. The default constraints for unit commitment case are the following:Capacity constraint\nRamping limits constraint\nMinimum up and down time constraintIn case of no unit commitment, the uc attribute is set to false and the default constraints are the following:Capacity constraint","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here MacroEnergy.Edge.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Attribute Type Values Default Description\ntype String Any Macro commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any Macro constraint type for Edges See note above List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"assets/availability.csv\", \"header\": \"MIDAT_natural_gas_fired_combined_cycle_1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Hydrogen and Fuel edges).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nmin_down_time Int64 Int64 0 Minimum amount of time the edge has to remain in the shutdown state before starting up again. Note: add the MinDownTimeConstraint to the constraints dictionary to activate this constraint.\nmin_up_time Int64 Int64 0 Minimum amount of time the edge has to remain in the committed state. Note: add the MinUpTimeConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nstartup_cost Float64 Float64 0.0 Cost per MW of capacity to start a generator (USD/MW per start).\nstartup_fuel Float64 Float64 0.0 Startup fuel use per MW of capacity (MWh/MW per start).\nuc Bool Bool false Whether the edge has unit commitment operations.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/thermalpower.html#Example","page":"Thermal Power Plant (with and without CCS)","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The following is an example of the input file for a ThermalPowerCCS asset that creates three ThermalPowerCCS assets, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"NaturalGasPowerCCS\": [\n        {\n            \"type\": \"ThermalPowerCCS\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"uc\": true,\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                },\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"fuel_consumption\": 2.09809579,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"investment_cost\": 150408.6558,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"fuel_consumption\": 2.09809579,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"investment_cost\": 158946.1077,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"fuel_consumption\": 2.09809579,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"investment_cost\": 173266.9946,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"References/writing_output.html#Output-functions","page":"Output functions","title":"Output functions","text":"","category":"section"},{"location":"References/writing_output.html#Collect-and-write-all-results","page":"Output functions","title":"Collect and write all results","text":"","category":"section"},{"location":"References/writing_output.html","page":"Output functions","title":"Output functions","text":"MacroEnergy.collect_results\nMacroEnergy.write_results\nMacroEnergy.write_dataframe","category":"page"},{"location":"References/writing_output.html#MacroEnergy.collect_results","page":"Output functions","title":"MacroEnergy.collect_results","text":"collect_results(system::System, model::Model, scaling::Float64=1.0)\n\nReturns a DataFrame with all the results after the optimization is performed. \n\nArguments\n\nsystem::System: The system object containing the case inputs.\nmodel::Model: The model being optimized.\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A `DataFrame containing all the outputs from a system.\n\nExample\n\ncollect_results(system, model)\n198534×12 DataFrame\n    Row │ case_name  commodity    commodity_subtype  zone        resource_id                component_id                       type              variable  segment  time   value\n        │ Missing    Symbol       Symbol             Symbol      Symbol                     Symbol                             Symbol            Symbol    Int64    Int64  Float64\n────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n      1 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      1  0.0\n      2 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      2  0.0\n      3 │   missing  Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      3  0.0\n      ...\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#MacroEnergy.write_results","page":"Output functions","title":"MacroEnergy.write_results","text":"write_results(file_path::AbstractString, system::System, model::Model)\n\nCollects all the results as a DataFrame and then writes them to disk after the optimization is performed. \n\nArguments\n\nfile_path::AbstractString: full path of the file to export. \nsystem::System: The system object containing the case inputs.\nmodel::Model: The model being optimized.\n\nReturns\n\nExample\n\nwrite_results(case_path * \"results.csv\", system, model) # CSV\nwrite_results(case_path * \"results.csv.gz\", system, model)  # GZIP\nwrite_results(case_path * \"results.parquet\", system, model) # PARQUET\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#MacroEnergy.write_dataframe","page":"Output functions","title":"MacroEnergy.write_dataframe","text":"write_dataframe(file_path::AbstractString, df::AbstractDataFrame)\n\nWrite a DataFrame to a file in the appropriate format based on file extension. Supported formats: .csv, .csv.gz, .parquet\n\nArguments\n\nfile_path::AbstractString: Path where to save the file\ndf::AbstractDataFrame: DataFrame to write\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#Write-capacity-results","page":"Output functions","title":"Write capacity results","text":"","category":"section"},{"location":"References/writing_output.html","page":"Output functions","title":"Output functions","text":"MacroEnergy.get_optimal_capacity\nMacroEnergy.get_optimal_new_capacity\nMacroEnergy.get_optimal_retired_capacity\nMacroEnergy.write_capacity_results","category":"page"},{"location":"References/writing_output.html#MacroEnergy.get_optimal_capacity","page":"Output functions","title":"MacroEnergy.get_optimal_capacity","text":"get_optimal_capacity(system::System)\n\nGet the optimal capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\n\nReturns\n\nDataFrame: A dataframe containing the optimal capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable  value    \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol    Float64 \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Electricity  capacity           elec_SE        existing_solar_SE                  existing_solar_SE_edge             VRE               capacity   8.5022\n   2 │ Electricity  capacity           elec_NE        existing_solar_NE                  existing_solar_NE_edge             VRE               capacity   0.0   \n   3 │ Electricity  capacity           elec_NE        existing_wind_NE                   existing_wind_NE_edge              VRE               capacity   3.6545\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#MacroEnergy.get_optimal_new_capacity","page":"Output functions","title":"MacroEnergy.get_optimal_new_capacity","text":"get_optimal_new_capacity(system::System)\n\nGet the optimal new capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\n\nReturns\n\nDataFrame: A dataframe containing the optimal new capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_new_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable      value  \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol        Float64\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Biomass      capacity           bioherb_SE     SE_BECCS_Electricity_Herb          SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  new_capacity      0.0\n   2 │ Biomass      capacity           bioherb_MIDAT  MIDAT_BECCS_Electricity_Herb       MIDAT_BECCS_Electricity_Herb_bio…  BECCSElectricity  new_capacity      0.0\n   3 │ Biomass      capacity           bioherb_NE     NE_BECCS_Electricity_Herb          NE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  new_capacity      0.0\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#MacroEnergy.get_optimal_retired_capacity","page":"Output functions","title":"MacroEnergy.get_optimal_retired_capacity","text":"get_optimal_retired_capacity(system::System)\n\nGet the optimal retired capacity values for all assets/edges in a system.\n\nArguments\n\nsystem::System: The system containing the assets/edges to analyze\n\nReturns\n\nDataFrame: A dataframe containing the optimal retired capacity values for all assets/edges, with missing columns removed\n\nExample\n\nget_optimal_retired_capacity(system)\n153×8 DataFrame\n Row │ commodity    commodity_subtype  zone           resource_id                        component_id                       type              variable      value    \n     │ Symbol       Symbol             Symbol         Symbol                             Symbol                             Symbol            Symbol        Float64  \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Biomass      capacity           bioherb_SE     SE_BECCS_Electricity_Herb          SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  retired_capacity  0.0\n   2 │ Biomass      capacity           bioherb_MIDAT  MIDAT_BECCS_Electricity_Herb       MIDAT_BECCS_Electricity_Herb_bio…  BECCSElectricity  retired_capacity  0.0\n   3 │ Biomass      capacity           bioherb_NE     NE_BECCS_Electricity_Herb          NE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  retired_capacity  0.0\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#MacroEnergy.write_capacity_results","page":"Output functions","title":"MacroEnergy.write_capacity_results","text":"write_capacity_results(file_path::AbstractString, system::System)\n\nWrite the optimal capacity results for all assets/edges in a system to a file.  The extension of the file determines the format of the file. Capacity, NewCapacity, and RetiredCapacity are first concatenated and then written to the file.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the assets/edges to analyze\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\nExample\n\nwrite_capacity_results(joinpath(results_dir, \"all_capacity.csv\"), system)\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#Write-costs-results","page":"Output functions","title":"Write costs results","text":"","category":"section"},{"location":"References/writing_output.html","page":"Output functions","title":"Output functions","text":"MacroEnergy.get_optimal_costs\nMacroEnergy.write_costs","category":"page"},{"location":"References/writing_output.html#MacroEnergy.get_optimal_costs","page":"Output functions","title":"MacroEnergy.get_optimal_costs","text":"get_optimal_costs(model::Model)\n\nGet the total, fixed, and variable costs for the system.\n\nArguments\n\nmodel::Model: The optimal model after the optimization\n\nReturns\n\nDataFrame: A dataframe containing the total, fixed, and variable costs for the system, with missing columns removed\n\nExample\n\nget_optimal_costs(model)\n3×8 DataFrame\n Row │ commodity  commodity_subtype  zone    resource_id  component_id  type    variable      value   \n     │ Symbol     Symbol             Symbol  Symbol       Symbol        Symbol  Symbol        Float64 \n─────┼───────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ all        cost               all     all          all           Cost    FixedCost     22471.1\n   2 │ all        cost               all     all          all           Cost    VariableCost  14316.2\n   3 │ all        cost               all     all          all           Cost    TotalCost     36787.3\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#MacroEnergy.write_costs","page":"Output functions","title":"MacroEnergy.write_costs","text":"write_costs(file_path::AbstractString, system::System)\n\nWrite the optimal costs for the system to a file. The extension of the file determines the format of the file.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the assets/edges to analyze\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#Write-flow-results","page":"Output functions","title":"Write flow results","text":"","category":"section"},{"location":"References/writing_output.html","page":"Output functions","title":"Output functions","text":"MacroEnergy.get_optimal_flow\nMacroEnergy.write_flow_results","category":"page"},{"location":"References/writing_output.html#MacroEnergy.get_optimal_flow","page":"Output functions","title":"MacroEnergy.get_optimal_flow","text":"get_optimal_flow(system::System, scaling::Float64=1.0)\n\nGet the optimal flow values for all edges in a system.\n\nArguments\n\nsystem::System: The system containing the all edges to output\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for all edges, with missing columns removed\n\nExample\n\nget_optimal_flow(system)\n186984×11 DataFrame\n    Row │ commodity    commodity_subtype  zone        resource_id                component_id                       type              variable  segment  time   value     \n        │ Symbol       Symbol             Symbol      Symbol                     Symbol                             Symbol            Symbol    Int64    Int64  Float64\n────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n      1 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      1  0.0    \n      2 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      2  0.0    \n      3 │ Biomass      flow               bioherb_SE  SE_BECCS_Electricity_Herb  SE_BECCS_Electricity_Herb_biomas…  BECCSElectricity  flow            1      3  0.0    \n      ...\n\n\n\n\n\nget_optimal_flow(asset::AbstractAsset, scaling::Float64=1.0)\n\nGet the optimal flow values for all edges in an asset.\n\nArguments\n\nasset::AbstractAsset: The asset containing the edges to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for all edges, with missing columns removed\n\nExample\n\nasset = get_asset_by_id(system, :elec_SE)\nget_optimal_flow(asset)\n\n\n\n\n\nget_optimal_flow(edge::AbstractEdge, scaling::Float64=1.0)\n\nGet the optimal flow values for an edge.\n\nArguments\n\nedge::AbstractEdge: The edge to analyze\nscaling::Float64: The scaling factor for the results.\n\nReturns\n\nDataFrame: A dataframe containing the optimal flow values for the edge, with missing columns removed\n\nExample\n\nasset = get_asset_by_id(system, :elec_SE)\nelec_edge = asset.elec_edge\nget_optimal_flow(elec_edge)\n\n\n\n\n\n","category":"function"},{"location":"References/writing_output.html#MacroEnergy.write_flow_results","page":"Output functions","title":"MacroEnergy.write_flow_results","text":"write_flow_results(file_path::AbstractString, system::System)\n\nWrite the optimal flow results for the system to a file. The extension of the file determines the format of the file.\n\nArguments\n\nfile_path::AbstractString: The path to the file where the results will be written\nsystem::System: The system containing the edges to analyze\n\nReturns\n\nnothing: The function returns nothing, but writes the results to the file\n\n\n\n\n\n","category":"function"},{"location":"References/assets.html#Macro-Asset-Library-Reference","page":"Asset Library","title":"Macro Asset Library Reference","text":"","category":"section"},{"location":"References/assets.html#VRE-(make-function)","page":"Asset Library","title":"VRE (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [MacroEnergy]\nPages = [\"vre.jl\"]","category":"page"},{"location":"References/assets.html#MacroEnergy.make-Tuple{Type{<:VRE}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Asset Library","title":"MacroEnergy.make","text":"make(::Type{<:VRE}, data::AbstractDict{Symbol, Any}, system::System) -> VRE\n\nVRE is an alias for Union{SolarPV, WindTurbine}\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n- edges: Dict{Symbol, Any}\n    - edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#Battery-(make-function)","page":"Asset Library","title":"Battery (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [MacroEnergy]\nPages = [\"battery.jl\"]","category":"page"},{"location":"References/assets.html#MacroEnergy.make-Tuple{Type{Battery}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Asset Library","title":"MacroEnergy.make","text":"make(::Type{Battery}, data::AbstractDict{Symbol, Any}, system::System) -> Battery\n\nNecessary data fields:\n - storage: Dict{Symbol, Any}\n    - id: String\n    - commodity: String\n    - can_retire: Bool\n    - can_expand: Bool\n    - existing_capacity: Float64\n    - investment_cost: Float64\n    - fixed_om_cost: Float64\n    - loss_fraction: Float64\n    - min_duration: Float64\n    - max_duration: Float64\n    - min_storage_level: Float64\n    - min_capacity: Float64\n    - max_capacity: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n - edges: Dict{Symbol, Any}\n    - charge_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - efficiency: Float64\n    - discharge_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - efficiency\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#Electrolyzer-(make-function)","page":"Asset Library","title":"Electrolyzer (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [MacroEnergy]\nPages = [\"electrolyzer.jl\"]","category":"page"},{"location":"References/assets.html#MacroEnergy.make-Tuple{Type{Electrolyzer}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Asset Library","title":"MacroEnergy.make","text":"make(::Type{Electrolyzer}, data::AbstractDict{Symbol, Any}, system::System) -> Electrolyzer\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - e_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#ThermalHydrogen-(make-function)","page":"Asset Library","title":"ThermalHydrogen (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [MacroEnergy]\nPages = [\"thermalhydrogen.jl\"]","category":"page"},{"location":"References/assets.html#MacroEnergy.make-Tuple{Type{ThermalHydrogen}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Asset Library","title":"MacroEnergy.make","text":"make(::Type{ThermalHydrogen}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogen\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#ThermalHydrogenCCS-(make-function)","page":"Asset Library","title":"ThermalHydrogenCCS (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [MacroEnergy]\nPages = [\"thermalhydrogenccs.jl\"]","category":"page"},{"location":"References/assets.html#MacroEnergy.make-Tuple{Type{ThermalHydrogenCCS}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Asset Library","title":"MacroEnergy.make","text":"make(::Type{ThermalHydrogenCCS}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogenCCS\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_captured_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#FuelCell-(make-function)","page":"Asset Library","title":"FuelCell (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [MacroEnergy]\nPages = [\"fuelcell.jl\"]","category":"page"},{"location":"References/assets.html#MacroEnergy.make-Tuple{Type{FuelCell}, AbstractDict{Symbol, Any}, MacroEnergy.System}","page":"Asset Library","title":"MacroEnergy.make","text":"make(::Type{FuelCell}, data::AbstractDict{Symbol, Any}, system::System) -> FuelCell\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - e_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"Getting Started/installation.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Getting Started/installation.html#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Julia 1.9 or later\nGit (to clone the repository)","category":"page"},{"location":"Getting Started/installation.html#Installation-steps","page":"Installation","title":"Installation steps","text":"","category":"section"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"To install Macro, we recommend following these steps:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Clone the Macro repository:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"git clone https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"note: Cloning a specific branch\nIf you want to clone a specific branch, you can use the -b flag:git clone -b <branch_name> https://github.com/macroenergy/MacroEnergy.jl.git","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Navigate to the cloned repository:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"cd MacroEnergy.jl","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Install Macro and all its dependencies:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Test the installation:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Start Julia with the project environment in a terminal:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"$ julia --project","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Load Macro in the Julia REPL:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"using MacroEnergy","category":"page"},{"location":"Getting Started/installation.html#Editing-the-installation","page":"Installation","title":"Editing the installation","text":"","category":"section"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"If the user wants to edit the installation, for example, to install a specific version of a dependency, they can do so by following the steps below:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Run a Julia session with the Macro project environment activated:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"$ cd MacroEnergy.jl\n$ julia --project","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Alternatively, you can first run Julia:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"$ cd MacroEnergy.jl\n$ julia","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Then, enter the Pkg mode by pressing ], and activate the project environment:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"] activate .","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Use the Pkg mode to install or update a dependency:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"] rm <dependency_name>\n] add <dependency_name>@<version>","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"For instance, to install the JuMP package version v1.22.2, you can use the following commands:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"] rm JuMP\n] add JuMP@v1.22.2","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"note: Activating the project environment\nWhen working with the Macro package, always remember to activate the project environment before running any commands. This ensures that the correct dependencies are used and that the project is in the correct state. To activate the project environment, you can use the following commands:cd MacroEnergy.jl\njulia --projectorcd MacroEnergy.jl\njulia\n] activate .","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = MacroEnergy","category":"page"},{"location":"index.html#Macro","page":"Introduction","title":"Macro","text":"","category":"section"},{"location":"index.html#Welcome-to-the-[Macro](https://github.com/macroenergy/MacroEnergy.jl.git)-documentation!","page":"Introduction","title":"Welcome to the Macro documentation!","text":"","category":"section"},{"location":"index.html#What-is-Macro?","page":"Introduction","title":"What is Macro?","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Macro is a bottom-up, electricity-centric, macro-energy systems optimization model. It is designed to capture capacity investments, operations, and energy flows across and between multiple energy sectors and can therefore be used to explore the impacts of different energy policies, technology costs, and other exogenous factors on the energy system. ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The main features of Macro include:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Tailored Benders decomposition framework for optimization.\nGraph-based representation of the energy system, including demand nodes, edges, storage units, and transformation nodes (representing conversion processes between sectors).\n\"Plug and play\" flexibility for integrating various technologies and sectors (e.g., electricity, hydrogen, heat, and transport).\nGranular spatial and temporal resolution to accurately capture sector dynamics.\nDesigned for distributed computing to enable large-scale optimizations.\nOpen-source built using Julia and JuMP.","category":"page"},{"location":"index.html#Macro-development-strategy","page":"Introduction","title":"Macro development strategy","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Macro has been designed and developed with three layers of abstractions in mind, each serving a different type of user:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"(Image: Macro architecture)","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The following sections of the documentation are designed to serve the different needs of the different users.","category":"page"},{"location":"index.html#Package-Outline","page":"Introduction","title":"Package Outline","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Getting Started\nUser Guide\nModeler Guide\nDeveloper Guide","category":"page"},{"location":"index.html#[Table-of-contents](@ref)","page":"Introduction","title":"Table of contents","text":"","category":"section"},{"location":"Getting Started/overview.html#Getting-Started","page":"Overview","title":"Getting Started","text":"","category":"section"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Macro version 0.1.0","category":"page"},{"location":"Getting Started/overview.html#High-level-Macro-Design","page":"Overview","title":"High-level Macro Design","text":"","category":"section"},{"location":"Getting Started/overview.html#Multi-commodity-flow-network","page":"Overview","title":"Multi-commodity flow network","text":"","category":"section"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Macro is designed to represent energy systems in a detailed manner, capturing interactions among various sectors and technologies. At high level, the model is structured as a multi-commodity flow network, with each commodity having independent spatial and temporal scale. The three main components of the model are:","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Locations\nAssets","category":"page"},{"location":"Getting Started/overview.html#Energy-system-components","page":"Overview","title":"Energy system components","text":"","category":"section"},{"location":"Getting Started/overview.html#1.-Locations","page":"Overview","title":"1. Locations","text":"","category":"section"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"They represent geographical locations, containing the demand or supply (node) for different commodities. In the current version of Macro, each location can only contain a single node per commodity type.  Adding locations to a system is straightforward, the user only needs to specify a list of names in the locations.json input file. For example:","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"\"locations\": [\n    \"SE\",\n    \"MIDAT\",\n    \"NE\"\n]","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Users can add nodes of different commodity types to a location using the nodes.json input file. This file also contains the parameters specifying the time series of the commodity demand/supply at each node, price for non-served demand, commodity type and location. Please refer to the Macro Input Data section for more details.","category":"page"},{"location":"Getting Started/overview.html#2.-Assets","page":"Overview","title":"2. Assets","text":"","category":"section"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Assets in Macro represent generic technologies at a specific location that transforms, transports or stores one or more commodities. Macro has a rich library of assets already modelled, including power lines, pipelines, power plants, electrolyzers, vres, etc.  Each asset is characterized by a set of parameters, including the list of commodities they take as input and output, as well as all the technical and economic parameters that characterize the technology and regulate the conversion processes.","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"note: Note\nPipelines and power lines connecting locations are also considered assets as they can transport, store and transform/compress commodities.","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Examples of assets are (see Macro Asset Library for a list of all the assets available in Macro):","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Pipelines or power lines\nPower plants (e.g. natural gas/coal/nuclear power plants with and without carbon capture)\nBatteries and hydrogen storage\nHydroelectric reservoirs\nVariable renewable energy sources (e.g. wind turbines, solar panels)\nElectrolyzers\nSMRs\nPumped hydro storage\nBiorefineries","category":"page"},{"location":"Modeler Guide/create_example_case.html#How-to-create-an-example-case-to-test-the-new-sectors-and-assets","page":"How to create an example case","title":"How to create an example case to test the new sectors and assets","text":"","category":"section"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"Once new sectors and assets have been created in the model, you may want to test them by creating a new example case. This section explains how to achieve this.","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"The best way to create a new example case is to include the new sectors and assets in an existing example case. They can be found in the ExampleSystems folder in the Macro repository.","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"An example case is a folder that contains all the necessary data files to run the model. The case folder should have the following structure:","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"MyCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml\n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── fuel_prices.csv\n│   └── demand.csv\n│ \n├── 📁 assets\n│   ├── MyAsset1.json\n│   ├── MyAsset2.json\n| [...other asset types...]\n│   └── availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"When adding a new sector, you need to make sure that: ","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"The new sector is included in the commodities.json file.\nThe new sector is included in the time_data.json file, with the corresponding HoursPerTimeStep and HoursPerSubperiod values.\nNodes corresponding to the new sector are included in the nodes.json file.\nThe demand corresponding to the new sector and for each node is included in the demand.csv file.\nA new JSON file is created with the data for the new assets.\nAvailability.csv and fuel_prices.csv files are updated with the availability and fuel prices for the new assets (if applicable).","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"warning: Warning\nMake sure that the values of the type keys in the JSON files match the names of the new sector and assets (julia abstract type and struct names respectively) created in the model. The same applies to the keys in the commodities.json and time_data.json files.","category":"page"}]
}
