var documenterSearchIndex = {"docs":
[{"location":"User Guide/constraints.html#MACRO-Constraint-Library","page":"Constraints","title":"MACRO Constraint Library","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Currently, Macro includes the following constraints:","category":"page"},{"location":"User Guide/constraints.html#Balance-constraint","page":"Constraints","title":"Balance constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::BalanceConstraint, v::Macro.AbstractVertex, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{BalanceConstraint, Macro.AbstractVertex, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::BalanceConstraint, v::AbstractVertex, model::Model)\n\nAdd a balance constraint to the vertex v. \n\nIf v is a Node, a demand balance constraint is added. \nIf v is a Transformation, this constraint ensures that the stoichiometric equations linking the input and output flows are correctly balanced.\n\nbeginaligned\n    sum_substacki  in  textbalance_eqs_ids(v)  t  in  texttime_interval(v)  textbalance_eq(v i t) = 00\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Capacity-constraint","page":"Constraints","title":"Capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::CapacityConstraint, e::Macro.Edge, model::Macro.Model)\nMacro.add_model_constraint!(ct::CapacityConstraint, e::Macro.EdgeWithUC, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{CapacityConstraint, Edge, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::Edge, model::Model)\n\nAdd a capacity constraint to the edge e. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in [-1, 1]. The function availability returns the time series of the capacity factor of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{CapacityConstraint, EdgeWithUC, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::CapacityConstraint, e::EdgeWithUC, model::Model)\n\nAdd a capacity constraint to the edge e with unit commitment. If the edge is unidirectional, the functional form of the constraint is:\n\nbeginaligned\n    sum_t in texttime_interval(e) textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nIf the edge is bidirectional, the constraint is:\n\nbeginaligned\n    i times textflow(e t) leq textavailability(e t) times textcapacity(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e and each i in [-1, 1]. The function availability returns the time series of the availability of the edge at time t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#CO2-capture-constraint","page":"Constraints","title":"CO2 capture constraint","text":"","category":"section"},{"location":"User Guide/constraints.html#Maximum-capacity-constraint","page":"Constraints","title":"Maximum capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MaxCapacityConstraint, e::Edge, model::Macro.Model)\nMacro.add_model_constraint!(ct::MaxCapacityConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MaxCapacityConstraint, Edge, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MaxCapacityConstraint, e::Edge, model::Model)\n\nAdd a max capacity constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(e) leq textmax_capacity(e)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MaxCapacityConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MaxCapacityConstraint, s::Storage, model::Model)\n\nAdd a max capacity constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity_storage(s) leq textmax_capacity_storage(s)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Maximum-non-served-demand-constraint","page":"Constraints","title":"Maximum non-served demand constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MaxNonServedDemandConstraint, n::Node, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MaxNonServedDemandConstraint, Node, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MaxNonServedDemandConstraint, n::Node, model::Model)\n\nAdd a max non-served demand constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    sum_s in textsegments_non_served_demand(n) textnon_served_demand(n s t) leq textdemand(n t)\nendaligned\n\nfor each time t in time_interval(n) for the node n.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Maximum-non-served-demand-per-segment-constraint","page":"Constraints","title":"Maximum non-served demand per segment constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MaxNonServedDemandPerSegmentConstraint, n::Node, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MaxNonServedDemandPerSegmentConstraint, Node, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(\n    ct::MaxNonServedDemandPerSegmentConstraint,\n    n::Node,\n    model::Model,\n)\n\nAdd a max non-served demand per segment constraint to the node n. The functional form of the constraint is:\n\nbeginaligned\n    textnon_served_demand(n s t) leq textmax_non_served_demand(n s) times textdemand(n t)\nendaligned\n\nfor each segment s in segments_non_served_demand(n) and each time t in time_interval(n) for the node n. The function segments_non_served_demand returns the segments of the non-served demand of the node n as defined in the input data nodes.json.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Maximum-storage-level-constraint","page":"Constraints","title":"Maximum storage level constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MaxStorageLevelConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MaxStorageLevelConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MaxStorageLevelConstraint, s::Storage, model::Model)\n\nAdd a max storage level constraint to the storage g. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(s t) leq textmax_storage_level(s) times textcapacity_storage(s)\nendaligned\n\nfor each time t in time_interval(s) for the storage s.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-capacity-constraint","page":"Constraints","title":"Minimum capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MinCapacityConstraint, e::Edge, model::Macro.Model)\nMacro.add_model_constraint!(ct::MinCapacityConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinCapacityConstraint, Edge, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinCapacityConstraint, e::Edge, model::Model)\n\nAdd a min capacity constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity(e) geq textmin_capacity(e)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinCapacityConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinCapacityConstraint, s::Storage, model::Model)\n\nAdd a min capacity constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity_storage(s) geq textmin_capacity_storage(s)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-flow-constraint","page":"Constraints","title":"Minimum flow constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MinFlowConstraint, e::Edge, model::Macro.Model)\nMacro.add_model_constraint!(ct::MinFlowConstraint, e::EdgeWithUC, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinFlowConstraint, Edge, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::Edge, model::Model)\n\nAdd a min flow constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. \n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinFlowConstraint, EdgeWithUC, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinFlowConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min flow constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) geq textmin_flow_fraction(e) times textcapacity_size(e) times textucommit(e t)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Note\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-storage-level-constraint","page":"Constraints","title":"Minimum storage level constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MinStorageLevelConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinStorageLevelConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageLevelConstraint, s::Storage, model::Model)\n\nAdd a min storage level constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(s t) geq textmin_storage_level(s) times textcapacity_storage(s)\nendaligned\n\nfor each time t in time_interval(s) for the storage s.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-storage-outflow-constraint","page":"Constraints","title":"Minimum storage outflow constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MinStorageOutflowConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinStorageOutflowConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinStorageOutflowConstraint, s::Storage, model::Model)\n\nAdd a min storage outflow constraint to the storage s part of a HydroRes asset. The functional form of the constraint is:\n\nbeginaligned\n    textflow(spillage_edge t) + textflow(discharge_edge t) geq textmin_outflow_fraction(s) times textcapacity(discharge_edge)\nendaligned\n\nfor each time t in time_interval(s) for the storage s.\n\nwarning: Only applies to HydroRes assets\nThis constraint only applies to HydroRes assets. It returns a warning if the storage s does not have a spillage edge.  If the discharge edge is the only outflow, you should apply MinFlowConstraint to the discharge edge.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Minimum-up-and-down-time-constraint","page":"Constraints","title":"Minimum up and down time constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MinUpTimeConstraint, e::EdgeWithUC, model::Macro.Model)\nMacro.add_model_constraint!(ct::MinDownTimeConstraint, e::EdgeWithUC, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinUpTimeConstraint, EdgeWithUC, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinUpTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min up time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    textucommit(e t) geq sum_h=0^textmin_up_time(e)-1 textustart(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min up time duration\nThis constraint will throw an error if the minimum up time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MinDownTimeConstraint, EdgeWithUC, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MinDownTimeConstraint, e::EdgeWithUC, model::Model)\n\nAdd a min down time constraint to the edge e with unit commitment. The functional form of the constraint is:\n\nbeginaligned\n    fractextcapacity(e)textcapacity_size(e) - textucommit(e t) geq sum_h=0^textmin_down_time(e)-1 textushut(e t-h)\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Min down time duration\nThis constraint will throw an error if the minimum down time is longer than the length of one subperiod.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Must-run-constraint","page":"Constraints","title":"Must-run constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::MustRunConstraint, e::Edge, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{MustRunConstraint, Edge, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::MustRunConstraint, e::Edge, model::Model)\n\nAdd a must run constraint to the edge e. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e t) = textavailability(e t) times textcapacity(e)\nendaligned\n\nfor each time t in time_interval(e) for the edge e.\n\nnote: Must run constraint\nThis constraint is available only for unidirectional edges.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Ramping-limits-constraint","page":"Constraints","title":"Ramping limits constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::RampingLimitConstraint, e::Edge, model::Macro.Model)\nMacro.add_model_constraint!(ct::RampingLimitConstraint, e::EdgeWithUC, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{RampingLimitConstraint, Edge, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::Edge, model::Model)\n\nAdd a ramping limit constraint to the edge e. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity(e) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{RampingLimitConstraint, EdgeWithUC, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::RampingLimitConstraint, e::EdgeWithUC, model::Model)\n\nAdd a ramping limit constraint to the edge e with unit commitment. The functional form of the ramping up limit constraint is:\n\nbeginaligned\n    textflow(e t) - textflow(e t-1) + textregulation_term(e t) + textreserves_term(e t) - textramp_up_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) + textmin(availability(e t) max(min_flow_fraction(e) ramp_up_fraction(e))) times textcapacity_size(e) times textustart(e t) - textmin_flow_fraction(e) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nOn the other hand, the ramping down limit constraint is:\n\nbeginaligned\n    textflow(e t-1) - textflow(e t) + textregulation_term(e t) + textreserves_term(e t) - textramp_down_fraction(e) times textcapacity_size(e) times (textucommit(e t) - textustart(e t)) - textmin_flow_fraction(e) times textcapacity_size(e) times textustart(e t) + textmin(availability(e t) max(min_flow_fraction(e) ramp_down_fraction(e))) times textcapacity_size(e) times textushut(e t) leq 0\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-capacity-constraint","page":"Constraints","title":"Storage capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::StorageCapacityConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{StorageCapacityConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::StorageCapacityConstraint, s::Storage, model::Model)\n\nAdd a storage capacity constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textstorage_level(s t) leq textcapacity_storage(s)\nendaligned\n\nfor each time t in time_interval(s) for the storage s.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-discharge-limit-constraint","page":"Constraints","title":"Storage discharge limit constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::StorageDischargeLimitConstraint, e::Edge, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{StorageDischargeLimitConstraint, Edge, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::StorageDischargeLimitConstraint, e::Edge, model::Model)\n\nAdd a storage discharge limit constraint to the edge e if the start vertex of the edge is a storage. The functional form of the constraint is:\n\nbeginaligned\n   fractextflow(e t)textefficiency(e) leq textstorage_level(start_vertex(e) timestepbefore(t 1 subperiods(e)))\nendaligned\n\nfor each time t in time_interval(e) for the edge e. The function timestepbefore is used to perform the time wrapping within the subperiods and get the correct time step before t.\n\nnote: Storage discharge limit constraint\nThis constraint is only applied to edges with a start vertex that is a storage.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-symmetric-capacity-constraint","page":"Constraints","title":"Storage symmetric capacity constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::StorageSymmetricCapacityConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{StorageSymmetricCapacityConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageSymmetricCapacityConstraint,\n    s::Storage,\n    model::Model,\n)\n\nAdd a storage symmetric capacity constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textflow(e_discharge t) + textflow(e_charge t) leq textcapacity(e_discharge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-charge-discharge-ratio-constraint","page":"Constraints","title":"Storage charge discharge ratio constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(\n        ct::StorageChargeDischargeRatioConstraint,\n        s::Storage,\n        model::Macro.Model,\n)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{StorageChargeDischargeRatioConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(\n    ct::StorageChargeDischargeRatioConstraint,\n    s::Storage,\n    model::Model,\n)\n\nAdd a storage charge discharge ratio constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textcharge_discharge_ratio(s) times textcapacity(sdischarge_edge) = textcapacity(scharge_edge)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-max-duration-constraint","page":"Constraints","title":"Storage max duration constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::StorageMaxDurationConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{StorageMaxDurationConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::StorageMaxDurationConstraint, s::Storage, model::Model)\n\nAdd a storage max duration constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity_storage(s) leq textmax_duration(s) times textcapacity(discharge_edge(s))\nendaligned\n\nnote: Storage max duration constraint\nThis constraint is only applied if the maximum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/constraints.html#Storage-min-duration-constraint","page":"Constraints","title":"Storage min duration constraint","text":"","category":"section"},{"location":"User Guide/constraints.html","page":"Constraints","title":"Constraints","text":"Macro.add_model_constraint!(ct::StorageMinDurationConstraint, s::Storage, model::Macro.Model)","category":"page"},{"location":"User Guide/constraints.html#Macro.add_model_constraint!-Tuple{StorageMinDurationConstraint, Storage, JuMP.Model}","page":"Constraints","title":"Macro.add_model_constraint!","text":"add_model_constraint!(ct::StorageMinDurationConstraint, s::Storage, model::Model)\n\nAdd a storage min duration constraint to the storage s. The functional form of the constraint is:\n\nbeginaligned\n    textcapacity_storage(s) geq textmin_duration(s) times textcapacity(discharge_edge(s))\nendaligned\n\nnote: Storage min duration constraint\nThis constraint is only applied if the minimum duration is greater than 0.\n\n\n\n\n\n","category":"method"},{"location":"User Guide/assets/beccselectricity.html#BECCS-Electricity","page":"BECCS Electricity","title":"BECCS Electricity","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html#Graph-structure","page":"BECCS Electricity","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"Bioenergy with carbon capture and storage (BECCS) that produces electricity is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"<img width=\"400\" src=\"../../images/beccselec.png\" />","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"A BECCS electricity asset is made of:","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"1 Transformation component, representing the BECCS process.\n5 Edge components:\n1 incoming Biomass Edge, representing the biomass supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the biomass.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Attributes","page":"BECCS Electricity","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"The structure of the input file for a BECCS electricity asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Transformation","page":"BECCS Electricity","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"Attribute Type Values Default Description/Units\ntimedata String Any MACRO commodity type Required Time resolution for the time series data linked to the transformation. E.g. \"Biomass\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2t_Biomass\nco2_content epsilon_co2 Float64 Float64 0.0 t_CO2t_Biomass\nelectricity_production epsilon_elec_prod Float64 Float64 1.0 MWh_elect_Biomass\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2t_Biomass","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Default constraints\nThe default constraint for the transformation part of the BECCS electricity asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Flow-equations","page":"BECCS Electricity","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"note: BECCSElectricity\nbeginaligned\nphi_elec = phi_biomass cdot epsilon_elec_prod \nphi_co2 = -phi_biomass cdot epsilon_co2 \nphi_co2 = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Edges","page":"BECCS Electricity","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"warning: Asset expansion\nAs a modeling decision, only the Biomass edge is allowed to expand. Consequently, the has_capacity and constraints attributes can only be set for the Biomass edge. For all other edges, these attributes are pre-set to false and an empty list, respectively, to ensure proper modeling of the asset.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"warning: Directionality\nThe unidirectional attribute is only available for the Biomass edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Biomass edge).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional (only available for the Biomass edge).\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"tip: Default constraints\nThe only default constraint for the edges of the BECCS electricity asset is the Capacity constraint applied to the Biomass edge. ","category":"page"},{"location":"User Guide/assets/beccselectricity.html#Example","page":"BECCS Electricity","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"The following is an example of the input file for a BECCS electricity asset that creates six BECCS electricity assets, two in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/beccselectricity.html","page":"BECCS Electricity","title":"BECCS Electricity","text":"{\n    \"BECCS_Electricity\": [\n        {\n            \"type\": \"BECCSElectricity\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"biomass_edge\": {\n                        \"type\": \"Biomass\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"start_vertex\": \"co2_sink\"\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_Electricity_Herb\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_Electricity_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_Electricity_Wood\",\n                    \"transforms\": {\n                        \"electricity_production\": 1.656626506,\n                        \"capture_rate\": 1.5313914,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.2288286\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_Electricity_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 696050.2868,\n                            \"fixed_om_cost\": 193228.9157,\n                            \"variable_om_cost\": 42.93975904,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.4\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Modeler Guide/build_sectors.html#Modeler-Guide","page":"How to build a sector","title":"Modeler Guide","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html#How-to-build-new-sectors-in-MACRO","page":"How to build a sector","title":"How to build new sectors in MACRO","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html#Overview","page":"How to build a sector","title":"Overview","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The steps to build a sector in MACRO are as follows:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Create new sectors/commodity types by defining new subtypes of Commodity in the Macro.jl file.\nCreate new assets. Each asset type should be a subtype of AbstractAsset and be defined in a Julia (.jl) file located in the src/assets folder. A make function should be defined for each asset type to create an instance of the asset.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"note: Note\nRemember to include the new files in the Macro.jl file, so that they are available when the package is loaded.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"During the creation of the assets, you will need to provide (check the following sections for an example):","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Asset structure: list of fields that define the asset in the form of transformations, edges, and storage units.\nDefault constraints for the transformations, edges, and storage units.\nStoichiometric equations/coefficients for the transformation processes.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"<ol start=\"4\">\n    <li>(Optional) Create a new JSON data file to test the new assets.</li>\n</ol>","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The following section provides an example of how to create a new sector and assets in MACRO.","category":"page"},{"location":"Modeler Guide/build_sectors.html#Example","page":"How to build a sector","title":"Example","text":"","category":"section"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"For example, let's create a new sector called MyNewSector with two assets: MyAsset1, and MyAsset2. ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The first asset will be a technology that converts a commodity MyNewSector, into two other commodities, Electricity and CO2, while the second asset will be a technology with a storage unit that stores the commodity MyNewSector.","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"As seen in the previous section, the steps to create a new sector and assets are as follows:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Add the following line to the Macro.jl file:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"abstract type MyNewSector <: Commodity end","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"(try to add this line right after the definition of the Commodity type). ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"Create a new file called MyAsset1.jl in the src/assets folder with the following content:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"# Structure of the asset\nstruct MyAsset1 <: AbstractAsset\n    id::AssetId\n    myasset1_transform::Transformation\n    mynewsector_edge::Edge{MyNewSector}\n    e_edge::Edge{Electricity}\n    co2_edge::Edge{CO2}\nend\n\n# Make function to create an instance of the asset\n# The function takes as input the data and the system, and returns an instance of the asset\n# The data is a dictionary with the asset data, and the system is the system object containing the locations, time data, and other relevant information\nfunction make(::Type{MyAsset1}, data::AbstractDict{Symbol,Any}, system::System)\n\n    # asset id\n    id = AssetId(data[:id])\n\n    # transformation\n    transform_data = process_data(data[:transforms])\n    myasset1_transform_default_constraints = [BalanceConstraint()]\n    myasset1_transform = Transformation(;\n        id = Symbol(transform_data[:id]),\n        timedata = system.time_data[Symbol(transform_data[:timedata])],\n        constraints = get(transform_data, :constraints, myasset1_transform_default_constraints),\n    )\n\n    # edges\n    mynewsector_edge_data = process_data(data[:edges][:mynewsector_edge])\n    mynewsector_edge_default_constraints = Vector{AbstractTypeConstraint}()\n    mynewsector_start_node = find_node(system.locations, Symbol(mynewsector_edge_data[:start_vertex]))\n    mynewsector_end_node = myasset1_transform\n    mynewsector_edge = Edge(\n        Symbol(String(id) * \"_\" * mynewsector_edge_data[:id]),\n        mynewsector_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        mynewsector_start_node,\n        mynewsector_end_node,\n    )\n    mynewsector_edge.constraints = get(mynewsector_edge_data, :constraints, mynewsector_edge_default_constraints)\n    mynewsector_edge.unidirectional = get(mynewsector_edge_data, :unidirectional, true)\n\n    elec_edge_data = process_data(data[:edges][:e_edge])\n    elec_start_node = myasset1_transform\n    elec_end_node = find_node(system.locations, Symbol(elec_edge_data[:end_vertex]))\n    elec_edge = EdgeWithUC(\n        Symbol(String(id) * \"_\" * elec_edge_data[:id]),\n        elec_edge_data,\n        system.time_data[:Electricity],\n        Electricity,\n        elec_start_node,\n        elec_end_node,\n    )\n    elec_edge.constraints = get(\n        elec_edge_data,\n        :constraints,\n        [\n            CapacityConstraint(),\n            RampingLimitConstraint(),\n            MinUpTimeConstraint(),\n            MinDownTimeConstraint(),\n        ],\n    )\n    elec_edge.unidirectional = get(elec_edge_data, :unidirectional, true)\n    elec_edge.startup_fuel_balance_id = :energy\n\n    co2_edge_data = process_data(data[:edges][:co2_edge])\n    co2_start_node = myasset1_transform\n    co2_end_node = find_node(system.locations, Symbol(co2_edge_data[:end_vertex]))\n    co2_edge = Edge(\n        Symbol(String(id) * \"_\" * co2_edge_data[:id]),\n        co2_edge_data,\n        system.time_data[:CO2],\n        CO2,\n        co2_start_node,\n        co2_end_node,\n    )\n    co2_edge.constraints =\n        get(co2_edge_data, :constraints, Vector{AbstractTypeConstraint}())\n    co2_edge.unidirectional = get(co2_edge_data, :unidirectional, true)\n\n    myasset1_transform.balance_data = Dict(\n        # Edit this part to include the stoichiometric equations for the transformation process \n        ),\n    )\n\n    return MyAsset1(id, myasset1_transform, mynewsector_edge, elec_edge, co2_edge)\nend","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"From the code above, you can see that the modeler needs to provide the asset structure as a Julia struct, along with the default constraints for transformations and edges (myasset1_transform_default_constraints, mynewsector_edge_default_constraints), and the stoichiometric coefficients for the transformation process being modeled (myasset1_transform.balance_data).","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"tip: Tip\nChecking out other asset files in the src/assets folder is a good place to start adding new assets. ","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"The creation of the second asset, MyAsset2, follows very similar steps to the creation of MyAsset1. The main difference is that MyAsset2 has a storage unit:","category":"page"},{"location":"Modeler Guide/build_sectors.html","page":"How to build a sector","title":"How to build a sector","text":"struct MyAsset2 <: AbstractAsset\n    id::AssetId\n    myasset2_storage::Storage{MyNewSector}  # <--- Storage unit\n    discharge_edge::Edge{MyNewSector}\n    charge_edge::Edge{MyNewSector}\nend\n\nfunction make(::Type{MyAsset2}, data::AbstractDict{Symbol,Any}, system::System)\n\n    # asset id\n    id = AssetId(data[:id])\n\n    # storage\n    storage_data = process_data(data[:storage])\n    myasset2_storage_default_constraints = [\n            BalanceConstraint(),\n            StorageCapacityConstraint(),\n            StorageMaxDurationConstraint(),\n            StorageMinDurationConstraint(),\n            StorageSymmetricCapacityConstraint(),\n        ]\n    myasset2_storage = Storage(id, \n        storage_data, \n        system.time_data[Symbol(storage_data[:commodity])], \n        MyNewSector, \n        myasset2_storage_default_constraints\n    )\n\n    # edges\n    discharge_edge_data = process_data(data[:edges][:discharge_edge])\n    discharge_edge_default_constraints = [CapacityConstraint()]\n    discharge_start_node = myasset2_storage\n    discharge_end_node = find_node(system.locations, Symbol(discharge_edge_data[:end_vertex]))\n    discharge_edge = Edge(\n        Symbol(String(id) * \"_\" * discharge_edge_data[:id]),\n        discharge_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        discharge_start_node,\n        discharge_end_node,\n    )\n    discharge_edge.constraints = get(discharge_edge_data, :constraints, discharge_edge_default_constraints)\n    discharge_edge.unidirectional = get(discharge_edge_data, :unidirectional, true)\n\n    charge_edge_data = process_data(data[:edges][:charge_edge])\n    charge_start_node = find_node(system.locations, Symbol(charge_edge_data[:start_vertex]))\n    charge_end_node = myasset2_storage\n    charge_edge = Edge(\n        Symbol(String(id) * \"_\" * charge_edge_data[:id]),\n        charge_edge_data,\n        system.time_data[:MyNewSector],\n        MyNewSector,\n        charge_start_node,\n        charge_end_node,\n    )\n    charge_edge.constraints = get(charge_edge_data, :constraints, Vector{AbstractTypeConstraint}())\n    charge_edge.unidirectional = get(charge_edge_data, :unidirectional, true)\n\n    myasset2_storage.discharge_edge = discharge_edge\n    myasset2_storage.charge_edge = charge_edge\n\n    myasset2_storage.balance_data = Dict(\n        # Edit this part to include the energy efficiency of the storage unit or any other stoiometric equations\n        ),\n    )\n\n    return MyAsset2(id, myasset2_storage, discharge_edge, charge_edge)\nend","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#BECCS-Hydrogen","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html#Graph-structure","page":"BECCS Hydrogen","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Bioenergy with carbon capture and storage (BECCS) that produces hydrogen is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"<img width=\"400\" src=\"../../images/beccsh2.png\" />","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"A BECCS hydrogen asset is made of:","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"1 Transformation component, representing the BECCS process.\n6 Edge components:\n1 incoming Biomass Edge, representing the biomass supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the biomass.\n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Attributes","page":"BECCS Hydrogen","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The structure of the input file for a BECCS hydrogen asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"biomass_edge\": {\n            // ... biomass_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Transformation","page":"BECCS Hydrogen","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Attribute Type Values Default Description/Units\ntimedata String Any MACRO commodity type Required Time resolution for the time series data linked to the transformation. E.g. \"Biomass\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2t_Biomass\nco2_content epsilon_co2 Float64 Float64 0.0 t_CO2t_Biomass\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elect_Biomass\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2t_Biomass\nhydrogen_production epsilon_h2_prod Float64 Float64 0.0 t_H2t_Biomass","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Default constraints\nThe default constraint for the transformation part of the BECCS hydrogen asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Flow-equations","page":"BECCS Hydrogen","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"note: BECCSHydrogen\nbeginaligned\nphi_h2 = phi_biomass cdot epsilon_h2_prod \nphi_elec = -phi_biomass cdot epsilon_elec_consumption \nphi_co2 = -phi_biomass cdot epsilon_co2 \nphi_co2 = phi_biomass cdot epsilon_emission_rate \nphi_co2_captured = phi_biomass cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Edges","page":"BECCS Hydrogen","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"warning: Asset expansion\nAs a modeling decision, only the Biomass edge is allowed to expand. Consequently, the has_capacity and constraints attributes can only be set for the Biomass edge. For all other edges, these attributes are pre-set to false and an empty list, respectively, to ensure proper modeling of the asset.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"warning: Directionality\nThe unidirectional attribute is only available for the Biomass edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge. (only available for the Biomass edge)\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional. (only available for the Biomass edge)\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"tip: Default constraints\nThe only default constraint for the edges of the BECCS hydrogen asset is the Capacity constraint applied to the Biomass edge. ","category":"page"},{"location":"User Guide/assets/beccshydrogen.html#Example","page":"BECCS Hydrogen","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"The following is an example of the input file for a BECCS hydrogen asset that creates six BECCS hydrogen assets, two in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/beccshydrogen.html","page":"BECCS Hydrogen","title":"BECCS Hydrogen","text":"{\n    \"BECCS_Hydrogen\": [\n        {\n            \"type\": \"BECCSHydrogen\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Biomass\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"biomass_edge\": {\n                        \"type\": \"Biomass\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"start_vertex\": \"co2_sink\"\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Herb\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"bioherb_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Herb\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_BECCS_H2_Wood\",\n                    \"transforms\": {\n                        \"hydrogen_production\": 2.614520322,\n                        \"electricity_consumption\": 0.083426966,\n                        \"capture_rate\": 1.50022,\n                        \"co2_content\": 1.76022,\n                        \"emission_rate\": 0.26\n                    },\n                    \"edges\": {\n                        \"biomass_edge\": {\n                            \"start_vertex\": \"biowood_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_BECCS_H2_Wood\"\n                                }\n                            },\n                            \"investment_cost\": 532452.9904,\n                            \"fixed_om_cost\": 60067.41573,\n                            \"variable_om_cost\": 38.44314607,\n                            \"capacity_size\": 400,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html#MACRO-Input-Data","page":"Input Data","title":"MACRO Input Data","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"MACRO version 0.1.0","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"tip: Tutorial 1\nWe recommend to check the Tutorial 1 for a step-by-step guide on how to create the input data.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"All input files are divided into three main folders:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"settings: Contains all the settings for the run and the solver.\nsystem: Contains all files related to the system, such as sectors, time resolution, nodes, demand, etc.\nassets: Contains all the files that define the assets, such as transmission lines, power plants, storage units, etc.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"In the following section, we will go through each folder and file in detail.","category":"page"},{"location":"User Guide/input_data.html#Units","page":"Input Data","title":"Units","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Before be dive into the input data, let's define the units of the input data:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Sector/Quantity Units\nElectricity MWh\nHydrogen MWh\nNaturalGas MWh\nUranium MWh\nCoal MWh\nCO2 ton\nCO2Captured ton\nBiomass ton\nTime hours\nPrice USD","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Commodities that require only an energy representation (e.g., Hydrogen) have units of MWh. Commodities that require a physical representation (e.g., Biomass, where regional supply curve is important) have units of metric tonnes. The recommended convention is MWh on a higher heating value basis for transformations where hydrogen is involved, and tonnes on a dry basis for transformations where biomass is involved.","category":"page"},{"location":"User Guide/input_data.html#Settings-folder","page":"Input Data","title":"Settings folder","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The settings folder currently contains only one file, macro_settings.yml, which contains the settings for the run.","category":"page"},{"location":"User Guide/input_data.html#macro_settings.json","page":"Input Data","title":"macro_settings.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Attribute Values Default Description\nScaling True, False False If true, the model will scale the input data to the following units: MWh → GWh, tons → ktons, $\\/MWh → M$\\/GWh, $\\/ton → M$\\/kton","category":"page"},{"location":"User Guide/input_data.html#System-folder","page":"Input Data","title":"System folder","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The system folder currently contains five main files:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"commodities.json: Defines the sectors/commodities used in the system.\ntime_data.json: Defines the time resolution data for each sector.\nnodes.json: Defines the nodes in the system.\ndemand.csv: Contains the demand data.\nfuel_prices.csv: Contains the prices of fuels.","category":"page"},{"location":"User Guide/input_data.html#commodities.json","page":"Input Data","title":"commodities.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains a list of sectors/commodities used in the system. This is how the file is structured:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"commodities\": [\n        \"Sector_1\",\n        \"Sector_2\",\n        ...\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"For instance, if we want to include the electricity, hydrogen, natural gas, CO2, uranium, and coal sectors, the file should look like this:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"commodities\": [\n        \"Electricity\",\n        \"Hydrogen\",\n        \"NaturalGas\",\n        \"CO2\", \n        \"Uranium\",\n        \"Coal\"\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html#time_data.json","page":"Input Data","title":"time_data.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains the data related to the time resolution for each sector. The file is structured as follows:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"PeriodLength\": <Integer>,  // units: hours\n    \"HoursPerTimeStep\": {\n        \"Sector_1\": <Integer>,  // units: hours\n        \"Sector_2\": <Integer>,  // units: hours\n        ...\n    },\n    \"HoursPerSubperiod\": {\n        \"Sector_1\": <Integer>,\n        \"Sector_2\": <Integer>,\n        ...\n    }\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Attribute Values Description\nPeriodLength Integer Total number of hours in the simulation.\nHoursPerTimeStep Integer Number of hours in each time step for each sector.\nHoursPerSubperiod Integer Number of hours in each subperiod for each sector.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"note: Subperiods\nSubperiods represent the time slices of the simulation used to perform time wrapping for time-coupling constraints (see, for example, Macro.timestepbefore).","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"For instance, if we want to run the model for one year (non leap year), with one hour per time step and a single subperiod, the file should look like this:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"PeriodLength\": 8760,  // one year\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,\n        \"Hydrogen\": 1,\n        \"NaturalGas\": 1,\n        \"CO2\": 1,\n        \"Uranium\": 1,\n        \"Coal\": 1\n    },\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 8760,\n        \"Hydrogen\": 8760,\n        \"NaturalGas\": 8760,\n        \"CO2\": 8760,\n        \"Uranium\": 8760,\n        \"Coal\": 8760\n    }\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"A more complex example is the following:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"PeriodLength\": 504,  // 3 weeks\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,\n        \"Hydrogen\": 1,\n        \"NaturalGas\": 1,\n        \"CO2\": 1,\n        \"Uranium\": 1,\n        \"Coal\": 1\n    },\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 168,  // 1 week\n        \"Hydrogen\": 168,\n        \"NaturalGas\": 168,\n        \"CO2\": 168,\n        \"Uranium\": 168,\n        \"Coal\": 168\n    }\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"In this example, the simulation will run for 504 hours (3 weeks), with one hour per time step and 1 week per subperiod.","category":"page"},{"location":"User Guide/input_data.html#nodes.json","page":"Input Data","title":"nodes.json","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file defines the regions/nodes for each sector. It is structured as a list of dictionaries, where each dictionary defines a network for a given sector. ","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Each dictionary (network) has three main attributes:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"type: The type of the network (e.g. \"NaturalGas\", \"Electricity\", etc.).\nglobal_data: attributes that are the same for all the nodes in the network.\ninstance_data: attributes that are different for each node in the network.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This structure for the network has the advantage of grouping the common attributes for all the nodes in a single dictionary, avoiding to repeat the same attribute for each node.","category":"page"},{"location":"User Guide/input_data.html#Node-attributes","page":"Input Data","title":"Node attributes","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The Node object is defined in the file nodes.jl and can be found here Macro.Node.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Attribute Type Values Default Description\nid String String Required Unique identifier for the node. E.g. \"elec_node_1\".\ntype String Any MACRO commodity type Required Commodity type. E.g. \"Electricity\".\ntime_interval String Any MACRO commodity type Required Time resolution for the time series data linked to the node. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any MACRO constraint type Empty List of constraints applied to the node. E.g. {\"BalanceConstraint\": true, \"MaxNonServedDemandConstraint\": true}.\ndemand Dict Demand file path and header Empty Path to the demand file and column name for the demand time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/demand.csv\", \"header\": \"Demand_MW_z1\"}}.\nprice Dict Price file path and header Empty Path to the price file and column name for the price time series to link to the node. E.g. {\"timeseries\": {\"path\": \"system/fuel_prices.csv\", \"header\": \"natgas_SE\"}}.\nmax_nsd Vector{Float64} Vector of numbers in [0,1] [0.0] Maximum allowed non-served demand for each demand segment as a fraction of the total demand. E.g. [1.0] for a single segment.\nprice_nsd Vector{Float64} Vector of numbers [0.0] Price/penalty for non-served demand by segment. E.g. [5000.0] for a single segment.\nprice_supply Vector{Float64} Vector of numbers [0.0] Piecewise linear price for supply curves. E.g. [0.0, 100.0, 200.0].\nmax_supply Vector{Float64} Vector of numbers [0.0] Maximum allowed supply for each supply segment. E.g. [1000.0] for a single segment.\nrhs_policy Dict{DataType,Float64} Dict of MACRO constraint types and numbers Empty Right hand side of the policy constraints. E.g. {\"CO2CapConstraint\": 200}, carbon price of 200 USD/ton.\nprice_unmet_policy Dict{DataType,Float64} Dict of MACRO policy types and numbers Empty Price/penalty for unmet policy constraints.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Here is an example of a nodes.json file with both electricity, natural gas, CO2 and biomass sectors covering most of the attributes present above. The (multiplex)-network in the system is made of the following networks:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"NaturalGas\nnatgas_SE\nnatgas_MIDAT\nnatgas_NE\nElectricity\nelec_SE\nelec_MIDAT\nelec_NE\nCO2\nco2_sink\nBiomass\nbioherb_SE","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Therefore, the system has 4 networks and 8 nodes in total.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"{\n    \"nodes\": [\n        {\n            \"type\": \"NaturalGas\",\n            \"global_data\": {\n                \"time_interval\": \"NaturalGas\" // time resolution as defined in the time_data.json file\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"natgas_SE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\", // path to the price file\n                            \"header\": \"natgas_SE\" // column name in the price file for the price time series\n                        }\n                    }\n                },\n                {\n                    \"id\": \"natgas_MIDAT\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"natgas_NE\",\n                    \"price\": {\n                        \"timeseries\": {\n                            \"path\": \"system/fuel_prices.csv\",\n                            \"header\": \"natgas_NE\"\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"Electricity\",\n            \"global_data\": {\n                \"time_interval\": \"Electricity\",\n                \"max_nsd\": [\n                    1\n                ],\n                \"price_nsd\": [\n                    5000.0\n                ],\n                \"constraints\": {    // constraints applied to the nodes\n                    \"BalanceConstraint\": true,\n                    \"MaxNonServedDemandConstraint\": true,\n                    \"MaxNonServedDemandPerSegmentConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"elec_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\", // path to the demand file\n                            \"header\": \"Demand_MW_z1\" // column name in the demand file for the demand time series\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_MIDAT\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z2\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"elec_NE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_MW_z3\"\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"CO2\",\n            \"global_data\": {\n                \"time_interval\": \"CO2\"\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"co2_sink\",\n                    \"constraints\": {\n                        \"CO2CapConstraint\": true\n                    },\n                    \"rhs_policy\": {\n                        \"CO2CapConstraint\": 0\n                    },\n                    \"price_unmet_policy\": {\n                        \"CO2CapConstraint\": 250.0\n                    }\n                }\n            ]\n        },\n        {\n            \"type\": \"Biomass\",\n            \"global_data\": {\n                \"time_interval\": \"Biomass\",\n                \"constraints\": {\n                    \"BalanceConstraint\": true\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"bioherb_SE\",\n                    \"demand\": {\n                        \"timeseries\": {\n                            \"path\": \"system/demand.csv\",\n                            \"header\": \"Demand_Zero\"\n                        }\n                    },\n                    \"max_supply\": [\n                        10000,\n                        20000,\n                        30000\n                    ],\n                    \"price_supply\": [\n                        40,\n                        60,\n                        80\n                    ]\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/input_data.html#demand.csv","page":"Input Data","title":"demand.csv","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: CSV","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains the demand data for each region/node. ","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"First column: Time step.\nRemaining columns: Demand for each region/node (units: MWh).","category":"page"},{"location":"User Guide/input_data.html#Example:","page":"Input Data","title":"Example:","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"TimeStep DemandMWz1 DemandMWz2 DemandMWz3\n1 100 200 300\n2 110 210 310\n... ... ... ...","category":"page"},{"location":"User Guide/input_data.html#fuel_prices.csv","page":"Input Data","title":"fuel_prices.csv","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: CSV","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"This file contains the prices for each fuel for each region/node.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"First column: Time step.\nRemaining columns: Prices for each region/node (units: USD/MWh).","category":"page"},{"location":"User Guide/input_data.html#Example:-2","page":"Input Data","title":"Example:","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"TimeStep natgas_SE natgas_MIDAT natgas_NE\n1 100 110 120\n2 110 120 130\n... ... ... ...","category":"page"},{"location":"User Guide/input_data.html#Assets-folder","page":"Input Data","title":"Assets folder","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"The assets folder contains all the files that define the resources and technologies that are included in the system. As a general rule, each asset type has its own file, where each file is structured in a similar way to the nodes.json file. ","category":"page"},{"location":"User Guide/input_data.html#Asset-type-files","page":"Input Data","title":"Asset type files","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Format: JSON","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Each asset type file has the following three main parameters:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"type: The type of the asset (e.g. \"Battery\", \"FuelCell\", \"PowerLine\", etc.).\nglobal_data: attributes that are the same for all the assets of the same type.\ninstance_data: attributes that are different for each asset of the same type.","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Depending on the graph structure of the asset, both global_data and instance_data can have different attributes, one for each transformation, edge, and storage present in the asset. ","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"tip: Example: natural gas power plant\nFor example, a natural gas combined cycle power plant is represented by an asset made of: 1 transformation (combustion and electricity generation)\n3 edges \nnatural gas flow\nelectricity flow\nCO2 flowThen, both global_data and instance_data will have the following structure:{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"In the following sections, we will go through each asset type and show the attributes that can be set for each of them. Each section will contain the following three parts:","category":"page"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"Graph structure: a graphical representation of the asset, showing the transformations, edges, and storages present in the asset.\nAttributes: a table with the attributes that can be set for each asset type.\nExample: an example of the asset type file (.json).","category":"page"},{"location":"User Guide/input_data.html#Example-of-the-folder-structure-for-the-input-data","page":"Input Data","title":"Example of the folder structure for the input data","text":"","category":"section"},{"location":"User Guide/input_data.html","page":"Input Data","title":"Input Data","text":"MacroCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml      \n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── demand.csv\n│   └── fuel_prices.csv\n│ \n├── 📁 assets\n│   ├──battery.json\n│   ├──electrolyzers.json\n│   ├──fuel_prices.csv\n│   ├──fuelcell.json\n│   ├──h2storage.json\n│   ├──power_lines.json\n│   ├──thermal_h2.json\n│   ├──thermal_power.json\n│   ├──vre.json\n| [...other asset types...]\n│   └──availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Hydrogen-Line","page":"Hydrogen Line","title":"Hydrogen Line","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html#Graph-structure","page":"Hydrogen Line","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"A hydrogen line is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"<img width=\"400\" src=\"../../images/h2line.png\" />","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"A hydrogen line asset is very simple and is made of:","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"1 Edge component:\n1 Hydrogen Edge, representing the flow of hydrogen between two nodes.","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Attributes","page":"Hydrogen Line","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"The structure of the input file for a hydrogen line asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"{\n    \"edges\":{\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Edge","page":"Hydrogen Line","title":"Edge","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"Attribute Type Values Default Description\ntype String Hydrogen Required Commodity flowing through the edge.\nstart_vertex String Any hydrogen node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"h2_node_1\".\nend_vertex String Any hydrogen node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"h2_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\ndistance Float64 Float64 0.0 Distance between the start and end vertex of the edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"tip: Default constraints\nThe default constraints for the hydrogen line asset are the following:Capacity constraint","category":"page"},{"location":"User Guide/assets/hydrogenline.html#Example","page":"Hydrogen Line","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"The following is an example of the input file for a hydrogen line asset that creates two hydrogen lines, one connecting the SE and MIDAT regions, and one connecting the NE and SE regions.","category":"page"},{"location":"User Guide/assets/hydrogenline.html","page":"Hydrogen Line","title":"Hydrogen Line","text":"{\n    \"h2transport\": [\n        {\n            \"type\": \"HydrogenLine\",\n            \"global_data\": {\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": false,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"h2_SE_to_MIDAT\",\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_SE\",\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"loss_fraction\": 0.067724471,\n                            \"distance\": 491.4512001,\n                            \"capacity_size\": 787.6,\n                            \"investment_cost\": 82682.23402\n                        }\n                    }\n                },\n                {\n                    \"id\": \"h2_NE_to_SE\",\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_NE\",\n                            \"end_vertex\": \"h2_SE\",\n                            \"loss_fraction\": 0.06553874,\n                            \"distance\": 473.6625536,\n                            \"capacity_size\": 787.6,\n                            \"investment_cost\": 79896.9841\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/introduction.html#MACRO-Asset-Library","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"","category":"section"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"MACRO is designed to be a flexible and modular model that can adapt to various energy system representations. The model includes a library of assets that represent different technologies within the energy system.","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Each asset is defined by a combination of transformations, edges, and storage units that represent the physical and operational characteristics of a technology. These assets can be combined to create a detailed representation of the energy system, capturing the interactions between technologies and sectors.","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"In the following sections, we will introduce each asset type and show the attributes that can be set for each of them as well as the equations that define the conversion processes. We will also provide a graphical representation of the asset in terms of transformations, edges, and storages to help the user understand the structure of the asset.","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Each section will have the following three parts:","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Graph structure: a graphical representation of the asset, showing the transformations, edges, and storages present in the asset.\nAttributes: a table with the attributes that can be set for each asset type.\nExample: an example of the asset type input file (.json) that can be used to create the asset.","category":"page"},{"location":"User Guide/assets/introduction.html#Available-assets","page":"MACRO Asset Library","title":"Available assets","text":"","category":"section"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"The current library includes the following assets:","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Battery","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"battery.html\"><img width=\"270\" src=\"../../images/battery.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"BECCS Electricity","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"beccselectricity.html\"><img width=\"400\" src=\"../../images/beccselec.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"BECCS Hydrogen","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"beccshydrogen.html\"><img width=\"400\" src=\"../../images/beccsh2.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Electric DAC","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"electricdac.html\"><img width=\"360\" src=\"../../images/elecdac.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Electrolyzer","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"electrolyzer.html\"><img width=\"360\" src=\"../../images/electrolyzer.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Fuel Cell","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"fuelcell.html\"><img width=\"320\" src=\"../../images/fuelcell.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Gas Storage","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"gasstorage.html\"><img width=\"400\" src=\"../../images/hydrogen_storage.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Hydrogen Line","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"hydrogenline.html\"><img width=\"220\" src=\"../../images/h2line.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Hydro Reservoir","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"hydropower.html\"><img width=\"360\" src=\"../../images/hydrores.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Must Run","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"mustrun.html\"><img width=\"250\" src=\"../../images/vre.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Natural Gas DAC","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"natgasdaq.html\"><img width=\"450\" src=\"../../images/natgasdac.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Power Line","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"powerline.html\"><img width=\"220\" src=\"../../images/powerline.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Thermal Hydrogen Plant (with and without CCS)","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"thermalhydrogen.html\"><img width=\"360\" src=\"../../images/smr.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Thermal Power Plant (with and without CCS)","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"thermalpower.html\"><img width=\"380\" src=\"../../images/thermalpower.png\" /></a>","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"Variable Renewable Energy resources (VRE)","category":"page"},{"location":"User Guide/assets/introduction.html","page":"MACRO Asset Library","title":"MACRO Asset Library","text":"<a href=\"vre.html\"><img width=\"300\" src=\"../../images/vre.png\" /></a>","category":"page"},{"location":"User Guide/assets/battery.html#Battery","page":"Battery","title":"Battery","text":"","category":"section"},{"location":"User Guide/assets/battery.html#Graph-structure","page":"Battery","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"A battery is a storage technology that is represented in MACRO by the following graph structure:","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"<img width=\"270\" src=\"../../images/battery.png\" />","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Therefore, a battery asset is made of:","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"1 Storage component, representing the battery storage.\n2 Electricity Edge components:\none incoming representing the charge edge from the electricity network to the storage.\none outgoing representing the discharge edge from the storage to the electricity network.","category":"page"},{"location":"User Guide/assets/battery.html#Attributes","page":"Battery","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"As for all the other assets, the structure of the input file for a battery asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"{\n    \"storage\":{\n        // ... storage-specific attributes ...\n    },\n    \"edges\":{\n        \"charge_edge\": {\n            // ... charge_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"where the possible attributes that the user can set are reported in the following tables. ","category":"page"},{"location":"User Guide/assets/battery.html#Storage-component","page":"Battery","title":"Storage component","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"The definition of the Storage object can be found here Macro.Storage.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Attribute Type Values Default Description\ncommodity String Electricity Required Commodity being stored.\nconstraints Dict{String,Bool} Any MACRO constraint type for storage BalanceConstraint, StorageCapacityConstraint, StorageMaxDurationConstraint, StorageMinDurationConstraint, StorageSymmetricCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity_storage Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost_storage Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost_storage Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nmax_capacity_storage Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_capacity_storage Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nstorage_loss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"tip: Default constraints\nAs noted in the above table, the default constraints for the storage component of the battery are the following:Balance constraint\nStorage capacity constraint\nStorage max duration constraint\nStorage min duration constraint\nStorage symmetric capacity constraint","category":"page"},{"location":"User Guide/assets/battery.html#Charge-and-discharge-edges","page":"Battery","title":"Charge and discharge edges","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Both the charge and discharge edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\nefficiency Float64 Number in [0,1] 1.0 Efficiency of the charging/discharging process.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"tip: Efficiency\nThe efficiency of the charging/discharging process can be set in the charge_edge and discharge_edge parts of the input file. These parameters are used, for example, in the Balance constraint to balance the charge and discharge flows. ","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"tip: Default constraints\nThe default constraints for the discharge edge are the following:Capacity constraint\nStorage discharge limit constraint\nRamping limits constraint","category":"page"},{"location":"User Guide/assets/battery.html#Example","page":"Battery","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"The following is an example of the input file for a battery asset that creates three batteries, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/battery.html","page":"Battery","title":"Battery","text":"{\n    \"elec_stor\": [\n        {\n            \"type\": \"Battery\",\n            \"global_data\": {\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"StorageSymmetricCapacityConstraint\": true,\n                        \"StorageMinDurationConstraint\": true,\n                        \"StorageMaxDurationConstraint\": true,\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"StorageDischargeLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"battery_SE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_MIDAT\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                },\n                {\n                    \"id\": \"battery_NE\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 1.0,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 4536.98,\n                            \"investment_cost\": 17239.56121,\n                            \"variable_om_cost\": 0.15,\n                            \"efficiency\": 0.92\n                        },\n                        \"charge_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"efficiency\": 0.92,\n                            \"variable_om_cost\": 0.15\n                        }\n                    },\n                    \"storage\": {\n                        \"existing_capacity_storage\": 0.0,\n                        \"fixed_om_cost_storage\": 2541.19,\n                        \"investment_cost_storage\": 9656.002735,\n                        \"max_duration\": 10,\n                        \"min_duration\": 1\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/mustrun.html#Must-Run","page":"Must Run","title":"Must Run","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html#Graph-structure","page":"Must Run","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"A MustRun asset is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"<img width=\"400\" src=\"../../images/vre.png\" />","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"A MustRun asset is very similar to a VRE asset, and is made of:","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"1 Transformation component, representing the MustRun transformation.\n1 Edge component:\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"User Guide/assets/mustrun.html#Attributes","page":"Must Run","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The structure of the input file for a hydroelectric reservoir asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/mustrun.html#Transformation","page":"Must Run","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"Attribute Asset Type Values Default Description\ntimedata All String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints All Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.","category":"page"},{"location":"User Guide/assets/mustrun.html#Edges","page":"Must Run","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"Attribute Type Values Default Description\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"MustRunConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool true Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"tip: Default constraints\nDefault constraints for the edges of the MustRun asset are only applied to the inflow edge. These constraints are:Must run constraint","category":"page"},{"location":"User Guide/assets/mustrun.html#Example","page":"Must Run","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"The following input file example shows how to create a MustRun asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"User Guide/assets/mustrun.html","page":"Must Run","title":"Must Run","text":"{\n    \"mustrun\": [\n        {\n            \"type\": \"MustRun\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"unidirectional\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"existing_capacity\": 249.895,\n                            \"capacity_size\": 1.219,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"existing_capacity\": 263.268,\n                            \"capacity_size\": 1.236,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_small_hydroelectric_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"existing_capacity\": 834.494,\n                            \"capacity_size\": 1.051,\n                            \"fixed_om_cost\": 45648,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_small_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/electricdac.html#Electric-DAC","page":"Electric DAC","title":"Electric DAC","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html#Graph-structure","page":"Electric DAC","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"An electric direct air capture (DAC) asset is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"<img width=\"400\" src=\"../../images/elecdac.png\" />","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"An electric DAC asset is made of:","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"1 Transformation component, representing the DAC process.\n3 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption.\n1 incoming CO2 Edge, representing the CO2 that is captured.\n1 outgoing CO2 Captured Edge, representing the CO2 that is captured.","category":"page"},{"location":"User Guide/assets/electricdac.html#Attributes","page":"Electric DAC","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"The structure of the input file for an electric DAC asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/electricdac.html#Transformation","page":"Electric DAC","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elect_CO2","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"tip: Default constraints\nThe default constraint for the transformation part of the ElectricDAC asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/electricdac.html#Flow-equations","page":"Electric DAC","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"note: ElectricDAC\nbeginaligned\nphi_elec = phi_co2_captured cdot epsilon_elec_consumption \nphi_co2 = phi_co2_captured \nendaligned","category":"page"},{"location":"User Guide/assets/electricdac.html#Edge","page":"Electric DAC","title":"Edge","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"Both the incoming and outgoing edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"tip: Default constraints\nThe only default constraint for the edges of the ElectricDAC asset is the Capacity constraint applied to the CO2 edge. ","category":"page"},{"location":"User Guide/assets/electricdac.html#Example","page":"Electric DAC","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"The following is an example of the input file for an ElectricDAC asset that creates three electric DAC units, each for a different region.","category":"page"},{"location":"User Guide/assets/electricdac.html","page":"Electric DAC","title":"Electric DAC","text":"{\n    \"ElectricDAC\": [\n        {\n            \"type\": \"ElectricDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        },\n                        \"integer_decisions\": false\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Solvent_DAC\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 4.38\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_Solvent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 939000.00,\n                            \"fixed_om_cost\": 747000.00,\n                            \"variable_om_cost\": 22.00,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/vre.html#Variable-Renewable-Energy-resources-(VRE)","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"","category":"section"},{"location":"User Guide/assets/vre.html#Graph-structure","page":"Variable Renewable Energy resources (VRE)","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"A Variable Renewable Energy asset is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"<img width=\"400\" src=\"../../images/vre.png\" />","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"A Variable Renewable Energy asset is made of:","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"1 Transformation component, representing the VRE transformation.\n1 Edge component:\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"User Guide/assets/vre.html#Attributes","page":"Variable Renewable Energy resources (VRE)","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The structure of the input file for a VRE asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"edge\": {\n            // ... electricity edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/vre.html#Transformation","page":"Variable Renewable Energy resources (VRE)","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"Attribute Type Values Default Description\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Electricity\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.","category":"page"},{"location":"User Guide/assets/vre.html#Edges","page":"Variable Renewable Energy resources (VRE)","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge.\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"MustRunConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool true Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"tip: Default constraint\nDefault constraint for the electricity edge of the VRE is the Capacity constraint.","category":"page"},{"location":"User Guide/assets/vre.html#Example","page":"Variable Renewable Energy resources (VRE)","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"The following input file example shows how to create four existing VRE assets (two utility-scale solar and two onshore wind facilities) and four new VRE assets (one offshore wind, one onshore wind, and two utility-scale solar facilities).","category":"page"},{"location":"User Guide/assets/vre.html","page":"Variable Renewable Energy resources (VRE)","title":"Variable Renewable Energy resources (VRE)","text":"{\n    \"existing_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": true,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    }\n                },\n                \"storage\": {}\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"existing_solar_SE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 22887,\n                            \"capacity_size\": 17.142,\n                            \"existing_capacity\": 8502.2,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_solar_photovoltaic_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"existing_solar_NE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 22887,\n                            \"capacity_size\": 3.63,\n                            \"existing_capacity\": 1629.6,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_solar_photovoltaic_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n\n                    \"id\": \"existing_wind_NE\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 43000,\n                            \"capacity_size\": 86.17,\n                            \"existing_capacity\": 3654.5,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_onshore_wind_turbine_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"existing_wind_MIDAT\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 43000,\n                            \"capacity_size\": 161.2,\n                            \"existing_capacity\": 3231.6,\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_onshore_wind_turbine_1\"\n                                }\n                            }\n                        }\n                    },\n                }\n            ]\n        }\n    ],\n    \"new_vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MaxCapacityConstraint\": true\n                        }\n                    }\n                },\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"NE_offshorewind_class10_moderate_floating_1_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 56095.98976,\n                            \"investment_cost\": 225783.4407,\n                            \"max_capacity\": 32928.493,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_offshorewind_class10_moderate_floating_1_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"SE_utilitypv_class1_moderate_70_0_2_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 15390.48615,\n                            \"investment_cost\": 49950.17548,\n                            \"max_capacity\": 1041244,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_utilitypv_class1_moderate_70_0_2_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"MIDAT_utilitypv_class1_moderate_70_0_2_1\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 15390.48615,\n                            \"investment_cost\": 51590.03227,\n                            \"max_capacity\": 26783,\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_utilitypv_class1_moderate_70_0_2_1\"\n                                }\n                            }\n                        }\n                    },\n                },\n                {\n                    \"id\": \"NE_landbasedwind_class4_moderate_70_3\",\n                    \"edges\": {\n                        \"edge\": {\n                            \"fixed_om_cost\": 34568.125,\n                            \"investment_cost\": 86536.01624,\n                            \"max_capacity\": 65324,\n                            \"end_vertex\": \"elec_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_landbasedwind_class4_moderate_70_3\"\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html#Multisector-modelling-with-MACRO","page":"Multisector Modelling","title":"Multisector modelling with MACRO","text":"","category":"section"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"In this tutorial, we extend the electricity-only model considered in Tutorial 2 to build a multisector model for joint capacity expansion in electricity and hydrogen sectors. ","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"To do this, we scorporate hydrogen and electricity demand from Tutorial 2, and endogeneously model hydrogen production and storage in MACRO.","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Pkg; Pkg.add([\"VegaLite\", \"Plots\"])","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"using Macro\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing Plots\nusing VegaLite","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Create a new case folder named \"onezonemultisector\"","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"if !isdir(\"one_zone_multisector\")\n    mkdir(\"one_zone_multisector\")\n    cp(\"one_zone_electricity_only/assets\",\"one_zone_multisector/assets\", force=true)\n    cp(\"one_zone_electricity_only/settings\",\"one_zone_multisector/settings\", force=true)\n    cp(\"one_zone_electricity_only/system\",\"one_zone_multisector/system\", force=true)\n    cp(\"one_zone_electricity_only/system_data.json\",\"one_zone_multisector/system_data.json\", force=true)\nend","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note: If you have previously run Tutorial 2, make sure that file one_zone_multisector/system/nodes.json is restored to the original version with a textCO_2 price. The definition of the textCO_2 node should look like this:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            },\n            \"price_unmet_policy\":{\n                \"CO2CapConstraint\": 200\n            }    \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add Hydrogen to the list of modeled commodities, modifying file one_zone_multisector/system/commodities.json:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_macro_commodities = Dict(\"commodities\"=> [\"Electricity\", \"NaturalGas\", \"CO2\", \"Hydrogen\"])\n\nopen(\"one_zone_multisector/system/commodities.json\", \"w\") do io\n    JSON3.pretty(io, new_macro_commodities)\nend","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Update file one_zone_multisector/system/time_data.json accordingly:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"new_time_data = Dict(\"PeriodLength\"=>8760,\nnew_time_data = Dict(\"PeriodLength\"=>8760,\n                    \"HoursPerTimeStep\"=>Dict(\"Electricity\"=>1, \"NaturalGas\"=> 1, \"CO2\"=> 1, \"Hydrogen\"=>1),\n                    \"HoursPerSubperiod\"=>Dict(\"Electricity\"=>8760, \"NaturalGas\"=> 8760, \"CO2\"=> 8760, \"Hydrogen\"=>8760)\n                )\n\nopen(\"one_zone_multisector/system/time_data.json\", \"w\") do io\n    JSON3.pretty(io, new_time_data)\nend","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Move separate electricity and hydrogen demand timeseries into the system folder","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/electricity_demand.csv\",\"one_zone_multisector/system/demand.csv\";force=true)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"cp(\"demand_timeseries/hydrogen_demand.csv\",\"one_zone_multisector/system/hydrogen_demand.csv\";force=true)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html#Exercise-1","page":"Multisector Modelling","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"using the existing electricity nodes in one_zone_multisector/system/nodes.json as template, add an Hydrogen demand node, linking it to the hydogen_demand.csv timeseries.","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html#Solution","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"The definition of the new Hydrogen node in one_zone_multisector/system/nodes.json should look like this:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"    {\n        \"type\": \"Hydrogen\",\n        \"global_data\": {\n            \"time_interval\": \"Hydrogen\",\n            \"constraints\": {\n                \"BalanceConstraint\": true\n            }\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"h2_SE\",\n                \"demand\": {\n                    \"timeseries\": {\n                        \"path\": \"system/hydrogen_demand.csv\",\n                        \"header\": \"Demand_H2_z1\"\n                    }\n                }\n            }\n        ]\n    },","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Next, add an electrolyzer asset represented in MACRO as a transformation connecting electricity and hydrogen nodes:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: electrolyzer)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"To include the electrolyzer, create a file one_zone_multisector/assets/electrolyzer.json based on the asset definition in src/model/assets/electrolyzer.jl:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n   \"electrolyzer\": [\n        {   \n            \"type\": \"Electrolyzer\",\n            \"global_data\":{\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\":[\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\":{\n                        \"efficiency_rate\": 0.875111139 // units: # MWh of H2 / MWh of electricity\n                    },\n                    \"edges\":{\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\":0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Include an hydrogen storage resource cluster, represented in MACRO as combination of a compressor transformation (consuming electricity to compress the gas) and a storage node:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: hydrogen_storage)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Add a file one_zone_multisector/assets/h2_storage.json based on the asset definition in  src/model/assets/gasstorage.jlthat should look like this:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"compressor_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"compressor_gas_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\":{\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    },\n                    \"storage\":{\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\":28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html#Exercise-2","page":"Multisector Modelling","title":"Exercise 2","text":"","category":"section"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Following the same steps taken in Tutorial 2, load the input files, generate MACRO model, and solve it using the open-source solver HiGHS.","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html#Solution-2","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"First, load the inputs:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"system = Macro.load_system(\"one_zone_multisector\");","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Then, generate the model:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"model = Macro.generate_model(system)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Finally, solve it using the HiGHS solver:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Macro.set_optimizer(model, HiGHS.Optimizer);\nMacro.optimize!(model)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html#Exercise-3","page":"Multisector Modelling","title":"Exercise 3","text":"","category":"section"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"As in Tutorial 2, print optimized capacity for each asset, the system total cost, and the total emissions. ","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"What do you observe?","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"To explain the results, plot both the electricity generation and hydrogen supply results as done in Tutorial 2 using VegaLite.jl.","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html#Solution-3","page":"Multisector Modelling","title":"Solution","text":"","category":"section"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Optimized capacities are retrieved as follows:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"capacity_results = Macro.get_optimal_asset_capacity(system)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total system cost is:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Macro.objective_value(model)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Total textCO_2 emissions are:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"co2_node = Macro.get_nodes_sametype(system.locations, CO2)[1]\nMacro.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Note that we have achieved lower costs and emissions when able to co-optimize capacity and operation of electricity and hydrogen sectors. In the following, we further investigate these","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"plot_time_interval = 3600:3624","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Here is the electricity generation profile:","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"natgas_power =  Macro.value.(Macro.flow(system.assets[4].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = Macro.value.(Macro.flow(system.assets[5].edge)).data[plot_time_interval]/1e3;\nwind_power = Macro.value.(Macro.flow(system.assets[6].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: elec_generation)","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"During the day, when solar photovoltaic is available, almost all of the electricity generation comes from VREs.","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"Because hydrogen storage is cheaper than batteries, we expect the system to use the electricity generated during the day to operate the electrolyzers to meet the hydrogen demand, storing the excess hydrogen to be used when solar photolvoltaics can not generate electricity.","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"We verify our assumption by making a stacked area plot of the hydrogen supply (hydrogen generation net of the hydrogen stored):","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"electrolyzer_idx = findfirst(isa.(system.assets,Electrolyzer).==1)\nh2stor_idx = findfirst(isa.(system.assets,GasStorage{Hydrogen}).==1)\n\nelectrolyzer_gen =  Macro.value.(Macro.flow(system.assets[electrolyzer_idx].h2_edge)).data[plot_time_interval]/1e3;\nh2stor_charge =  Macro.value.(Macro.flow(system.assets[h2stor_idx].charge_edge)).data[plot_time_interval]/1e3;\nh2stor_discharge = Macro.value.(Macro.flow(system.assets[h2stor_idx].discharge_edge)).data[plot_time_interval]/1e3;\n\nh2_gen = DataFrame( hours = plot_time_interval, \n                    electrolyzer = electrolyzer_gen - h2stor_charge,\n                    storage =  h2stor_discharge)\n\nstack_h2_gen = stack(h2_gen, [:electrolyzer, :storage], variable_name=:resource, value_name=:supply);\n\nh2plot = stack_h2_gen |> \n    @vlplot(\n        :area,\n        x={:hours, title=\"Hours\"},\n        y={:supply, title=\"Hydrogen supply (GWh)\",stack=:zero},\n        color={\"resource:n\", scale={scheme=:category20}},\n        width=400,\n        height=300\n    )","category":"page"},{"location":"Tutorials/tutorial_3_multisector_modelling.html","page":"Multisector Modelling","title":"Multisector Modelling","text":"(Image: h2_generation)","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Tutorial-0:-Getting-Started-with-MACRO","page":"Getting Started","title":"Tutorial 0: Getting Started with MACRO","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"This tutorial will guide you through the steps to install MACRO, a solver, and all the necessary dependencies.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Before installing MACRO, make sure you have the following requirements installed:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Requirements","page":"Getting Started","title":"Requirements","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Julia: you can download it here. \nGit: you can download it here.\n(optional) Jupyter Notebook: you can install it using the following command:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"pip install notebook","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Download-MACRO","page":"Getting Started","title":"Download MACRO","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Note: The following steps assume that you have a GitHub account and that you have already created a token to download the repository. To create a new token, you can go to your GitHub settings and click on \"Generate new token\". Please refer to the GitHub documentation for more information on how to create a token.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Since MACRO is a private repository, you need to have permissions to clone the repository. Once your user has been added to the repository, to clone the repository you can use the following command in your terminal:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"git clone -b <branch-name> https://<username>:<token>@github.com/macroenergy/Macro.git","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Alternatively, you can setup an SSH key pair and use the SSH URL instead of the HTTPS URL.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Installation-steps","page":"Getting Started","title":"Installation steps","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Navigate to the repository:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"cd Macro","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Install MACRO and all the dependencies:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Setting-up-Jupyter-Notebook","page":"Getting Started","title":"Setting up Jupyter Notebook","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Once MACRO is installed, to enable Jupyter Notebook support, you can run the following command:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using IJulia; IJulia.installkernel(\"Macro\", \"--project=@.\")'","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Once the kernel is installed, you can run Jupyter Notebook with one of the following commands:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"jupyter lab","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"or ","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"jupyter notebook","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Testing-the-installation","page":"Getting Started","title":"Testing the installation","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"To test the installation, you can run the following command:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"using Macro","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"in a Jupyter Notebook cell or in a Julia terminal. If everything is set up correctly, you should see no errors and the package should load without any issues.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Running-these-notebooks-on-GitHub-Codespaces-(optional)","page":"Getting Started","title":"Running these notebooks on GitHub Codespaces (optional)","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"One simple way to run the notebooks is by using GitHub Codespaces. ","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Note: A GitHub Codespace is a cloud-based development environment that is hosted on GitHub's infrastructure. Therefore, a GitHub account is required to access it.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"The repository is already configured to be used with GitHub Codespaces, and the following steps will guide you through the process:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Navigate to the repository on GitHub MACRO.\nChange the branch to tutorials.\nClick on the \"Code\" button and then on \"Codespaces\".\n(Optional) GitHub allows you to configure the codespace to use a specific hardware. To do that, click on the three dots on the top right corner of the pop-up dialog and then click on \"New with options\". ","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Note: All personal GitHub accounts are limited to 120 hours of compute time and 15GB of storage per month. You can learn more about the limitations here and here.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"If you want to use the default hardware, skip the previous step and click on \"Create codespace on tutorials\".\nOnce the codespace is open, remember to install the dependencies of MACRO by copying and pasting the following command in the terminal at the bottom of the page:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Once the dependencies are installed, you can run the notebooks by either opening the .ipynb files in the tutorials folder or by copying and pasting the following command in the terminal at the bottom of the page:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"make run-notebooks","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"The last command will open a Jupyterlab instance in the browser. Once the Jupyterlab is open, you can run the notebooks by clicking on the \"Open in Browser\" button that should appear on the bottom left corner of the screen. If a token is required to access the notebook, you can find it in the terminal where you ran the make run-notebooks command. The token is usually located at the end of the URL shown in the terminal. For example:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"http://<codespace-name>-<username>.app.github.dev/lab?token=<token>","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Simply copy and paste the token in the box that appears in the browser. Alternatively, you can simply copy and paste the full URL in the browser's address bar.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"If you also click on the \"Make Public\" button, you will be able to share the notebook with others over the web.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html#Hint:-Speed-up-the-build-time-of-the-codespace-with-a-prebuild","page":"Getting Started","title":"Hint: Speed up the build time of the codespace with a prebuild","text":"","category":"section"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"To speed up the build time of the codespace, you can fork the repository and then setup a Prebuild for your fork. This will allow you to avoid to re-install all the dependencies every time you open a new codespace. To setup a prebuild:","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Fork the repository.\nGo to the Settings of your fork and then click on Codespaces under the Code and automation section.\nClick on Setup prebuild.\nChoose the correct branch (e.g. tutorials). \nSelect if you want to prebuild the codespace on Every push to the branch or On schedule.\nSelect the Region availability for your prebuild.\nClick on Create to finish the setup.","category":"page"},{"location":"Tutorials/tutorial_0_getting_started.html","page":"Getting Started","title":"Getting Started","text":"Once the prebuild is created, every time you open a new codespace from your fork, it will use the prebuild to speed up the build time.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#MACRO-input-files","page":"Input Files","title":"MACRO input files","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"To configure a MACRO case, the user needs to provide a set of input files describing at least the following components:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"System configuration\nAssets/technologies\nModel settings","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"warning: Remove comments from JSON files\nThe comments in the JSON files below are only for the user's reference and should be removed before using them as input for a MACRO case.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#System-configuration","page":"Input Files","title":"System configuration","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The system configuration files are located in the system folder and include the following five files:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"commodities.json: describes the commodities flowing through the system.\ntime_data.json: describes the temporal resolution for each sector in the simulation.\nnodes.json: describes the nodes in the system.\ndemand.csv: describes the demand for each commodity at each node in the system.\nfuel_prices.csv: (supply_data) describes the fuel prices for each commodity at each node in the system.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#commodities.json","page":"Input Files","title":"commodities.json","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The commodities.json file is a JSON file with a list of commodities to include in the case. This is how the file looks like:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"s = read(\"one_zone_electricity_only/system/commodities.json\", String)\nprintln(s)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"To include new commodities, the user just needs to add the new commodity to the list of commodities in the commodities.json file.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#time_data.json","page":"Input Files","title":"time_data.json","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"This file describes the temporal resolution of the simulation. It contains three main parameters:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"PeriodLength: total number of hours in the simulation.\nHoursPerTimeStep: number of hours in each time step.\nHoursPerSubperiod: number of hours in each subperiod, where a subperiod represents a time slice of the simulation used to perform time wrapping for time-coupling constraints (see, for example, Macro.timestepbefore).","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Except for the PeriodLength, all the other parameters need to be provided for each commodity in the system. For example, the following is a complete example of the time_data.json file:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"{\n    \"PeriodLength\": 8760,   // units: hours\n    \"HoursPerTimeStep\": {\n        \"Electricity\": 1,  // units: hours\n        \"NaturalGas\": 1,\n        \"CO2\": 1\n    },\n    \"HoursPerSubperiod\": {\n        \"Electricity\": 8760,  // units: hours\n        \"NaturalGas\": 8760,\n        \"CO2\": 8760\n    }\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"In the example above, the simulation will run for 8760 hours (one year), with one hour per time step and one hour per subperiod for each commodity (single subperiod).","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Units","page":"Input Files","title":"Units","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"In MACRO, everything that is transformed into electricity is expressed in MWh, and all the other commodities are expressed in metric tons:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Time: hours\nElectricity: MWh\nNaturalGas: MWh\nCoal: MWh\nUranium: MWh\nHydrogen: MWh\nCO2: tonnes\nCO2Captured: tonnes\nBiomass: tonnes","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#nodes.json","page":"Input Files","title":"nodes.json","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The nodes.json file is a JSON file with a list of nodes to include in the case. The file is structured as follows:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Each node type (like \"NaturalGas\") is defined as a dictionary with three main components:\ntype: The category of the node (e.g., \"NaturalGas\")\nglobal_data: attributes that apply to all instances of this node type\ntime_interval: time resolution for the time series in the node (needs to match one of the commodities in the time_data.json file)\ninstance_data: A list of specific nodes of this type, each with:\nid: A unique identifier for the node","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"All other fields (e.g, demand, price, constraints, etc.) are optional and will take the default values if not provided. A complete list of the fields that can be included in the nodes.json file can be found here Macro.Node(@ref).","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Here's a simplified example:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"\"nodes\": [\n    {\n        \"type\": \"NaturalGas\",\n        \"global_data\": {\n            \"time_interval\": \"NaturalGas\"\n        },\n        \"instance_data\": [\n            {\n                \"id\": \"natgas_1\",\n                \"price\": {\n                    \"timeseries\": {\n                        \"path\": \"system/fuel_prices.csv\",\n                        \"header\": \"natgas_1\"\n                    }\n                }\n            },\n            {\n                \"id\": \"natgas_2\",\n                \"price\": {\n                    \"timeseries\": {\n                        \"path\": \"system/fuel_prices.csv\",\n                        \"header\": \"natgas_2\"\n                    }\n                }\n            }\n            // ... more instances ...\n        ]\n    }\n]","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"This structure allows you to define multiple nodes of the same type while sharing common settings through global_data. ","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The following is a slightly more complete example of how to include nodes of type \"Electricity\", containing the electricity demand at each node in the system:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"{\n    \"type\": \"Electricity\",\n    \"global_data\": {\n        \"time_interval\": \"Electricity\",\n        \"constraints\": {\n            \"BalanceConstraint\": true,\n        }\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"elec_SE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z1\"\n                }\n            }\n        },\n        {\n            \"id\": \"elec_MIDAT\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z2\"\n                }\n            }\n        },\n        {\n            \"id\": \"elec_NE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z3\"\n                }\n            }\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"As mentioned before, Demand and price time series are linked to columns in the demand and fuel_prices files respectively. The user needs to make sure that the path matches the file location and the header matches the column name in the file. In the case above, for example, the node elec_SE is linked to the column Demand_MW_z1 in the demand.csv file, the node elec_MIDAT to the column Demand_MW_z2, and the node elec_NE to the column Demand_MW_z3.  In particular, the demand.csv file has the following structure:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"using CSV, DataFrames\ndemand_data = CSV.read(\"one_zone_electricity_only/system/demand.csv\", DataFrame)\nfirst(demand_data, 10)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Constraints","page":"Input Files","title":"Constraints","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"One of the main features of MACRO is the ability to include constraints on the system from a pre-defined library of constraints. To include a constraint to a node, the user needs to add the constraint name to the constraints dictionary in the node's global_data or instance_data field.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"For example, to include the BalanceConstraint to the node elec_SE, the user needs to add the following to the nodes.json file:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"\"constraints\": {\n    \"BalanceConstraint\": true\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"With the BalanceConstraint, the model will ensure that the sum of the supply and demand at each node and each time step is zero.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Another example is the MaxNonServedDemandConstraint, which limits the maximum amount of demand that can be unmet in a given time step. To include this constraint to the node elec_SE, the user needs to add the following to the nodes.json file:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"\"max_nds\": [1],  // units: fraction of the demand\n\"price_nsd\": [5000.0], // units: $/MWh\n\"constraints\": {\n    \"MaxNonServedDemandConstraint\": true,\n    \"MaxNonServedDemandPerSegmentConstraint\": true\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"This will add the MaxNonServedDemandConstraint and the MaxNonServedDemandPerSegmentConstraint to the node elec_SE with a maximum non-served demand equal to the demand in each period, and a price of 5000.0 $/MWh for the unmet demand (\"max_nds\" is the fraction of the demand that can be unmet). ","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"A complete list of the constraints available in MACRO can be found in the MACRO Constraint Library section.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Therefore, a complete example of the nodes.json file for the electricity system is the following:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"{\n    \"type\": \"Electricity\",\n    \"global_data\": {\n        \"time_interval\": \"Electricity\",\n        \"max_nsd\": [\n            1   // units: fraction of the demand\n        ],\n        \"price_nsd\": [\n            5000.0 // units: $/MWh\n        ],\n        \"constraints\": {\n            \"BalanceConstraint\": true,\n            \"MaxNonServedDemandConstraint\": true,\n            \"MaxNonServedDemandPerSegmentConstraint\": true\n        }\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"elec_SE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z1\"\n                }\n            }\n        },\n        {\n            \"id\": \"elec_MIDAT\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z2\"\n                }\n            }\n        },\n        {\n            \"id\": \"elec_NE\",\n            \"demand\": {\n                \"timeseries\": {\n                    \"path\": \"system/demand.csv\",\n                    \"header\": \"Demand_MW_z3\"\n                }\n            }\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Time-series-data","page":"Input Files","title":"Time series data","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The time series data for the demand and fuel prices are CSV files with the same format:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"First column: time step\nSecond column and following: value of the time series for each time step","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"For example, the demand.csv file has the following structure:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"using CSV, DataFrames\ndemand_data = CSV.read(\"one_zone_electricity_only/system/demand.csv\", DataFrame)\nfirst(demand_data, 10)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"And the fuel_prices.csv file has a similar structure:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"fuel_prices_data = CSV.read(\"one_zone_electricity_only/system/fuel_prices.csv\", DataFrame)\nfirst(fuel_prices_data, 10)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"where the names of the columns must match the header field in the nodes.json file for the corresponding node.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The units are USD/MWh of natural gas.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Assets/technologies","page":"Input Files","title":"Assets/technologies","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The assets folder contains all the input files for the assets/resources as well as transmission lines and storage technologies that are included in the system.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Each asset or technology is defined in a separate file, and all files share a similar structure, which closely resembles the structure of the nodes in the nodes.json file. Each asset or technology includes the following fields:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"type: The type of the asset or technology.\nglobal_data: Attributes that apply universally to all instances of this asset or technology.\ninstance_data: A list of specific instances of this asset or technology, where each instance contains:\nid: A unique identifier for the asset or technology.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Similarly to the nodes, all the fields defined in the global_data will be shared by all the instances of the asset/technology, and the fields defined in instance_data can be different for each instance.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Note: To understand the structure of the attributes in both global_data and instance_data, the user can refer to the asset definitions in the MACRO Asset Library section. ","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"To familiarize with the structure of the asset/technology input files, let's now see an example of a system with:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"a natural gas power plant, \na solar photovoltaic pannel, \na wind turbine, \na battery.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Natural-gas-power-plant","page":"Input Files","title":"Natural gas power plant","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html#Type-representation","page":"Input Files","title":"Type representation","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The type that defines the natural gas power plant is ThermalPower and can be found in src/model/assets/thermalpower.jl.  Here is a schematic representation of the type:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"(Image: ThermalPower)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"As expected, a natural gas power plant is made of the followning components:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"ng → elec transformation: a transformation object that defines the conversion of the fuel to electricity\nthree edges that connect the asset to the rest of the system:\nfuel edge: natural gas input\nelectricity edge: electricity output\nco2 edge: CO2 output","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Keeping the type representation in mind, we can now see how the asset is defined in the src/model/assets/thermalpower.jl file:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"struct ThermalPower{T} <: AbstractAsset\n    id::AssetId\n    thermal_transform::Transformation\n    elec_edge::Union{Edge{Electricity},EdgeWithUC{Electricity}}\n    fuel_edge::Edge{T}\n    co2_edge::Edge{CO2}\nend","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"In the object above, the id field is a unique identifier for the asset/technology, and the rest of the fields are the implementation of the transformation and the three edges that we saw before in the type representation.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Asset-input-file","page":"Input Files","title":"Asset input file","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The input file for the natural gas power plant is one_zone/assets/naturalgas_power.json. If we open the file, we can notice that, apart from the id field, the rest of the fields match the ones we saw in the type representation:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"{\n    \"transforms\":{\n        // ... thermal_transform fields ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge fields ...\n        },\n        \"fuel_edge\": {\n            // ... fuel_edge fields ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge fields ...\n        }\n    }\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Some important attributes for the transforms field are:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"timedata: time resolution for the time series in the transformation (needs to match one of the commodities in the time_data.json file)\nconstraints: constraints to be applied to the transformation\nemission_rate: emission rate of the transformation (tons of CO2/MWh of natural gas)\nefficiency_rate: efficiency rate of the transformation (MWh of electricity/MWh of natural gas)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"For the edges field, some important attributes are:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"type: type of the commodity in the edge\nstart_vertex: start vertex of the edge\nend_vertex: end vertex of the edge\nunidirectional: whether the edge is unidirectional or bidirectional\nhas_capacity: whether the edge can expand during the optimization\nuc: whether the edge is a unit commitment variable\nconstraints: constraints to be applied to the edge\ninvestment_cost/fixed_om_cost/variable_om_cost: investment, fixed, and variable operating costs for the asset\nexisting_capacity: existing capacity of the asset","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The complete list of fields that can be included in each of the fields transforms, elec_edge, fuel_edge, and co2_edge can be found in the definition of the Edge type in the Macro.Edge(@ref), Macro.EdgeWithUC(@ref), and Transformation type in the Macro.Transformation(@ref) files.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"For example, the following is a complete example of the naturalgas_power.json file:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"{\n    \"NaturalGasPower\": [\n        {\n            \"type\": \"ThermalPower\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\" : {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"uc\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_naturalgas_ccavgcf_moderate_0\",\n                    \"transforms\":{\n                        \"emission_rate\": 0.181048235160161, // units: tons of CO2/MWh of natural gas\n                        \"efficiency_rate\": 0.53624731 // units: MWh of electricity/MWh of natural gas\n                    },\n                    \"edges\":{\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"can_retire\": true,\n                            \"can_expand\": true,\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 78218.72932, // units: $/MW/year (annualized)\n                            \"fixed_om_cost\": 27300, // units: $/MW/year (annualized)\n                            \"variable_om_cost\": 1.74, // units: $/MWh\n                            \"capacity_size\": 573, \n                            \"startup_cost\": 61, // units: $/MW per start\n                            \"startup_fuel\": 0.058614214,  // units: MWh/MW of capacity per start                   \n                            \"min_up_time\": 4, // units: hours\n                            \"min_down_time\": 4, // units: hours\n                            \"ramp_up_fraction\": 1, // units: fraction of the capacity\n                            \"ramp_down_fraction\": 1, // units: fraction of the capacity\n                            \"min_flow_fraction\": 0.3 // units: fraction of the capacity\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"error: Remove comments from JSON files\nThe comments in the JSON file above are only for the user's reference and should be removed before using them as input for a MACRO case.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Solar-photovoltaic-pannel-and-wind-turbine","page":"Input Files","title":"Solar photovoltaic pannel and wind turbine","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Since the solar photovoltaic pannel and the wind turbine are very similar, the type that defines them is called Vre and can be found in src/model/assets/vre.jl.  Here is a schematic representation of the type:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"(Image: Vre)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"As can be seen, a solar photovoltaic pannel and a wind turbine are made of the following components:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"solar/wind energy → electricity transformation: a transformation object that defines the conversion of the energy to electricity\nsingle edge that connects the asset to the rest of the system:\nelectricity edge: electricity output","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The asset is therefore defined as follows:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"struct VRE <: AbstractAsset\n    id::AssetId\n    energy_transform::Transformation\n    elec_edge::Edge{Electricity}\nend","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The input file for variable renewable resources is one_zone/assets/solar_pv.json. If we open the file, we can notice the usual structure for nodes and assets that we should be familiar with by now:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"type: type of the asset/technology\nglobal_data: settings that apply to all instances of this asset/technology\ninstance_data: a list of specific assets/technologies of this type, each with:\nid: a unique identifier for the asset/technology","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"In the global_data and instance_data fields, we can notice that we have a transforms field that contains the attributes for the energy_transform object, and an edges field that contains the attributes for the edge object that connects the asset to the electricity network:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"\"transforms\": {\n    // ... energy_transform fields ...\n}\n\"edges\": {\n    // ... edge fields ...\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"For example, the following is a complete example of the vre.json file that defines a solar pv and a wind turbine:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"{\n    \"vre\": [\n        {\n            \"type\": \"VRE\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"Electricity\"\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_utilitypv_class1_moderate_70_0_2_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"fixed_om_cost\": 15390.48615,\n                            \"investment_cost\": 49950.17548,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_utilitypv_class1_moderate_70_0_2_1\"\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    \"id\": \"SE_landbasedwind_class4_moderate_70_1\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"fixed_om_cost\": 34568.125,\n                            \"investment_cost\": 68099.00274,\n                            \"end_vertex\": \"elec_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_landbasedwind_class4_moderate_70_1\"\n                                }\n                            }\n                        }\n                    },\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Something to notice is that the availability field is a time series that needs to be provided for each instance of the VREasset. This time series describes the availability of the resource at each time step. This attribute looks very similar to the demand field in the nodes input file, where the path field is used to link to the time series data in a csv file, and the header field is used to match the column name in the file.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"This is an example of the availability.csv file:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"availability_data = CSV.read(\"one_zone_electricity_only/assets/availability.csv\", DataFrame)\nfirst(availability_data, 10)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The units are fraction of installed capacity.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"using Pkg; Pkg.add(\"Plots\")\nusing Plots\np = Plots.plot(availability_data[:,1], availability_data[:,2], label=\"Solar PV\", xlabel=\"Time (h)\", ylabel=\"Availability\")\nPlots.plot!(p, availability_data[:,1], availability_data[:,3], label=\"Wind\")","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Battery-(Electricity)","page":"Input Files","title":"Battery (Electricity)","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Finally, let's see how storage technologies are defined in MACRO and how to include them in the system.","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"A battery is defined by the following components:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"battery_storage\ncharge_edge: a charge edge that connects the battery to the electricity network\ndischarge_edge: a discharge edge that connects the battery to the electricity network","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"(Image: Battery)","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"The input file for the battery is one_zone/assets/battery.json. Again, if we open the file, we can recognize the usual structure for nodes and assets:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"type: type of the asset/technology\nglobal_data: settings that apply to all instances of this asset/technology\ninstance_data: a list of specific assets/technologies of this type, each with:\nid: a unique identifier for the asset/technology","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"This is an example of the battery.json file: ```json {     \"elecstor\": [         {             \"type\": \"Battery\",             \"globaldata\": {                 \"edges\": {                     \"dischargeedge\": {                         \"type\": \"Electricity\",                         \"unidirectional\": true,                         \"hascapacity\": true,                         \"canexpand\": true,                         \"canretire\": false,                         \"constraints\": {                             \"CapacityConstraint\": true,                             \"StorageDischargeLimitConstraint\": true                         }                     },                     \"chargeedge\": {                         \"type\": \"Electricity\",                         \"unidirectional\": true,                         \"hascapacity\": false                     }                 },                 \"storage\": {                     \"commodity\": \"Electricity\",                     \"canexpand\": true,                     \"canretire\": false,                     \"constraints\": {                         \"StorageCapacityConstraint\": true,                         \"StorageSymmetricCapacityConstraint\": true,                         \"BalanceConstraint\": true                     }                 }             },             \"instancedata\": [                 {                     \"id\": \"batterySE\",                     \"edges\": {                         \"dischargeedge\": {                             \"endvertex\": \"elecSE\",                             \"existingcapacity\" : 0.0,                             \"fixedomcost\" : 4536.98,                             \"investmentcost\": 17239.56121,                             \"variableomcost\": 0.15,                             \"efficiency\": 0.92                         },                         \"chargeedge\": {                             \"startvertex\": \"elecSE\",                             \"efficiency\": 0.92,                             \"variableomcost\": 0.15                         }                     },                     \"storage\":{                         \"existingcapacitystorage\": 0.0,                         \"fixedomcoststorage\": 2541.19, // units: USD/MWh-year (annualized)                         \"investmentcoststorage\": 9656.002735, // units: USD/MWh-year (annualized)                         \"maxduration\": 10, // units: hours                         \"min_duration\": 1 // units: hours                     }                 }             ]         }     ] }","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Something to notice is that both the edges and storage fields contain a constraints field. This is an example of a constraint that can be applied to a battery:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"StorageCapacityConstraint: ensures that the capacity of the battery is not exceeded\nStorageSymmetricCapacityConstraint: ensures that simultaneous charge and discharge do not exceed the capacity of the battery\nBalanceConstraint: ensures that the battery contributes to the demand balance of the system","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Model-settings","page":"Input Files","title":"Model settings","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"This folder contains the macro_settings.json file, which is used to set the model settings and tune the model. It currently contains only one setting:","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"ScalingFactor = true/false: if true, the model will scale the input data to the following units: MWh → GWh, tons → ktons, $\\/MWh → M$\\/GWh, $\\/ton → M$\\/kton","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html#Summary","page":"Input Files","title":"Summary","text":"","category":"section"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"In this tutorial, we have seen how to define a system in MACRO by providing the input files in the system and assets folders. ","category":"page"},{"location":"Tutorials/tutorial_1_input_files.html","page":"Input Files","title":"Input Files","text":"Almost all the files except for time series data are JSON files, which allow for a high degree of customization of the system. \nTime series data are provided in CSV files, where the first column is the time step and the following columns are the time series for each node/asset.\nBoth nodes and assets have a similar structure:\ntype: type of the node/asset\nglobal_data: settings that apply to all instances of the node/asset\ninstance_data: a list of specific nodes/assets of this type, each with:\nid: a unique identifier for the node/asset\nwhich allows to define multiple instances of the same node/asset type while sharing common settings through the global_data field.\nEach asset is defined by a set of edges, transformations, and storage objects, which are defined in the edges, transforms, and storage fields respectively.\nAll the fields in the global_data and instance_data fields can be customized, and the complete list of fields that can be included in each of the fields transforms, edges, and storage can be found in the definition of the Edge, Transformation, and Storage types in the Macro.Edge(@ref), Macro.Transformation(@ref), and Macro.Storage(@ref) files.\nAll the constraints available in MACRO can be found in the MACRO Constraint Library section.\nAll the assets available in MACRO can be found in the MACRO Asset Library section, where each file contains the definition of the asset type. ","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Thermal-Hydrogen-Plant-(with-and-without-CCS)","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html#Graph-structure","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant (with and without CCS) is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"<img width=\"400\" src=\"../../images/smr.png\" />","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"A thermal hydrogen plant (with and without CCS) is made of:","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"1 Transformation component, representing the thermal hydrogen plant (with and without CCS).\n5 Edge components:\n1 incoming Fuel Edge, representing the fuel supply. \n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production. This edge can have unit commitment operations.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured (only if CCS is present).","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Attributes","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The structure of the input file for a ThermalHydrogen asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Transformation","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elecMWh_h2\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_h2MWh_fuel\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2MWh_fuel\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2MWh_fuel","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"tip: Default constraints\nThe default constraint for the transformation part of the ThermalHydrogen asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Flow-equations","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: ThermalHydrogen\nNote: Fuel is the type of the fuel being converted.beginaligned\nphi_h2 = phi_fuel cdot epsilon_efficiency \nphi_elec = phi_h2 cdot epsilon_elec_consumption \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Edges","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"warning: Asset expansion\nAs a modeling decision, only the Hydrogen and Fuel edges are allowed to expand. Therefore, both the has_capacity and constraints attributes can only be set for those edges. For all the other edges, these attributes are pre-set to false and to an empty list respectively to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"warning: Directionality\nThe unidirectional attribute is set to true for all the edges.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"note: Unit commitment and default constraints\nThe Hydrogen edge can have unit commitment operations. To enable it, the user needs to set the uc attribute to true. The default constraints for unit commitment case are the following:Capacity constraint\nRamping limits constraint\nMinimum up and down time constraintIn case of no unit commitment, the uc attribute is set to false and the default constraints are the following:Capacity constraint","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Hydrogen\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Hydrogen and Fuel edges).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nmin_down_time Int64 Int64 0 Minimum amount of time the edge has to remain in the shutdown state before starting up again. Note: add the MinDownTimeConstraint to the constraints dictionary to activate this constraint.\nmin_up_time Int64 Int64 0 Minimum amount of time the edge has to remain in the committed state. Note: add the MinUpTimeConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nstartup_cost Float64 Float64 0.0 Cost per MW of capacity to start a generator (USD/MW per start).\nstartup_fuel Float64 Float64 0.0 Startup fuel use per MW of capacity (MWh/MW per start).\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html#Example","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"The following is an example of the input file for a ThermalHydrogenCCS asset that creates three ThermalHydrogenCCS assets, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"{\n    \"NaturalGasH2ATRCCS\": [\n        {\n            \"type\": \"ThermalHydrogenCCS\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"efficiency_rate\": 0.769121482,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"efficiency_rate\": 0.769121482,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_ATR_wCCS_94pct\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.003794329,\n                        \"efficiency_rate\": 0.769121482,\n                        \"electricity_consumption\": 0.101574,\n                        \"capture_rate\": 0.065193472\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_ATR_wCCS_94pct\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 57497.91679,\n                            \"fixed_om_cost\": 23292.27286,\n                            \"variable_om_cost\": 9.262366684,\n                            \"capacity_size\": 1082.95,\n                            \"startup_cost\": 0.253936008,\n                            \"min_up_time\": 22,\n                            \"min_down_time\": 12,\n                            \"ramp_up_fraction\": 0.5,\n                            \"ramp_down_fraction\": 0.5,\n                            \"min_flow_fraction\": 0.85\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/thermalhydrogen.html","page":"Thermal Hydrogen Plant (with and without CCS)","title":"Thermal Hydrogen Plant (with and without CCS)","text":"","category":"page"},{"location":"References/utilities.html#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"References/utilities.html","page":"Utilities","title":"Utilities","text":"Macro.get_value_and_keys\nMacro.set_value\nMacro.timestepbefore\nMacro.struct_info\nMacro.get_value","category":"page"},{"location":"References/utilities.html#Macro.get_value_and_keys","page":"Utilities","title":"Macro.get_value_and_keys","text":"get_value_and_keys(dict::AbstractDict, target_key::Symbol, keys=Symbol[])\n\nRecursively searches for a target key in a dictionary and returns a list of  tuples containing the value associated with the target key and the keys leading  to it. This function is used to replace the path to a timeseries file with the actual vector of data.\n\nArguments\n\ndict::AbstractDict: The (nested) dictionary to search in.\ntarget_key::Symbol: The key to search for.\nkeys=Symbol[]: (optional) The keys leading to the current dictionary.\n\nReturns\n\nvalue_keys: A list of tuples, where each tuple contains                - the value associated with the target key               - the keys leading to it in the nested dictionary.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value_and_keys(dict, :b) # returns [(1, [:a, :b]), (2, [:a, :c, :b])]\n\nWhere the first element of the tuple is the value of the key :b and the second  element is the list of keys to reach that value.\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#Macro.set_value","page":"Utilities","title":"Macro.set_value","text":"set_value(dict::AbstractDict, keys::Vector{Symbol}, new_value)\n\nSet the value of a nested dictionary given a list of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary to modify.\nkeys::Vector{Symbol}: A list of keys representing the path to the value to \n\nbe modified.\n\nnew_value: The new value to set.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nset_value(dict, [:a, :b], 3)\nget_value(dict, [:a, :b]) # returns 3\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#Macro.timestepbefore","page":"Utilities","title":"Macro.timestepbefore","text":"timestepbefore(t::Int, h::Int,subperiods::Vector{StepRange{Int64,Int64})\n\nDetermines the time step that is h steps before index t in subperiod p with circular indexing.\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#Macro.struct_info","page":"Utilities","title":"Macro.struct_info","text":"struct_info(t::Type{T}) where T\n\nReturn a vector of tuples with the field names and types of a struct.\n\n\n\n\n\n","category":"function"},{"location":"References/utilities.html#Macro.get_value","page":"Utilities","title":"Macro.get_value","text":"get_value(dict::AbstractDict, keys::Vector{Symbol})\n\nGet the value from a dictionary based on a sequence of keys.\n\nArguments\n\ndict::AbstractDict: The dictionary from which to retrieve the value.\nkeys::Vector{Symbol}: The sequence of keys to traverse the dictionary.\n\nReturns\n\nThe value retrieved from the dictionary based on the given keys.\n\nExamples\n\ndict = Dict(:a => Dict(:b => 1, :c => Dict(:b => 2)))\nget_value(dict, [:a, :b]) # returns 1\nget_value(dict, [:a, :c, :b]) # returns 2\n\n\n\n\n\n","category":"function"},{"location":"References/macro_objects.html#MACRO-Objects","page":"Macro Objects","title":"MACRO Objects","text":"","category":"section"},{"location":"References/macro_objects.html#Vertex","page":"Macro Objects","title":"Vertex","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"Macro.@AbstractVertexBaseAttributes","category":"page"},{"location":"References/macro_objects.html#Macro.@AbstractVertexBaseAttributes","page":"Macro Objects","title":"Macro.@AbstractVertexBaseAttributes","text":"@AbstractVertexBaseAttributes()\n\nA macro that defines the base attributes for all vertex types in the network model.\n\n# Generated Fields\n- id::Symbol: Unique identifier for the vertex\n- timedata::TimeData: Time-related data for the vertex\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the vertex\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the vertex\n\nThis macro is used to ensure consistent base attributes across all vertex types in the network.\n\n\n\n\n\n","category":"macro"},{"location":"References/macro_objects.html#Node","page":"Macro Objects","title":"Node","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"Macro.Node","category":"page"},{"location":"References/macro_objects.html#Macro.Node","page":"Macro Objects","title":"Macro.Node","text":"Node{T} <: AbstractVertex\n\nA mutable struct representing a node in a network, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the node\n- timedata::TimeData: Time-related data for the node\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Balance equations data\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the node\n- operation_expr::Dict: Operational JuMP expressions for the node\n\n# Fields\n- demand::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of demand values\n- max_nsd::Vector{Float64}: Maximum allowed non-served demand for each segment\n- max_supply::Vector{Float64}: Maximum supply for each segment\n- non_served_demand::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing unmet demand\n- policy_budgeting_vars::Dict: Policy budgeting variables for constraints\n- policy_slack_vars::Dict: Policy slack variables for constraints\n- price::Union{Vector{Float64},Dict{Int64,Float64}}: Time series of prices\n- price_nsd::Vector{Float64}: Penalties for non-served demand by segment\n- price_supply::Vector{Float64}: Supply costs by segment\n- price_unmet_policy::Dict{DataType,Float64}: Mapping of policy types to penalty costs\n- rhs_policy::Dict{DataType,Float64}: Mapping of policy types to right-hand side values\n- supply_flow::Union{JuMPVariable,Matrix{Float64}}: JuMP variables or matrix representing supply flows\n\nNote: Base attributes are inherited from AbstractVertex via @AbstractVertexBaseAttributes macro.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#Transformation","page":"Macro Objects","title":"Transformation","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"Macro.Transformation","category":"page"},{"location":"References/macro_objects.html#Macro.Transformation","page":"Macro Objects","title":"Macro.Transformation","text":"Transformation <: AbstractVertex\n\nA mutable struct representing a transformation vertex in a network model, which models a conversion process between different commodities or energy forms.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the transformation\n- timedata::TimeData: Time-related data for the transformation\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping stoichiometric equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the transformation\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the transformation\n\nTransformations are used to model conversion processes between different commodities, such as power plants \nconverting fuel to electricity or electrolyzers converting electricity to hydrogen. The `balance_data` field \ntypically contains conversion efficiencies and other relationships between input and output flows.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#Storage","page":"Macro Objects","title":"Storage","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"Macro.Storage","category":"page"},{"location":"References/macro_objects.html#Macro.Storage","page":"Macro Objects","title":"Macro.Storage","text":"Storage{T} <: AbstractVertex\n\nA mutable struct representing a storage vertex in a network model, parameterized by commodity type T.\n\n# Inherited Attributes\n- id::Symbol: Unique identifier for the storage\n- timedata::TimeData: Time-related data for the storage\n- balance_data::Dict{Symbol,Dict{Symbol,Float64}}: Dictionary mapping balance equation IDs to coefficients\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the storage\n- operation_expr::Dict: Dictionary storing operational JuMP expressions for the storage\n\n# Fields\n- can_expand::Bool: Whether storage capacity can be expanded\n- can_retire::Bool: Whether storage capacity can be retired\n- capacity_storage::Union{AffExpr,Float64}: Total available storage capacity\n- charge_edge::Union{Nothing,AbstractEdge}: `Edge` representing charging flow\n- charge_discharge_ratio::Float64: Ratio between charging and discharging rates\n- discharge_edge::Union{Nothing,AbstractEdge}: `Edge` representing discharging flow\n- existing_capacity_storage::Float64: Initial installed storage capacity\n- fixed_om_cost_storage::Float64: Fixed operation and maintenance costs\n- investment_cost_storage::Float64: Cost per unit of new storage capacity\n- max_capacity_storage::Float64: Maximum allowed storage capacity\n- max_duration::Float64: Maximum storage duration in hours\n- min_capacity_storage::Float64: Minimum required storage capacity\n- min_duration::Float64: Minimum storage duration in hours\n- min_outflow_fraction::Float64: Minimum discharge rate as fraction of capacity\n- min_storage_level::Float64: Minimum storage level as fraction of capacity\n- max_storage_level::Float64: Maximum storage level as fraction of capacity\n- new_capacity_storage::Union{JuMPVariable,Float64}: New storage capacity to be built\n- ret_capacity_storage::Union{JuMPVariable,Float64}: Storage capacity to be retired\n- spillage_edge::Union{Nothing,AbstractEdge}: Edge representing spillage/losses (e.g. hydro reservoirs)\n- storage_level::Union{JuMPVariable,Vector{Float64}}: Storage level at each timestep\n- storage_loss_fraction::Float64: Fraction of stored commodity lost per timestep\n\nStorage vertices represent facilities that can store commodities over time, such as batteries, \npumped hydro, or gas storage. They can charge (store) and discharge (release) commodities, \nsubject to capacity and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#Edge-(with-and-without-UC)","page":"Macro Objects","title":"Edge (with and without UC)","text":"","category":"section"},{"location":"References/macro_objects.html","page":"Macro Objects","title":"Macro Objects","text":"Macro.Edge\nMacro.EdgeWithUC","category":"page"},{"location":"References/macro_objects.html#Macro.Edge","page":"Macro Objects","title":"Macro.Edge","text":"Edge{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge in a network model, parameterized by commodity type T.\n\n# Fields\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity `T` through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: Cost per unit of new capacity\n- loss_fraction::Float64: Fraction of flow lost during transmission\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\nEdges represent connections between vertices that allow commodities to flow between them. \nThey can model physical infrastructure like pipelines, transmission lines, or logical \nconnections with associated costs, capacities, and operational constraints.\n\n\n\n\n\n","category":"type"},{"location":"References/macro_objects.html#Macro.EdgeWithUC","page":"Macro Objects","title":"Macro.EdgeWithUC","text":"EdgeWithUC{T} <: AbstractEdge{T}\n\nA mutable struct representing an edge with unit commitment constraints in a network model, parameterized by commodity type T.\n\n# Inherited Attributes from Edge\n- id::Symbol: Unique identifier for the edge\n- timedata::TimeData: Time-related data for the edge\n- start_vertex::AbstractVertex: Starting vertex of the edge\n- end_vertex::AbstractVertex: Ending vertex of the edge\n- availability::Vector{Float64}: Time series of availability factors\n- can_expand::Bool: Whether edge capacity can be expanded\n- can_retire::Bool: Whether edge capacity can be retired\n- capacity::Union{AffExpr,Float64}: Total available capacity\n- capacity_size::Float64: Size factor for resource cluster\n- constraints::Vector{AbstractTypeConstraint}: List of constraints applied to the edge\n- distance::Float64: Physical distance of the edge\n- existing_capacity::Float64: Initial installed capacity\n- fixed_om_cost::Float64: Fixed operation and maintenance costs\n- flow::Union{JuMPVariable,Vector{Float64}}: Flow of commodity through the edge at each timestep\n- has_capacity::Bool: Whether the edge has capacity variables\n- integer_decisions::Bool: Whether capacity decisions must be integer\n- investment_cost::Float64: Cost per unit of new capacity\n- loss_fraction::Float64: Fraction of flow lost during transmission\n- max_capacity::Float64: Maximum allowed capacity\n- min_capacity::Float64: Minimum required capacity\n- min_flow_fraction::Float64: Minimum flow as fraction of capacity\n- new_capacity::Union{JuMPVariable,Float64}: JuMP variable representing new capacity built\n- ramp_down_fraction::Float64: Maximum ramp-down rate as fraction of capacity\n- ramp_up_fraction::Float64: Maximum ramp-up rate as fraction of capacity\n- ret_capacity::Union{JuMPVariable,Float64}: JuMP variable representing capacity to be retired\n- unidirectional::Bool: Whether flow is restricted to one direction\n- variable_om_cost::Float64: Variable operation and maintenance costs per unit flow\n\n# Fields specific to EdgeWithUC\n- min_down_time::Int64: Minimum time units that must elapse between shutting down and starting up\n- min_up_time::Int64: Minimum time units that must elapse between starting up and shutting down\n- startup_cost::Float64: Cost incurred when starting up the unit\n- startup_fuel::Float64: Amount of fuel consumed during startup\n- startup_fuel_balance_id::Symbol: Identifier for the balance constraint tracking startup fuel\n- ucommit::Union{JuMPVariable,Vector{Float64}}: Binary commitment state variables\n- ushut::Union{JuMPVariable,Vector{Float64}}: Binary shutdown decision variables\n- ustart::Union{JuMPVariable,Vector{Float64}}: Binary startup decision variables\n\nEdgeWithUC extends Edge to model units that have operational constraints related to their on/off status. It includes variables and parameters\nfor tracking unit commitment decisions and associated costs/constraints.\n\n\n\n\n\n","category":"type"},{"location":"User Guide/assets/gasstorage.html#Gas-Storage","page":"Gas Storage","title":"Gas Storage","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html#Graph-structure","page":"Gas Storage","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"A storage for a gas commodity is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"<img width=\"400\" src=\"../../images/hydrogen_storage.png\" />","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"A gas storage asset is made of:","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"1 Storage component, representing the gas storage process. The gas type is set using the commodity attribute (see table below).\n1 Transformation component, representing the gas compressor.\n4 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption for powering the compressor.\n1 incoming Gas Edge, representing the gas flow into the storage asset through the compressor.\n1 internal Gas Edge, representing the gas flow between the compressor and the storage. This can be seen as a charge edge for the storage component.\n1 outgoing Gas Edge, representing the discharged edge of the gas storage.","category":"page"},{"location":"User Guide/assets/gasstorage.html#Attributes","page":"Gas Storage","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The structure of the input file for a gas storage asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"compressor_elec_edge\": {\n            // ... compressor_elec_edge-specific attributes ...\n        },\n        \"compressor_gas_edge\": {\n            // ... compressor_gas_edge-specific attributes ...\n        },\n        \"charge_edge\": {\n            // ... storage_gas_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_gas_edge-specific attributes ...\n        }\n    },\n    \"storage\":{\n        // ... storage-specific attributes ...\n    }\n}","category":"page"},{"location":"User Guide/assets/gasstorage.html#Transformation","page":"Gas Storage","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nelectricity_consumption epsilon_elec_consumption Float64 Float64 0.0 MWh_elecMWh_gas","category":"page"},{"location":"User Guide/assets/gasstorage.html#Flow-equations","page":"Gas Storage","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"note: GasStorage\nNote: c is the type of the commodity being stored. The following equation is related to the compressor.beginaligned\nphi_elec = phi_c cdot epsilon_elec_consumption \nendalignedLook also at the \"Efficiency\" tip below for more information on the efficiency of charging/discharging process.","category":"page"},{"location":"User Guide/assets/gasstorage.html#Edges","page":"Gas Storage","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nefficiency Float64 Number in [0,1] 1.0 Efficiency of the charging/discharging process.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"tip: Efficiency\nThe efficiency of the charging/discharging process can be set in the charge_edge and discharge_edge parts of the input file. These parameters are used, for example, in the Balance constraint to balance the charge and discharge flows. ","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"tip: Default constraints\nThe only default constraint for the edges of the gas storage asset is the Capacity constraint applied to both the charge and discharge edges.","category":"page"},{"location":"User Guide/assets/gasstorage.html#Storage-component","page":"Gas Storage","title":"Storage component","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The definition of the Storage object can be found here Macro.Storage.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"Attribute Type Values Default Description\ncommodity String Any MACRO commodity type Required Commodity being stored. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any MACRO constraint type for storage BalanceConstraint, StorageCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity_storage Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost_storage Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost_storage Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nmax_capacity_storage Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_capacity_storage Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nstorage_loss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"tip: Default constraints\nAs noted in the above table, the default constraints for the storage component of the gas storage are the following:Balance constraint\nStorage capacity constraint","category":"page"},{"location":"User Guide/assets/gasstorage.html#Example","page":"Gas Storage","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"The following input file example shows how to create a hydrogen storage asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"User Guide/assets/gasstorage.html","page":"Gas Storage","title":"Gas Storage","text":"{\n    \"h2stor\": [\n        {\n            \"type\": \"GasStorage\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"has_capacity\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"charge_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true\n                        }\n                    },\n                    \"compressor_elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"compressor_gas_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Hydrogen\",\n                    \"can_expand\": true,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"StorageCapacityConstraint\": true,\n                        \"BalanceConstraint\": true,\n                        \"MinStorageLevelConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_MIDAT\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                },\n                {\n                    \"id\": \"NE_Above_ground_storage\",\n                    \"transforms\": {\n                        \"electricity_consumption\": 0.018029457\n                    },\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 0.0,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1\n                        },\n                        \"charge_edge\": {\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 3219.236569,\n                            \"fixed_om_cost\": 0.0,\n                            \"variable_om_cost\": 0.0,\n                            \"efficiency\": 1.0\n                        },\n                        \"compressor_gas_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"compressor_elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        }\n                    },\n                    \"storage\": {\n                        \"investment_cost_storage\": 873.013307,\n                        \"fixed_om_cost_storage\": 28.75810056,\n                        \"storage_loss_fraction\": 0.0,\n                        \"min_storage_level\": 0.3\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/powerline.html#Power-Line","page":"Power Line","title":"Power Line","text":"","category":"section"},{"location":"User Guide/assets/powerline.html#Graph-structure","page":"Power Line","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"A power line is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"<img width=\"400\" src=\"../../images/powerline.png\" />","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"A power line asset is very simple and is made of:","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"1 Edge component:\n1 Electricity Edge, representing the flow of electricity between two nodes.","category":"page"},{"location":"User Guide/assets/powerline.html#Attributes","page":"Power Line","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"The structure of the input file for a power line asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"{\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/powerline.html#Edges","page":"Power Line","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity flowing through the edge.\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ndistance Float64 Float64 0.0 Distance between the start and end vertex of the edge.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"tip: Default constraints\nThe default constraint for power lines is the Capacity constraint. ","category":"page"},{"location":"User Guide/assets/powerline.html#Example","page":"Power Line","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"The following is an example of the input file for a power line asset that creates two power lines, one connecting the SE and MIDAT regions, and one connecting the MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/powerline.html","page":"Power Line","title":"Power Line","text":"{\n    \"line\": [\n        {\n            \"type\": \"PowerLine\",\n            \"global_data\": {\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"has_capacity\": true,\n                        \"unidirectional\": false,\n                        \"can_expand\": true,\n                        \"can_retire\": false,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"MaxCapacityConstraint\": true\n                        }\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_to_MIDAT\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\",\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"distance\": 491.4512001,\n                            \"existing_capacity\": 5552,\n                            \"max_capacity\": 33312,\n                            \"investment_cost\": 35910,\n                            \"loss_fraction\": 0.04914512\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_to_NE\",\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\",\n                            \"end_vertex\": \"elec_NE\",\n                            \"distance\": 473.6625536,\n                            \"existing_capacity\": 1915,\n                            \"max_capacity\": 11490,\n                            \"investment_cost\": 55639,\n                            \"loss_fraction\": 0.047366255\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/hydropower.html#Hydro-Reservoir","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html#Graph-structure","page":"Hydro Reservoir","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydroelectric reservoir is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"<img width=\"400\" src=\"../../images/hydrores.png\" />","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"A hydroelectric reservoir asset is made of:","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"1 Storage component, representing the hydroelectric reservoir.\n3 Edge components:\n1 incoming Electricity Edge, representing the electricity supply.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing Electricity Edge, representing the spillage.","category":"page"},{"location":"User Guide/assets/hydropower.html#Flow-equation","page":"Hydro Reservoir","title":"Flow equation","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"In the following equation, phi is the flow of the commodity.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"note: HydroRes\nbeginaligned\nphi_in = phi_out + phi_spill \nendaligned","category":"page"},{"location":"User Guide/assets/hydropower.html#Attributes","page":"Hydro Reservoir","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The structure of the input file for a hydroelectric reservoir asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"inflow_edge\": {\n            // ... inflow_edge-specific attributes ...\n        },\n        \"discharge_edge\": {\n            // ... discharge_edge-specific attributes ...\n        },\n        \"spillage_edge\": {\n            // ... spillage_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/hydropower.html#Storage-component","page":"Hydro Reservoir","title":"Storage component","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The definition of the Storage object can be found here Macro.Storage.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Attribute Type Values Default Description\ncommodity String Electricity Required Commodity being stored.\nconstraints Dict{String,Bool} Any MACRO constraint type for storage BalanceConstraint, StorageCapacityConstraint List of constraints applied to the storage. E.g. {\"BalanceConstraint\": true}.\ncan_expand Bool Bool false Whether the storage is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the storage is eligible for capacity retirement.\ncharge_discharge_ratio Float64 Float64 1.0 Ratio between charging and discharging rates.\nexisting_capacity_storage Float64 Float64 0.0 Initial installed storage capacity (MWh).\nfixed_om_cost_storage Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MWh-year).\ninvestment_cost_storage Float64 Float64 0.0 Annualized investment cost of the energy capacity for a storage technology (USD/MWh-year).\nmax_capacity_storage Float64 Float64 Inf Maximum allowed storage capacity (MWh).\nmax_duration Float64 Float64 0.0 Maximum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_capacity_storage Float64 Float64 0.0 Minimum allowed storage capacity (MWh).\nmin_duration Float64 Float64 0.0 Minimum ratio of installed energy to discharged capacity that can be installed (hours).\nmin_outflow_fraction Float64 Float64 0.0 Minimum outflow as a fraction of capacity.\nmin_storage_level Float64 Float64 0.0 Minimum storage level as a fraction of capacity.\nmax_storage_level Float64 Float64 1.0 Maximum storage level as a fraction of capacity.\nstorage_loss_fraction Float64 Number in [0,1] 0.0 Fraction of stored commodity lost per timestep.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Default constraints\nThe default constraints for the storage component of the hydroelectric reservoir are the following:Balance constraint","category":"page"},{"location":"User Guide/assets/hydropower.html#Edges-(discharge_edge,-inflow_edge,-spillage_edge)","page":"Hydro Reservoir","title":"Edges (discharge_edge, inflow_edge, spillage_edge)","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Asset expansion\nAs a modeling decision, only charge and discharge edges are allowed to expand. Therefore, the has_capacity attribute can only be set for the discharge_edge and inflow_edge. For the spillage edge, this attribute is pre-set to false to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"warning: Directionality\nAll the three edges are unidirectional by construction.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"All the edges have the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"Attribute Type Values Default Description\ntype String Electricity Required Commodity of the edge.\nstart_vertex String Any electricity node id present in the system Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any electricity node id present in the system Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"tip: Default constraints\nDefault constraints for the edges of the hydroelectric reservoir are only applied to the inflow edge. These constraints are:Must run constraint\nStorage charge discharge ratio constraint","category":"page"},{"location":"User Guide/assets/hydropower.html#Example","page":"Hydro Reservoir","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"The following input file example shows how to create a hydroelectric reservoir asset in each of the three zones SE, MIDAT and NE.","category":"page"},{"location":"User Guide/assets/hydropower.html","page":"Hydro Reservoir","title":"Hydro Reservoir","text":"{\n    \"hydrores\": [\n        {\n            \"type\": \"HydroRes\",\n            \"global_data\": {\n                \"edges\": {\n                    \"discharge_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"inflow_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"start_vertex\": \"hydro_source\",\n                        \"has_capacity\": true,\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"constraints\": {\n                            \"MustRunConstraint\": true\n                        }\n                    },\n                    \"spill_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"end_vertex\": \"hydro_source\",\n                        \"can_expand\": false,\n                        \"can_retire\": false,\n                        \"has_capacity\": false\n                    }\n                },\n                \"storage\": {\n                    \"commodity\": \"Electricity\",\n                    \"can_expand\": false,\n                    \"can_retire\": false,\n                    \"constraints\": {\n                        \"MinStorageOutflowConstraint\": true,\n                        \"StorageChargeDischargeRatioConstraint\": true,\n                        \"BalanceConstraint\": true\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"MIDAT_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"capacity_size\": 29.853,\n                            \"existing_capacity\": 2806.182,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.83,\n                            \"ramp_up_fraction\": 0.83,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.109311313,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                },\n                {\n                    \"id\": \"NE_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"capacity_size\": 24.13,\n                            \"existing_capacity\": 4729.48,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.083,\n                            \"ramp_up_fraction\": 0.083,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.095,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                },\n                {\n                    \"id\": \"SE_conventional_hydroelectric_1\",\n                    \"edges\": {\n                        \"discharge_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"capacity_size\": 31.333,\n                            \"existing_capacity\": 11123.215,\n                            \"fixed_om_cost\": 45648,\n                            \"ramp_down_fraction\": 0.083,\n                            \"ramp_up_fraction\": 0.083,\n                            \"efficiency\": 1.0\n                        },\n                        \"inflow_edge\": {\n                            \"efficiency\": 1.0,\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_conventional_hydroelectric_1\"\n                                }\n                            }\n                        }\n                    },\n                    \"storage\": {\n                        \"min_outflow_fraction\": 0.135129141,\n                        \"charge_discharge_ratio\": 1.0\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Electrolyzer","page":"Electrolyzer","title":"Electrolyzer","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html#Graph-structure","page":"Electrolyzer","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"<img width=\"400\" src=\"../../images/electrolyzer.png\" />","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"An electrolyzer asset is made of:","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"1 Transformation component, representing the electrolysis process.\n2 Edge components:\n1 incoming Electricity Edge, representing the electricity consumption.\n1 outgoing Hydrogen Edge, representing the hydrogen production.","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Attributes","page":"Electrolyzer","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"The structure of the input file for an electrolyzer asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"h2_edge\": {\n            // ... co2_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Transformation","page":"Electrolyzer","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Required List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_h2MWh_elec","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"tip: Default constraints\nThe default constraint for the transformation part of the electrolyzer asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Flow-equations","page":"Electrolyzer","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"note: Electrolyzer\nbeginaligned\nphi_h2 = phi_elec cdot epsilon_efficiency \nendaligned","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Edges","page":"Electrolyzer","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"Both the electricity and hydrogen edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"tip: Default constraints\nThe only default constraint for the edges of the electrolyzer asset is the Capacity constraint applied to the hydrogen edge. ","category":"page"},{"location":"User Guide/assets/electrolyzer.html#Example","page":"Electrolyzer","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"The following is an example of the input file for an electrolyzer asset that creates three electrolyzers, each for each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/electrolyzer.html","page":"Electrolyzer","title":"Electrolyzer","text":"{\n    \"electrolyzer\": [\n        {\n            \"type\": \"Electrolyzer\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Electricity\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_SE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_MIDAT\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"start_vertex\": \"elec_NE\"\n                        },\n                        \"h2_edge\": {\n                            \"end_vertex\": \"h2_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Developer-Guide","page":"Type hierarchy","title":"Developer Guide","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html#MACRO-type-hierarchy","page":"Type hierarchy","title":"MACRO type hierarchy","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"CurrentModule = Macro","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Commodities","page":"Type hierarchy","title":"Commodities","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"using Macro # hide\nusing AbstractTrees # hide\nusing InteractiveUtils # hide\nAbstractTrees.children(d::DataType) = subtypes(d) # hide\nprint_tree(Commodity)","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Assets","page":"Type hierarchy","title":"Assets","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"print_tree(AbstractAsset)","category":"page"},{"location":"Developer Guide/type_hierarchy.html#Constraints","page":"Type hierarchy","title":"Constraints","text":"","category":"section"},{"location":"Developer Guide/type_hierarchy.html","page":"Type hierarchy","title":"Type hierarchy","text":"print_tree(Macro.AbstractTypeConstraint)","category":"page"},{"location":"User Guide/assets/fuelcell.html#Fuel-Cell","page":"Fuel Cell","title":"Fuel Cell","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html#Graph-structure","page":"Fuel Cell","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"<img width=\"400\" src=\"../../images/fuelcell.png\" />","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"A fuel cell asset is made of:","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"1 Transformation component, representing the fuel cell process.\n2 Edge components:\n1 incoming Hydrogen Edge, representing the hydrogen supply.\n1 outgoing Electricity Edge, representing the electricity production.","category":"page"},{"location":"User Guide/assets/fuelcell.html#Attributes","page":"Fuel Cell","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"The structure of the input file for a fuel cell asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"h2_edge\": {\n            // ... h2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/fuelcell.html#Transformation","page":"Fuel Cell","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"Hydrogen\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_elecMWh_h2","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"tip: Default constraints\nThe default constraint for the transformation part of the fuel cell asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/fuelcell.html#Flow-equations","page":"Fuel Cell","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"note: Fuel Cell\nbeginaligned\nphi_elec = phi_h2 cdot epsilon_efficiency \nendaligned","category":"page"},{"location":"User Guide/assets/fuelcell.html#Edges","page":"Fuel Cell","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"Both the electricity and hydrogen edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"tip: Default constraints\nThe only default constraint for the edges of the fuel cell asset is the Capacity constraint applied to the electricity edge. ","category":"page"},{"location":"User Guide/assets/fuelcell.html#Example","page":"Fuel Cell","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"The following is an example of the input file for a fuel cell asset that creates three fuel cells, each for each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/fuelcell.html","page":"Fuel Cell","title":"Fuel Cell","text":"{\n    \"fuelcell\": [\n        {\n            \"type\": \"FuelCell\",\n            \"global_data\": {\n                \"nodes\": {},\n                \"transforms\": {\n                    \"timedata\": \"Hydrogen\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true\n                        }\n                    },\n                    \"h2_edge\": {\n                        \"type\": \"Hydrogen\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Electrolyzer\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_FuelCell\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.875111139\n                    },\n                    \"edges\": {\n                        \"h2_edge\": {\n                            \"start_vertex\": \"h2_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"existing_capacity\": 0,\n                            \"investment_cost\": 41112.53426,\n                            \"fixed_om_cost\": 1052.480877,\n                            \"variable_om_cost\": 0.0,\n                            \"capacity_size\": 1.5752,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.1\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/sectors.html#User-Guide","page":"Sectors","title":"User Guide","text":"","category":"section"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"MACRO version 0.1.0","category":"page"},{"location":"User Guide/sectors.html#Introduction:-Energy-System-in-MACRO","page":"Sectors","title":"Introduction: Energy System in MACRO","text":"","category":"section"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"The MACRO model is designed to represent the energy system in a detailed manner, with various sectors and technologies interacting. Each sector is characterized by a commodity, a type of energy carrier. The current model includes the following sectors:","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"Electricity\nNatural Gas\nCO2 and CO2 Capture\nHydrogen\nCoal\nBiomass\nUranium","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"The energy system is modeled as a multi-plex network — a multi-layered network that connects different sectors.","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"The key components of this network are:","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"Vertices: Represent balance equations and can correspond to transformations (linking two or more commodity networks), storage systems, or demand nodes (outflows):\nTransformations: \nSpecial vertices that convert one commodity type into another, acting as bridges between sectors. \nThey represent conversion processes defined by a set of stoichiometric equations specifying transformation ratios.\nStorage: \nStores commodities for future use.\nThe flow of commodities into and out of storage systems is regulated by Storage balance equations.\nNodes:\nRepresent geographical locations or zones, each associated with a commodity type.\nThey can be of two types: demand nodes (outflows) or sources (inflows).\nDemand balance equations are used to balance the flow of commodities into and out of the node.\nThey form the network for a specific sector (e.g., electricity network, hydrogen network, etc.).\nEdges: \nDepict the flow of a commodity into or out of a vertex.\nCapacity sizing decisions, capex/opex, planning and operational constraints are associated with the edges.\nAssets: Defined as a collection of edges and vertices. See MACRO Asset Library for a list of all the assets available in MACRO.","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"The figure below illustrates a multi-plex network representing an energy system with electricity, natural gas, and CO2 sectors, with two natural gas power plants, and a solar panel. Blue nodes represent the electricity sector, red nodes represent natural gas, and yellow nodes represent CO2. The edges depict commodity flow, and squares represent transformation points.","category":"page"},{"location":"User Guide/sectors.html","page":"Sectors","title":"Sectors","text":"(Image: Energy System)","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Natural-Gas-DAC","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html#Graph-structure","page":"Natural Gas DAC","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A natural gas DAC is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"<img width=\"400\" src=\"../../images/natgasdac.png\" />","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"A natural gas DAC asset is made of:","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"1 Transformation component, representing the natural gas DAC process.\n5 Edge components:\n1 incoming NaturalGas Edge, representing the natural gas supply.\n1 incoming CO2 Edge, representing the CO2 that is absorbed by the natural gas DAC process.\n1 outgoing Electricity Edge, representing the electricity production.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Attributes","page":"Natural Gas DAC","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The structure of the input file for a natural gas DAC asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"ng_edge\": {\n            // ... ng_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_emission_edge\": {\n            // ... co2_emission_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Transformation","page":"Natural Gas DAC","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2MWh_ng\nelectricity_production epsilon_elec_prod Float64 Float64 0.0 MWh_elecMWh_ng\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2MWh_ng\nfuel_consumption epsilon_fuel_consumption Float64 Float64 1.0 MWh_ngt_CO2","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Default constraints\nThe default constraint for the transformation part of the natural gas DAC asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Flow-equations","page":"Natural Gas DAC","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"note: NaturalGasDAC\nbeginaligned\nphi_elec = phi_co2 cdot epsilon_elec_prod \nphi_ng = -phi_co2 cdot epsilon_fuel_consumption \nphi_co2 = phi_ng cdot epsilon_emission_rate \nphi_co2_captured + phi_co2 = phi_ng cdot epsilon_co2_capture_rate \nendaligned","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Edges","page":"Natural Gas DAC","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"warning: Asset expansion\nAs a modeling decision, only the incoming CO2 edge is allowed to expand. Therefore, the has_capacity attribute can only be set for this edge. For all the other edges, this attribute is pre-set to false to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"warning: Directionality\nThe unidirectional attribute is only available for the incoming CO2 edge. For the other edges, this attribute is pre-set to true to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"natgas_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge.\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nunidirectional Bool Bool false Whether the edge is unidirectional.\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"tip: Default constraints\nThe only default constraint for the edges of the natural gas DAC asset is the Capacity constraint applied to the incoming CO2 edge. ","category":"page"},{"location":"User Guide/assets/natgasdaq.html#Example","page":"Natural Gas DAC","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"The following input file example shows how to create a natural gas DAC asset in each of the three zones NE, SE and MIDAT.","category":"page"},{"location":"User Guide/assets/natgasdaq.html","page":"Natural Gas DAC","title":"Natural Gas DAC","text":"{\n    \"NaturalGasDAC\": [\n        {\n            \"type\": \"NaturalGasDAC\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"start_vertex\": \"co2_sink\",\n                        \"can_retire\": true,\n                        \"can_expand\": true,\n                        \"integer_decisions\": false,\n                        \"uc\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true\n                        }\n                    },\n                    \"co2_emission_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"ng_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                }\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"SE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"MIDAT_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_Sorbent_DAC\",\n                    \"transforms\": {\n                        \"emission_rate\": 0.005516648,\n                        \"capture_rate\": 0.546148172,\n                        \"electricity_production\": 0.125,\n                        \"fuel_consumption\": 3.047059915\n                    },\n                    \"edges\": {\n                        \"co2_edge\": {\n                            \"availability\": {\n                                \"timeseries\": {\n                                    \"path\": \"assets/availability.csv\",\n                                    \"header\": \"NE_Sorbent_DAC\"\n                                }\n                            },\n                            \"existing_capacity\": 0.0,\n                            \"investment_cost\": 869000.00,\n                            \"fixed_om_cost\": 384000.00,\n                            \"variable_om_cost\": 58.41,\n                            \"ramp_up_fraction\": 1.0,\n                            \"ramp_down_fraction\": 1.0\n                        },\n                        \"ng_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        },\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"User Guide/assets/thermalpower.html#Thermal-Power-Plant-(with-and-without-CCS)","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html#Graph-structure","page":"Thermal Power Plant (with and without CCS)","title":"Graph structure","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant (with and without CCS) is represented in MACRO using the following graph structure:","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"<img width=\"400\" src=\"../../images/thermalpower.png\" />","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"A thermal power plant (with and without CCS) is made of:","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"1 Transformation component, representing the thermal power plant (with and without CCS).\n4 Edge components:\n1 incoming Fuel Edge, representing the fuel supply. \n1 outgoing Electricity Edge, representing the electricity production. This edge can have unit commitment operations.\n1 outgoing CO2 Edge, representing the CO2 that is emitted.\n1 outgoing CO2Captured Edge, representing the CO2 that is captured (only if CCS is present).","category":"page"},{"location":"User Guide/assets/thermalpower.html#Attributes","page":"Thermal Power Plant (with and without CCS)","title":"Attributes","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The structure of the input file for a ThermalPower asset follows the graph representation. Each global_data and instance_data will look like this:","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"transforms\":{\n        // ... transformation-specific attributes ...\n    },\n    \"edges\":{\n        \"fuel_edge\": {\n            // ... fuel_edge-specific attributes ...\n        },\n        \"elec_edge\": {\n            // ... elec_edge-specific attributes ...\n        },\n        \"co2_edge\": {\n            // ... co2_edge-specific attributes ...\n        },\n        \"co2_captured_edge\": {\n            // ... co2_captured_edge-specific attributes, only if CCS is present ...\n        }\n    }\n}","category":"page"},{"location":"User Guide/assets/thermalpower.html#Transformation","page":"Thermal Power Plant (with and without CCS)","title":"Transformation","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The definition of the transformation object can be found here Macro.Transformation.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Attribute Type Values Default Description/Units\ntimedata String String Required Time resolution for the time series data linked to the transformation. E.g. \"NaturalGas\".\nconstraints Dict{String,Bool} Any MACRO constraint type for vertices Empty List of constraints applied to the transformation. E.g. {\"BalanceConstraint\": true}.\nefficiency_rate epsilon_efficiency Float64 Float64 1.0 MWh_elecMWh_fuel\nemission_rate epsilon_emission_rate Float64 Float64 1.0 t_CO2MWh_fuel\ncapture_rate epsilon_co2_capture_rate Float64 Float64 1.0 t_CO2MWh_fuel","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"tip: Default constraints\nThe default constraint for the transformation part of the thermal power asset is the following:Balance constraint","category":"page"},{"location":"User Guide/assets/thermalpower.html#Flow-equations","page":"Thermal Power Plant (with and without CCS)","title":"Flow equations","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"In the following equations, phi is the flow of the commodity and epsilon is the stoichiometric coefficient defined in the transformation table below.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: ThermalPower\nNote: Fuel is the type of the fuel being converted.beginaligned\nphi_elec = phi_fuel cdot epsilon_efficiency \nphi_co2 = phi_fuel cdot epsilon_emission_rate \nphi_co2_captured = phi_fuel cdot epsilon_co2_capture_rate quad text(if CCS) \nendaligned","category":"page"},{"location":"User Guide/assets/thermalpower.html#Edges","page":"Thermal Power Plant (with and without CCS)","title":"Edges","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"warning: Asset expansion\nAs a modeling decision, only the Electricity and Fuel edges are allowed to expand. Therefore, both the has_capacity and constraints attributes can only be set for those edges. For all the other edges, these attributes are pre-set to false and to an empty list respectively to ensure the correct modeling of the asset. ","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"warning: Directionality\nThe unidirectional attribute is set to true for all the edges.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"note: Unit commitment and default constraints\nThe Electricity edge can have unit commitment operations. To enable it, the user needs to set the uc attribute to true. The default constraints for unit commitment case are the following:Capacity constraint\nRamping limits constraint\nMinimum up and down time constraintIn case of no unit commitment, the uc attribute is set to false and the default constraints are the following:Capacity constraint","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"All the edges are represented by the same set of attributes. The definition of the Edge object can be found here Macro.Edge.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"Attribute Type Values Default Description\ntype String Any MACRO commodity type matching the commodity of the edge Required Commodity of the edge. E.g. \"Electricity\".\nstart_vertex String Any node id present in the system matching the commodity of the edge Required ID of the starting vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_1\".\nend_vertex String Any node id present in the system matching the commodity of the edge Required ID of the ending vertex of the edge. The node must be present in the nodes.json file. E.g. \"elec_node_2\".\nconstraints Dict{String,Bool} Any MACRO constraint type for Edges Empty List of constraints applied to the edge. E.g. {\"CapacityConstraint\": true}.\navailability Dict Availability file path and header Empty Path to the availability file and column name for the availability time series to link to the edge. E.g. {\"timeseries\": {\"path\": \"system/availability.csv\", \"header\": \"Availability_MW_z1\"}}.\ncan_expand Bool Bool false Whether the edge is eligible for capacity expansion.\ncan_retire Bool Bool false Whether the edge is eligible for capacity retirement.\ncapacity_size Float64 Float64 1.0 Size of the edge capacity.\nexisting_capacity Float64 Float64 0.0 Existing capacity of the edge in MW.\nfixed_om_cost Float64 Float64 0.0 Fixed operations and maintenance cost (USD/MW-year).\nhas_capacity Bool Bool false Whether capacity variables are created for the edge (only available for the Hydrogen and Fuel edges).\ninteger_decisions Bool Bool false Whether capacity variables are integers.\ninvestment_cost Float64 Float64 0.0 Annualized capacity investment cost (USD/MW-year)\nloss_fraction Float64 Number in [0,1] 0.0 Fraction of transmission loss.\nmax_capacity Float64 Float64 Inf Maximum allowed capacity of the edge (MW). Note: add the MaxCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_capacity Float64 Float64 0.0 Minimum allowed capacity of the edge (MW). Note: add the MinCapacityConstraint to the constraints dictionary to activate this constraint.\nmin_flow_fraction Float64 Number in [0,1] 0.0 Minimum flow of the edge as a fraction of the total capacity. Note: add the MinFlowConstraint to the constraints dictionary to activate this constraint.\nmin_down_time Int64 Int64 0 Minimum amount of time the edge has to remain in the shutdown state before starting up again. Note: add the MinDownTimeConstraint to the constraints dictionary to activate this constraint.\nmin_up_time Int64 Int64 0 Minimum amount of time the edge has to remain in the committed state. Note: add the MinUpTimeConstraint to the constraints dictionary to activate this constraint.\nramp_down_fraction Float64 Number in [0,1] 1.0 Maximum decrease in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nramp_up_fraction Float64 Number in [0,1] 1.0 Maximum increase in flow between two time steps, reported as a fraction of the capacity. Note: add the RampingLimitConstraint to the constraints dictionary to activate this constraint.\nstartup_cost Float64 Float64 0.0 Cost per MW of capacity to start a generator (USD/MW per start).\nstartup_fuel Float64 Float64 0.0 Startup fuel use per MW of capacity (MWh/MW per start).\nvariable_om_cost Float64 Float64 0.0 Variable operation and maintenance cost (USD/MWh).","category":"page"},{"location":"User Guide/assets/thermalpower.html#Example","page":"Thermal Power Plant (with and without CCS)","title":"Example","text":"","category":"section"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"The following is an example of the input file for a ThermalPowerCCS asset that creates three ThermalPowerCCS assets, one in each of the SE, MIDAT and NE regions.","category":"page"},{"location":"User Guide/assets/thermalpower.html","page":"Thermal Power Plant (with and without CCS)","title":"Thermal Power Plant (with and without CCS)","text":"{\n    \"NaturalGasPowerCCS\": [\n        {\n            \"type\": \"ThermalPowerCCS\",\n            \"global_data\": {\n                \"transforms\": {\n                    \"timedata\": \"NaturalGas\",\n                    \"constraints\": {\n                        \"BalanceConstraint\": true\n                    }\n                },\n                \"edges\": {\n                    \"elec_edge\": {\n                        \"type\": \"Electricity\",\n                        \"uc\": true,\n                        \"unidirectional\": true,\n                        \"has_capacity\": true,\n                        \"can_expand\": true,\n                        \"can_retire\": true,\n                        \"integer_decisions\": false,\n                        \"constraints\": {\n                            \"CapacityConstraint\": true,\n                            \"RampingLimitConstraint\": true,\n                            \"MinFlowConstraint\": true,\n                            \"MinUpTimeConstraint\": true,\n                            \"MinDownTimeConstraint\": true\n                        }\n                    },\n                    \"fuel_edge\": {\n                        \"type\": \"NaturalGas\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false\n                    },\n                    \"co2_edge\": {\n                        \"type\": \"CO2\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_sink\"\n                    },\n                    \"co2_captured_edge\": {\n                        \"type\": \"CO2Captured\",\n                        \"unidirectional\": true,\n                        \"has_capacity\": false,\n                        \"end_vertex\": \"co2_captured_sink\"\n                    }\n                },\n            },\n            \"instance_data\": [\n                {\n                    \"id\": \"SE_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.476622662,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_SE\",\n                            \"investment_cost\": 150408.6558,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_SE\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"MIDAT_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.476622662,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_MIDAT\",\n                            \"investment_cost\": 158946.1077,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_MIDAT\"\n                        }\n                    }\n                },\n                {\n                    \"id\": \"NE_naturalgas_ccccsavgcf_conservative_0\",\n                    \"transforms\": {\n                        \"efficiency_rate\": 0.476622662,\n                        \"emission_rate\": 0.018104824,\n                        \"capture_rate\": 0.162943412\n                    },\n                    \"edges\": {\n                        \"elec_edge\": {\n                            \"end_vertex\": \"elec_NE\",\n                            \"investment_cost\": 173266.9946,\n                            \"existing_capacity\": 0.0,\n                            \"fixed_om_cost\": 65100,\n                            \"variable_om_cost\": 5.73,\n                            \"capacity_size\": 377,\n                            \"startup_cost\": 97,\n                            \"startup_fuel\": 0.058614214,\n                            \"min_up_time\": 4,\n                            \"min_down_time\": 4,\n                            \"ramp_up_fraction\": 1,\n                            \"ramp_down_fraction\": 1,\n                            \"min_flow_fraction\": 0.5\n                        },\n                        \"fuel_edge\": {\n                            \"start_vertex\": \"natgas_NE\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html#Running-MACRO","page":"Running Macro","title":"Running MACRO","text":"","category":"section"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"note: Interactive Notebook\nThe interactive version of this tutorial can be found here.","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"In this tutorial, we start from a single zone electricity system with four resource clusters: utility scale solar PV, land-based wind power generation, natural gas combined cycle power plants, and electricity storage. ","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We consider three commodities: electricity, natural gas, and textCO_2. ","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Initially, hydrogen is modeled exogenously, adding a constant electricity demand for hydrogen production to the electricity demand time series. In other words, we assume the existance of an electrolyzer that continuously consumes electricity to meet the hydrogen demand.","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We model a greenfield scenario with a carbon price of 200 USD/ton, i.e., we allow textCO_2 emissions with a penalty cost.","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Note: We use the default units in MACRO: MWh for energy vectors, metric tons for other commodities (e.g., textCO_2) and dollars for costs","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"using Pkg; Pkg.add(\"VegaLite\")","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"using Macro\nusing HiGHS\nusing CSV\nusing DataFrames\nusing JSON3\nusing VegaLite","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We first load the inputs:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"system = Macro.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We are now ready to generate the MACRO capacity expansion model. Because MACRO is designed to be solved by high performance decomposition algorithms, the model formulation has a specific block structure that can be exploited by these schemes. In the case of 3 operational sub-periods, the block structure looks like this:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"(Image: model_structure)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"model = Macro.generate_model(system)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Next, we set the optimizer. Note that we are using the open-source LP solver HiGHS, alternatives include the commerical solvers Gurobi, CPLEX, COPT.","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Macro.set_optimizer(model, HiGHS.Optimizer);","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Finally, we solve the capacity expansion model:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Macro.optimize!(model)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"And extract the results:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"capacity_results = Macro.get_optimal_asset_capacity(system)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"The total system cost (in dollars) is:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Macro.objective_value(model)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"and the total emissions (in metric tonnes) are:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"co2_node = Macro.get_nodes_sametype(system.locations, CO2)[1]\nMacro.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We can also plot the electricity generation results using VegaLite.jl:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power = Macro.value.(Macro.flow(system.assets[2].elec_edge)).data[plot_time_interval] / 1e3;\nsolar_power = Macro.value.(Macro.flow(system.assets[3].edge)).data[plot_time_interval] / 1e3;\nwind_power = Macro.value.(Macro.flow(system.assets[4].edge)).data[plot_time_interval] / 1e3;\n\nelec_gen = DataFrame(hours=plot_time_interval,\n    solar_photovoltaic=solar_power,\n    wind_turbine=wind_power,\n    natural_gas_fired_combined_cycle=natgas_power,\n)\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle, :wind_turbine, :solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |>\n           @vlplot(\n    :area,\n    x = {:hours, title = \"Hours\"},\n    y = {:generation, title = \"Electricity generation (GWh)\", stack = :zero},\n    color = {\"resource:n\", scale = {scheme = :category10}},\n    width = 400,\n    height = 300\n)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html#Exercise-1","page":"Running Macro","title":"Exercise 1","text":"","category":"section"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Set a strict net-zero textCO_2 cap by removing the slack allowing constraint violation for a penalty. This can be done by deleting the field price_unmet_policy from the textCO_2 node in file one_zone_electricity_only/system/nodes.json","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Then, re-run the model with these new inputs and show the capacity results, total system cost, emissions, and plot the generation profiles.","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html#Solution","page":"Running Macro","title":"Solution","text":"","category":"section"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Open file one_zone_electricity_only/system/nodes.json, go to the bottom of the file where the textCO_2 node is defined. Remove the lines related to the field price_unmet_policy, so that the node definition looks like this:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":" {\n    \"type\": \"CO2\",\n    \"global_data\": {\n        \"time_interval\": \"CO2\"\n    },\n    \"instance_data\": [\n        {\n            \"id\": \"co2_sink\",\n            \"constraints\": {\n                \"CO2CapConstraint\": true\n            },\n            \"rhs_policy\": {\n                \"CO2CapConstraint\": 0\n            }   \n        }\n    ]\n}","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Then, you need to re-load the inputs:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"system = Macro.load_system(\"one_zone_electricity_only\");","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"generate the MACRO model:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"model = Macro.generate_model(system);","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"and solve it:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Macro.set_optimizer(model, HiGHS.Optimizer);\nMacro.optimize!(model)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"We can check the results by printing the total system cost:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Macro.objective_value(model)","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"and the new emissions (which should be zero):","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"co2_node = Macro.get_nodes_sametype(system.locations, CO2)[1]\nMacro.value(sum(co2_node.operation_expr[:emissions]))","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"Finally, we plot the generation results:","category":"page"},{"location":"Tutorials/tutorial_2_running_macro.html","page":"Running Macro","title":"Running Macro","text":"plot_time_interval = 3600:3624\nnatgas_power =  Macro.value.(Macro.flow(system.assets[2].elec_edge)).data[plot_time_interval]/1e3;\nsolar_power = Macro.value.(Macro.flow(system.assets[3].edge)).data[plot_time_interval]/1e3;\nwind_power = Macro.value.(Macro.flow(system.assets[4].edge)).data[plot_time_interval]/1e3;\n\nelec_gen =  DataFrame( hours = plot_time_interval, \n                solar_photovoltaic = solar_power,\n                wind_turbine = wind_power,\n                natural_gas_fired_combined_cycle = natgas_power,\n                )\n\nstack_elec_gen = stack(elec_gen, [:natural_gas_fired_combined_cycle,:wind_turbine,:solar_photovoltaic], variable_name=:resource, value_name=:generation);\n\nelc_plot = stack_elec_gen |> \n@vlplot(\n    :area,\n    x={:hours, title=\"Hours\"},\n    y={:generation, title=\"Electricity generation (GWh)\",stack=:zero},\n    color={\"resource:n\", scale={scheme=:category10}},\n    width=400,\n    height=300\n)","category":"page"},{"location":"References/assets.html#MACRO-Asset-Library-Reference","page":"Asset Library","title":"MACRO Asset Library Reference","text":"","category":"section"},{"location":"References/assets.html#VRE-(make-function)","page":"Asset Library","title":"VRE (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [Macro]\nPages = [\"vre.jl\"]","category":"page"},{"location":"References/assets.html#Macro.make-Tuple{Type{<:VRE}, AbstractDict{Symbol, Any}, Macro.System}","page":"Asset Library","title":"Macro.make","text":"make(::Type{<:VRE}, data::AbstractDict{Symbol, Any}, system::System) -> VRE\n\nVRE is an alias for Union{SolarPV, WindTurbine}\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n- edges: Dict{Symbol, Any}\n    - edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#Battery-(make-function)","page":"Asset Library","title":"Battery (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [Macro]\nPages = [\"battery.jl\"]","category":"page"},{"location":"References/assets.html#Macro.make-Tuple{Type{Battery}, AbstractDict{Symbol, Any}, Macro.System}","page":"Asset Library","title":"Macro.make","text":"make(::Type{Battery}, data::AbstractDict{Symbol, Any}, system::System) -> Battery\n\nNecessary data fields:\n - storage: Dict{Symbol, Any}\n    - id: String\n    - commodity: String\n    - can_retire: Bool\n    - can_expand: Bool\n    - existing_capacity_storage: Float64\n    - investment_cost_storage: Float64\n    - fixed_om_cost_storage: Float64\n    - storage_loss_fraction: Float64\n    - min_duration: Float64\n    - max_duration: Float64\n    - min_storage_level: Float64\n    - min_capacity_storage: Float64\n    - max_capacity_storage: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n - edges: Dict{Symbol, Any}\n    - charge_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - efficiency: Float64\n    - discharge_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - efficiency\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#Electrolyzer-(make-function)","page":"Asset Library","title":"Electrolyzer (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [Macro]\nPages = [\"electrolyzer.jl\"]","category":"page"},{"location":"References/assets.html#Macro.make-Tuple{Type{Electrolyzer}, AbstractDict{Symbol, Any}, Macro.System}","page":"Asset Library","title":"Macro.make","text":"make(::Type{Electrolyzer}, data::AbstractDict{Symbol, Any}, system::System) -> Electrolyzer\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - e_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#ThermalHydrogen-(make-function)","page":"Asset Library","title":"ThermalHydrogen (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [Macro]\nPages = [\"thermalhydrogen.jl\"]","category":"page"},{"location":"References/assets.html#Macro.make-Tuple{Type{ThermalHydrogen}, AbstractDict{Symbol, Any}, Macro.System}","page":"Asset Library","title":"Macro.make","text":"make(::Type{ThermalHydrogen}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogen\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#ThermalHydrogenCCS-(make-function)","page":"Asset Library","title":"ThermalHydrogenCCS (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [Macro]\nPages = [\"thermalhydrogenccs.jl\"]","category":"page"},{"location":"References/assets.html#Macro.make-Tuple{Type{ThermalHydrogenCCS}, AbstractDict{Symbol, Any}, Macro.System}","page":"Asset Library","title":"Macro.make","text":"make(::Type{ThermalHydrogenCCS}, data::AbstractDict{Symbol, Any}, system::System) -> ThermalHydrogenCCS\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - emission_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - elec_edge: Dict{Symbol,Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - min_up_time: Int\n        - min_down_time: Int\n        - startup_cost: Float64\n        - startup_fuel: Float64\n        - startup_fuel_balance_id: Symbol\n        - constraints: Vector{AbstractTypeConstraint}\n    - fuel_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - co2_captured_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"References/assets.html#FuelCell-(make-function)","page":"Asset Library","title":"FuelCell (make function)","text":"","category":"section"},{"location":"References/assets.html","page":"Asset Library","title":"Asset Library","text":"Modules = [Macro]\nPages = [\"fuelcell.jl\"]","category":"page"},{"location":"References/assets.html#Macro.make-Tuple{Type{FuelCell}, AbstractDict{Symbol, Any}, Macro.System}","page":"Asset Library","title":"Macro.make","text":"make(::Type{FuelCell}, data::AbstractDict{Symbol, Any}, system::System) -> FuelCell\n\nNecessary data fields:\n - transforms: Dict{Symbol, Any}\n    - id: String\n    - timedata: String\n    - efficiency_rate: Float64\n    - constraints: Vector{AbstractTypeConstraint}\n- edges: Dict{Symbol, Any}\n    - h2_edge: Dict{Symbol, Any}\n        - id: String\n        - end_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n    - e_edge: Dict{Symbol, Any}\n        - id: String\n        - start_vertex: String\n        - unidirectional: Bool\n        - has_capacity: Bool\n        - can_retire: Bool\n        - can_expand: Bool\n        - constraints: Vector{AbstractTypeConstraint}\n\n\n\n\n\n","category":"method"},{"location":"Getting Started/installation.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"Getting Started/installation.html#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Julia 1.9 or later\nGit (to clone the repository)","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"warning: Access to the MACRO repository\nThe following steps assume that the user has a GitHub account and a PAT (Personal Access Token) or SSH key pair. For more information on how to create a PAT or SSH key pair, please refer to the GitHub documentation.Current version: 0.1.0: We also assume that the user has been added to the MACRO repository as a collaborator (the repository is private).","category":"page"},{"location":"Getting Started/installation.html#Installation-steps","page":"Installation","title":"Installation steps","text":"","category":"section"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"To install the MACRO package in Julia, we recommend following these steps:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Clone the MACRO repository:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"If you are using a PAT, you can use the following command:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"git clone https://<your_username>:<your_pat>@github.com/macroenergy/Macro.git","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"If you are using an SSH key pair instead of a PAT, you can use the following command:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"git clone git@github.com:macroenergy/Macro.git","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"note: Cloning a specific branch\nIf you want to clone a specific branch, you can use the -b flag:git clone -b <branch_name> https://<your_username>:<your_pat>@github.com/macroenergy/Macro.git","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Navigate to the cloned repository:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"cd Macro","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Install MACRO and all its dependencies:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"julia --project -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()'","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Test the installation:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Start Julia with the project environment in a terminal:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"$ julia --project","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Load the MACRO package in the Julia REPL:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"using Macro","category":"page"},{"location":"Getting Started/installation.html#Editing-the-installation","page":"Installation","title":"Editing the installation","text":"","category":"section"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"If the user wants to edit the installation, for example, to install a specific version of a dependency, they can do so by following the steps below:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Run a Julia session with the MACRO project environment activated:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"$ cd Macro\n$ julia --project","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Alternatively, you can first run Julia and then enter the Pkg mode to activate the project environment:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"$ cd Macro\n$ julia","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"In the Julia REPL, enter the Pkg mode by pressing ], then activate the project environment:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"] activate .","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"Use the Pkg mode to install or update a dependency:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"] rm <dependency_name>\n] add <dependency_name>@<version>","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"For instance, to install the JuMP package version v1.22.2, you can use the following commands:","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"] rm JuMP\n] add JuMP@v1.22.2","category":"page"},{"location":"Getting Started/installation.html","page":"Installation","title":"Installation","text":"note: Activating the project environment\nWhen working with the MACRO package, always remember to activate the project environment before running any commands. This ensures that the correct dependencies are used and that the project is in the correct state. To activate the project environment, you can use the following commands:cd Macro\njulia --projectorcd Macro\njulia\n] activate .","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = Macro","category":"page"},{"location":"index.html#Welcome-to-the-[MACRO](https://github.com/macroenergy/Macro)-documentation!","page":"Introduction","title":"Welcome to the MACRO documentation!","text":"","category":"section"},{"location":"index.html#What-is-MACRO?","page":"Introduction","title":"What is MACRO?","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"MAcro-Energy System Capacity Expansion & Resource Optimization Model (MACRO) is a bottom-up, electricity-centric, macro-energy systems optimization model. It is designed to capture capacity investments, operations, and energy flows across and between multiple energy sectors and can be used to explore the impacts of different energy policies, technology costs, and other exogenous factors on the energy system. ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The main features of MACRO include:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Tailored Benders decomposition framework for optimization.\nGraph-based representation of the energy system, including nodes, storage units, edges/transmission lines, transformation nodes/conversion units.\n\"Plug and play\" flexibility for integrating various technologies and sectors (e.g., electricity, hydrogen, heat, and transport).\nTechnologically rich, granular temporal resolution for detailed analysis.\nOpen-source built using Julia and JuMP.","category":"page"},{"location":"index.html#MACRO-development-strategy","page":"Introduction","title":"MACRO development strategy","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"MACRO has been designed and developed with three layers of abstractions in mind, each serving a different kind of user:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"(Image: MACRO architecture)","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The following sections of the documentation are designed to serve the different needs of the different users:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"User Guide\nModeler Guide\nDeveloper Guide","category":"page"},{"location":"index.html#Index","page":"Introduction","title":"Index","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"Getting Started/overview.md\",\n    \"Getting Started/installation.md\",\n    \"Tutorials/tutorial_0_getting_started.md\",\n    \"Tutorials/tutorial_1_input_file.md\",\n    \"Tutorials/tutorial_2_running_macro.md\",\n    \"Tutorials/tutorial_3_multisector_modelling.md\",\n    \"User Guide/sectors.md\",\n    \"User Guide/input_data.md\",\n    \"User Guide/assets/introduction.md\",\n    \"User Guide/assets/battery.md\",\n    \"User Guide/assets/beccselectricity.md\",\n    \"User Guide/assets/beccshydrogen.md\",\n    \"User Guide/assets/electricdac.md\",\n    \"User Guide/assets/electrolyzer.md\",\n    \"User Guide/assets/fuelcell.md\",\n    \"User Guide/assets/gasstorage.md\",\n    \"User Guide/assets/hydrogenline.md\",\n    \"User Guide/assets/hydropower.md\",\n    \"User Guide/assets/mustrun.md\",\n    \"User Guide/assets/natgasdaq.md\",\n    \"User Guide/assets/powerline.md\",\n    \"User Guide/assets/thermalhydrogen.md\",\n    \"User Guide/assets/thermalpower.md\",\n    \"User Guide/assets/vre.md\",\n    \"User Guide/constraints.md\",\n    \"Modeler Guide/build_sectors.md\",\n    \"Modeler Guide/create_example_case.md\",\n    \"Developer Guide/type_hierarchy.md\",\n    \"References/references.md\"\n]\nDepth = 2","category":"page"},{"location":"Getting Started/overview.html#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"Getting Started/overview.html#Multi-commodity-flow-network","page":"Overview","title":"Multi-commodity flow network","text":"","category":"section"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"MACRO is designed to represent energy systems in a detailed manner, capturing interactions among various sectors and technologies. The system is structured as a multi-commodity flow network, with each commodity having independent spatial and temporal scale:","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"(Image: multi-commodity flow network)","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"As an example, the figure below illustrates a multi-plex network representing an energy system with electricity, natural gas, and CO2 sectors, with two natural gas power plants, and a solar panel. Blue nodes represent the electricity sector, red nodes represent natural gas, and yellow nodes represent CO2. The edges depict commodity flow, and squares represent transformation points. (Image: network)","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"As illustrated in the figures above, the core components of the model are:","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"Vertices: Represent balance equations and can correspond to transformations (linking two or more commodity networks), storage systems, or demand nodes (outflows):\nTransformations: \nSpecial vertices that convert one commodity type into another, acting as bridges between sectors. \nThey represent conversion processes defined by a set of stoichiometric equations specifying transformation ratios.\nStorage: \nStores commodities for future use.\nThe flow of commodities into and out of storage systems is regulated by Storage balance equations.\nNodes:\nRepresent geographical locations or zones, each associated with a commodity type.\nThey can be of two types: demand nodes (outflows) or sources (inflows).\nDemand balance equations are used to balance the flow of commodities into and out of the node.\nThey form the network for a specific sector (e.g., electricity network, hydrogen network, etc.).\nEdges: \nDepict the flow of a commodity into or out of a vertex.\nCapacity sizing decisions, capex/opex, planning and operational constraints are associated with the edges.\nAssets: Defined as a collection of edges and vertices. See MACRO Asset Library for a list of all the assets available in MACRO.","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"MACRO includes a library of assets (see MACRO Asset Library) and constraints (see MACRO Constraint Library), enabling fast and flexible assembly of new technologies and sectors.","category":"page"},{"location":"Getting Started/overview.html#Benders-decomposition","page":"Overview","title":"Benders decomposition","text":"","category":"section"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"MACRO is natively designed to create optimization models ready to be solved using the Benders decomposition framework and high-performance decomposition algorithms. This allows to solve large-scale problems with several sectors interacting together in a reasonable time frame.","category":"page"},{"location":"Getting Started/overview.html","page":"Overview","title":"Overview","text":"(Image: model_structure)","category":"page"},{"location":"Modeler Guide/create_example_case.html#How-to-create-an-example-case-to-test-the-new-sectors-and-assets","page":"How to create an example case","title":"How to create an example case to test the new sectors and assets","text":"","category":"section"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"Once new sectors and assets have been created in the model, you may want to test them by creating a new example case. This section explains how to achieve this.","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"The best way to create a new example case is to include the new sectors and assets in an existing example case. They can be found in the ExampleSystems folder in the Macro repository.","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"An example case is a folder that contains all the necessary data files to run the model. The case folder should have the following structure:","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"MyCase\n│ \n├── 📁 settings\n│   └── macro_settings.yml\n│ \n├── 📁 system\n│   ├── commodities.json \n│   ├── time_data.json\n│   ├── nodes.json\n│   ├── fuel_prices.csv\n│   └── demand.csv\n│ \n├── 📁 assets\n│   ├── MyAsset1.json\n│   ├── MyAsset2.json\n| [...other asset types...]\n│   └── availability.csv\n│ \n└── system_data.json","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"When adding a new sector, you need to make sure that: ","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"The new sector is included in the commodities.json file.\nThe new sector is included in the time_data.json file, with the corresponding HoursPerTimeStep and HoursPerSubperiod values.\nNodes corresponding to the new sector are included in the nodes.json file.\nThe demand corresponding to the new sector and for each node is included in the demand.csv file.\nA new JSON file is created with the data for the new assets.\nAvailability.csv and fuel_prices.csv files are updated with the availability and fuel prices for the new assets (if applicable).","category":"page"},{"location":"Modeler Guide/create_example_case.html","page":"How to create an example case","title":"How to create an example case","text":"warning: Warning\nMake sure that the values of the type keys in the JSON files match the names of the new sector and assets (julia abstract type and struct names respectively) created in the model. The same applies to the keys in the commodities.json and time_data.json files.","category":"page"}]
}
