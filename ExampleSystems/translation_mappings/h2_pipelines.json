{
    "gaspipeline": [
        {
            "type":  "GasStorage #### NOTE: a pipeline is a storage where charge and discharge edges are not connected to the same vertex",
            "global_data": {
                "transforms":{
                    "timedata": "Hydrogen",
                    "electricity_consumption": "<HSC_pipelines.csv/BoosterCompEnergy_MWh_per_tonne> / H2_MWh",
                    "constraints": {
                        "BalanceConstraint": true
                    }
                },
                "edges": {
                    "discharge_edge": {
                        "type": "Hydrogen",
                        "unidirectional": true,
                        "has_capacity": true,
                        "can_expand": true,
                        "can_retire": false,
                        "distance": "<HSC_pipelines.csv/Pipe_length_miles>",
                        "existing_capacity": "H2_MWh * <HSC_pipelines.csv/Max_Flow_Tonne_p_Hr_Per_Pipe> * <HSC_pipelines.csv/Existing_No_Pipe>",
                        "capacity_size": "H2_MWh * <HSC_pipelines.csv/Max_Flow_Tonne_p_Hr_Per_Pipe>",
                        "max_capacity": "H2_MWh * <HSC_pipelines.csv/Max_Flow_Tonne_p_Hr_Per_Pipe> * <HSC_pipelines.csv/Max_No_Pipe>",
                        "investment_cost": " (<HSC_pipelines.csv/H2Pipe_Inv_Cost_per_mile_yr> * <HSC_pipelines.csv/Pipe_length_miles> / (H2_MWh * <HSC_pipelines.csv/Max_Flow_Tonne_p_Hr_Per_Pipe>)) + <HSC_pipelines.csv/Max_Flow_Tonne_p_Hr_Per_Pipe> * ( (<HSC_pipelines.csv/Pipe_length_miles>/<HSC_pipelines.csv/len_bw_comp_mile>) * <HSC_pipelines.csv/BoosterCompCapex_per_tonne_p_hr_yr>)",
                        "fixed_om_cost": 0.0,
                        "variable_om_cost": 0.0,
                        "efficiency": 1.0,
                        "constraints": {
                            "CapacityConstraint": true
                        }
                    },
                    "charge_edge": {
                        "type": "Hydrogen",
                        "unidirectional": true,
                        "has_capacity": false
                    },
                    "compressor_elec_edge": {
                        "type": "Electricity",
                        "has_capacity": false,
                        "unidirectional": true
                    },
                    "compressor_gas_edge": {
                        "type": "Hydrogen",
                        "has_capacity": false,
                        "unidirectional": true
                    }
                },
                "storage": {
                    "commodity": "Hydrogen",
                    "can_expand": 1,
                    "can_retire": 0,
                    "existing_capacity_storage:": "H2_MWh * <HSC_pipelines.csv/H2PipeCap_tonne_per_mile> * <HSC_pipelines.csv/Pipe_length_miles> * <HSC_pipelines.csv/Existing_No_Pipe>",
                    "investment_cost_storage": 0.0,
                    "fixed_om_cost_storage": 0.0,
                    "variable_om_cost_storage": 0.0,
                    "storage_loss_fraction": 0.0,
                    "min_duration": " Set to 1.0 so storage and discharge capacity are the same",
                    "max_duration": "Set to 1.0 so storage and discharge capacity are the same",
                    "max_capacity_storage":"H2_MWh * <HSC_pipelines.csv/H2PipeCap_tonne_per_mile> * <HSC_pipelines.csv/Pipe_length_miles> * <HSC_pipelines.csv/Max_No_Pipe> #### NOTE: IF THIS IS NOT ZERO, THEN MAXIMUM CAPACITY CONSTRAINT HAS TO BE ADDED IN THE CONSTRAINTS LIST BELOW",
                    "min_capacity_storage": "<HSC_generation/Min_Energy_Cap_tonne> * H2_MWh #### NOTE: IF THIS IS NOT ZERO, THEN MINIMUM CAPACITY CONSTRAINT HAS TO BE ADDED IN THE CONSTRAINTS LIST BELOW",
                    "constraints": {
                        "StorageCapacityConstraint": true,
                        "BalanceConstraint": true
                    }
                }
            },
            "instance_data": [
                {
                    "id": "CT_to_MA",
                    "edges": {
                        "discharge_edge": {
                            "end_vertex": "h2_MA"
                        },
                        "compressor_gas_edge": {
                            "start_vertex": "h2_CT"
                        },
                        "compressor_elec_edge": {
                            "start_vertex": "elec_CT"
                        }
                    }
                },
                {
                    "id": "MA_to_CT",
                    "edges": {
                        "discharge_edge": {
                            "end_vertex": "h2_CT"
                        },
                        "compressor_gas_edge": {
                            "start_vertex": "h2_MA"
                        },
                        "compressor_elec_edge": {
                            "start_vertex": "elec_MA"
                        }
                    }

                }
            ]
        }
    ]
}